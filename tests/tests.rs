mod spectests;

use self::spectests::run_spectest;
use test_log::test;

macro_rules! spectests {
    ($($name:tt),* $(,)?) => {
        paste::paste! {
            $(
                #[test]
                fn [<spec_ $name>]() {
                    run_spectest(stringify!($name)).expect("should have no errors running spectest");
                }
             )*
        }
    };
}

spectests!(
    address,
    align,
    // binary - leb128,
    binary,
    block,
    br,
    br_if,
    br_table,
    // bulk,
    call,
    call_indirect,
    comments,
    const,
    // conversions,
    custom,
    // data,
    // elem,
    endianness,
    exports,
    // f32,
    f32_bitwise,
    f32_cmp,
    // f64,
    f64_bitwise,
    f64_cmp,
    fac,
    // float_exprs,
    float_literals,
    float_memory,
    float_misc,
    forward,
    // func,
    // func_ptrs,
    // global,
    // i32,
    // i64,
    if,
    // imports,
    // inline - module,
    int_exprs,
    int_literals,
    labels,
    // left - to - right,
    linking,
    load,
    local_get,
    local_set,
    local_tee,
    loop,
    memory,
    // memory_copy,
    // memory_fill,
    memory_grow,
    // memory_init,
    memory_redundancy,
    memory_size,
    memory_trap,
    // names,
    nop,
    // ref_func,
    // ref_is_null,
    ref_null,
    return,
    // select,
    // skip - stack - guard - page,
    stack,
    start,
    store,
    switch,
    // table - sub,
    // table,
    // table_copy,
    // table_fill,
    // table_get,
    // table_grow,
    // table_init,
    // table_set,
    // table_size,
    token,
    tokens,
    traps,
    type,
    unreachable,
    // unreached - invalid,
    // unreached - valid,
    unwind,
    // utf8 - custom - section - id,
    // utf8 - import - field,
    // utf8 - import - module,
    // utf8 - invalid - encoding,
);
