// This file was generated by xtask specgen

use shwasi_parser::{validate, Parser};
use test_log::test;

#[test]
fn forward_0() {
    let module = Parser::new(include_bytes!("wasm/forward_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_misc_0() {
    let module = Parser::new(include_bytes!("wasm/float_misc_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_0() {
    let module = Parser::new(include_bytes!("wasm/table_copy_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_2() {
    let module = Parser::new(include_bytes!("wasm/table_copy_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_64() {
    let module = Parser::new(include_bytes!("wasm/table_copy_64.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_126() {
    let module = Parser::new(include_bytes!("wasm/table_copy_126.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_188() {
    let module = Parser::new(include_bytes!("wasm/table_copy_188.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_250() {
    let module = Parser::new(include_bytes!("wasm/table_copy_250.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_312() {
    let module = Parser::new(include_bytes!("wasm/table_copy_312.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_374() {
    let module = Parser::new(include_bytes!("wasm/table_copy_374.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_436() {
    let module = Parser::new(include_bytes!("wasm/table_copy_436.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_498() {
    let module = Parser::new(include_bytes!("wasm/table_copy_498.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_560() {
    let module = Parser::new(include_bytes!("wasm/table_copy_560.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_622() {
    let module = Parser::new(include_bytes!("wasm/table_copy_622.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_684() {
    let module = Parser::new(include_bytes!("wasm/table_copy_684.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_746() {
    let module = Parser::new(include_bytes!("wasm/table_copy_746.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_808() {
    let module = Parser::new(include_bytes!("wasm/table_copy_808.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_870() {
    let module = Parser::new(include_bytes!("wasm/table_copy_870.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_932() {
    let module = Parser::new(include_bytes!("wasm/table_copy_932.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_994() {
    let module = Parser::new(include_bytes!("wasm/table_copy_994.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1056() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1056.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1118() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1118.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1120() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1120.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1122() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1122.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1124() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1124.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1126() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1126.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1128() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1128.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1130() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1130.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1132() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1132.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1134() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1134.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1136() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1136.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1138() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1138.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1140() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1140.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1142() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1142.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1144() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1144.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1146() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1146.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1148() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1148.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1150() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1150.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1152() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1152.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1154() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1154.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1156() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1156.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1158() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1158.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1160() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1160.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1162() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1162.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1196() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1196.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1230() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1230.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1264() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1264.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1298() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1298.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1332() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1332.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1366() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1366.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1400() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1400.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1434() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1434.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1468() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1468.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1598() {
    let module = Parser::new(include_bytes!("wasm/table_copy_1598.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn ref_null_0() {
    let module = Parser::new(include_bytes!("wasm/ref_null_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_0() {
    let module = Parser::new(include_bytes!("wasm/memory_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_1() {
    let module = Parser::new(include_bytes!("wasm/memory_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_2() {
    let module = Parser::new(include_bytes!("wasm/memory_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_3() {
    let module = Parser::new(include_bytes!("wasm/memory_3.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_4() {
    let module = Parser::new(include_bytes!("wasm/memory_4.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_5() {
    let module = Parser::new(include_bytes!("wasm/memory_5.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_memory_6() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_6.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_7() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_7.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_8() {
    let module = Parser::new(include_bytes!("wasm/memory_8.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_10() {
    let module = Parser::new(include_bytes!("wasm/memory_10.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_12() {
    let module = Parser::new(include_bytes!("wasm/memory_12.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_memory_14() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_14.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_15() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_15.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_16() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_16.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_17() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_17.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_18() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_18.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_19() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_19.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_20() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_20.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_21() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_21.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_22() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_22.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_23() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_23.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_24() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_24.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_25() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_25.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_26() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_26.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_27.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_28() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_28.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_29() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_29.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_33() {
    let module = Parser::new(include_bytes!("wasm/memory_33.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn unwind_0() {
    let module = Parser::new(include_bytes!("wasm/unwind_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn call_0() {
    let module = Parser::new(include_bytes!("wasm/call_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_call_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_73.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_74.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_75.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_76.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_77.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_78.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_79.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_80.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_81.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_82.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_83.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_84() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_84.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_85.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_86.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_87() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_87.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_88() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_88.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_0() {
    let module = Parser::new(include_bytes!("wasm/local_get_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_local_get_20() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_20.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_21() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_21.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_22() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_22.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_23() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_23.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_24() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_24.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_25() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_25.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_26() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_26.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_27.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_28() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_28.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_29() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_29.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_30() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_30.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_31() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_31.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_32() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_32.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_33() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_33.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_34() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_34.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_get_35() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_get_35.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn fac_0() {
    let module = Parser::new(include_bytes!("wasm/fac_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_table_sub_0() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table-sub_0.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_sub_1() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table-sub_1.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_0() {
    let module = Parser::new(include_bytes!("wasm/func_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn func_90() {
    let module = Parser::new(include_bytes!("wasm/func_90.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_func_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_91.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_93() {
    let module = Parser::new(include_bytes!("wasm/func_93.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn func_97() {
    let module = Parser::new(include_bytes!("wasm/func_97.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_func_112() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_112.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_113() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_113.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_114() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_114.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_115() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_115.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_116() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_116.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_117() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_117.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_118() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_118.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_119() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_119.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_120() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_120.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_121() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_121.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_122() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_122.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_123() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_123.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_124() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_124.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_125() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_125.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_126() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_126.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_127() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_127.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_128() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_128.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_129() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_129.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_130() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_130.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_131() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_131.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_132() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_132.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_133() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_133.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_134() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_134.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_135() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_135.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_136() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_136.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_137() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_137.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_138() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_138.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_139() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_139.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_140() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_140.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_141() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_141.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_142() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_142.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_143() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_143.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_144() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_144.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_145() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_145.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_146() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_146.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_147() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_147.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_148() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_148.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_149() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_149.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_150() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_150.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_151() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_151.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_152() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_152.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_153() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_153.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_154() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_154.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_155() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_155.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_156() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_156.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_157() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_157.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_158() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_158.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_159() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_159.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_0() {
    let module = Parser::new(include_bytes!("wasm/exports_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_1() {
    let module = Parser::new(include_bytes!("wasm/exports_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_2() {
    let module = Parser::new(include_bytes!("wasm/exports_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_3() {
    let module = Parser::new(include_bytes!("wasm/exports_3.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_4() {
    let module = Parser::new(include_bytes!("wasm/exports_4.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_5() {
    let module = Parser::new(include_bytes!("wasm/exports_5.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_6() {
    let module = Parser::new(include_bytes!("wasm/exports_6.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_7() {
    let module = Parser::new(include_bytes!("wasm/exports_7.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_8() {
    let module = Parser::new(include_bytes!("wasm/exports_8.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_9() {
    let module = Parser::new(include_bytes!("wasm/exports_9.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_10() {
    let module = Parser::new(include_bytes!("wasm/exports_10.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_11() {
    let module = Parser::new(include_bytes!("wasm/exports_11.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_14() {
    let module = Parser::new(include_bytes!("wasm/exports_14.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_15() {
    let module = Parser::new(include_bytes!("wasm/exports_15.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_17() {
    let module = Parser::new(include_bytes!("wasm/exports_17.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_exports_21() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_21.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_22() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_22.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_23() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_23.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_24() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_24.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_25() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_25.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_26() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_26.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_27.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_28() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_28.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_29() {
    let module = Parser::new(include_bytes!("wasm/exports_29.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_30() {
    let module = Parser::new(include_bytes!("wasm/exports_30.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_31() {
    let module = Parser::new(include_bytes!("wasm/exports_31.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_32() {
    let module = Parser::new(include_bytes!("wasm/exports_32.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_33() {
    let module = Parser::new(include_bytes!("wasm/exports_33.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_34() {
    let module = Parser::new(include_bytes!("wasm/exports_34.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_35() {
    let module = Parser::new(include_bytes!("wasm/exports_35.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_36() {
    let module = Parser::new(include_bytes!("wasm/exports_36.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_37() {
    let module = Parser::new(include_bytes!("wasm/exports_37.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_38() {
    let module = Parser::new(include_bytes!("wasm/exports_38.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_41() {
    let module = Parser::new(include_bytes!("wasm/exports_41.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_42() {
    let module = Parser::new(include_bytes!("wasm/exports_42.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_exports_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_44.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_45() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_45.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_46() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_46.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_47() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_47.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_48() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_48.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_49() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_49.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_50() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_50.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_51() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_51.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_52() {
    let module = Parser::new(include_bytes!("wasm/exports_52.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_53() {
    let module = Parser::new(include_bytes!("wasm/exports_53.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_54() {
    let module = Parser::new(include_bytes!("wasm/exports_54.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_55() {
    let module = Parser::new(include_bytes!("wasm/exports_55.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_56() {
    let module = Parser::new(include_bytes!("wasm/exports_56.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_57() {
    let module = Parser::new(include_bytes!("wasm/exports_57.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_58() {
    let module = Parser::new(include_bytes!("wasm/exports_58.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_59() {
    let module = Parser::new(include_bytes!("wasm/exports_59.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_60() {
    let module = Parser::new(include_bytes!("wasm/exports_60.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_61() {
    let module = Parser::new(include_bytes!("wasm/exports_61.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_62() {
    let module = Parser::new(include_bytes!("wasm/exports_62.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_63() {
    let module = Parser::new(include_bytes!("wasm/exports_63.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_64() {
    let module = Parser::new(include_bytes!("wasm/exports_64.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_65() {
    let module = Parser::new(include_bytes!("wasm/exports_65.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_66() {
    let module = Parser::new(include_bytes!("wasm/exports_66.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_exports_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_67.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_68() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_68.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_69() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_69.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_70() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_70.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_71.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_72.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_73.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_74.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_75() {
    let module = Parser::new(include_bytes!("wasm/exports_75.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_76() {
    let module = Parser::new(include_bytes!("wasm/exports_76.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_77() {
    let module = Parser::new(include_bytes!("wasm/exports_77.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_78() {
    let module = Parser::new(include_bytes!("wasm/exports_78.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_79() {
    let module = Parser::new(include_bytes!("wasm/exports_79.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_80() {
    let module = Parser::new(include_bytes!("wasm/exports_80.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_81() {
    let module = Parser::new(include_bytes!("wasm/exports_81.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_82() {
    let module = Parser::new(include_bytes!("wasm/exports_82.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_83() {
    let module = Parser::new(include_bytes!("wasm/exports_83.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_84() {
    let module = Parser::new(include_bytes!("wasm/exports_84.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_85() {
    let module = Parser::new(include_bytes!("wasm/exports_85.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_86() {
    let module = Parser::new(include_bytes!("wasm/exports_86.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_87() {
    let module = Parser::new(include_bytes!("wasm/exports_87.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_88() {
    let module = Parser::new(include_bytes!("wasm/exports_88.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_exports_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_91.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_93.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_94.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_exports_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/exports_95.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_0() {
    let module = Parser::new(include_bytes!("wasm/local_set_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_local_set_20() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_20.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_21() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_21.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_22() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_22.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_23() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_23.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_24() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_24.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_25() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_25.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_26() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_26.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_27.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_28() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_28.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_29() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_29.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_30() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_30.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_31() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_31.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_32() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_32.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_33() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_33.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_34() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_34.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_35() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_35.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_36() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_36.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_37() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_37.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_38() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_38.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_39() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_39.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_40() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_40.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_41() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_41.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_42() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_42.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_43() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_43.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_44.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_45() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_45.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_46() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_46.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_47() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_47.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_48() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_48.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_49() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_49.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_50() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_50.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_51() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_51.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_set_52() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_set_52.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn inline_module_0() {
    let module = Parser::new(include_bytes!("wasm/inline-module_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_0() {
    let module = Parser::new(include_bytes!("wasm/linking_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_2() {
    let module = Parser::new(include_bytes!("wasm/linking_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_7() {
    let module = Parser::new(include_bytes!("wasm/linking_7.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_11() {
    let module = Parser::new(include_bytes!("wasm/linking_11.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_13() {
    let module = Parser::new(include_bytes!("wasm/linking_13.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_31() {
    let module = Parser::new(include_bytes!("wasm/linking_31.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_33() {
    let module = Parser::new(include_bytes!("wasm/linking_33.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_38() {
    let module = Parser::new(include_bytes!("wasm/linking_38.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_40() {
    let module = Parser::new(include_bytes!("wasm/linking_40.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_59() {
    let module = Parser::new(include_bytes!("wasm/linking_59.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_80() {
    let module = Parser::new(include_bytes!("wasm/linking_80.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_81() {
    let module = Parser::new(include_bytes!("wasm/linking_81.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_83() {
    let module = Parser::new(include_bytes!("wasm/linking_83.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_93() {
    let module = Parser::new(include_bytes!("wasm/linking_93.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_95() {
    let module = Parser::new(include_bytes!("wasm/linking_95.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_98() {
    let module = Parser::new(include_bytes!("wasm/linking_98.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_100() {
    let module = Parser::new(include_bytes!("wasm/linking_100.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_104() {
    let module = Parser::new(include_bytes!("wasm/linking_104.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_109() {
    let module = Parser::new(include_bytes!("wasm/linking_109.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_111() {
    let module = Parser::new(include_bytes!("wasm/linking_111.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_127() {
    let module = Parser::new(include_bytes!("wasm/linking_127.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_literals_0() {
    let module = Parser::new(include_bytes!("wasm/float_literals_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_literals_83() {
    let module = Parser::new(include_bytes!("wasm/float_literals_83.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_0() {
    let module = Parser::new(include_bytes!("wasm/align_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_1() {
    let module = Parser::new(include_bytes!("wasm/align_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_2() {
    let module = Parser::new(include_bytes!("wasm/align_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_3() {
    let module = Parser::new(include_bytes!("wasm/align_3.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_4() {
    let module = Parser::new(include_bytes!("wasm/align_4.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_5() {
    let module = Parser::new(include_bytes!("wasm/align_5.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_6() {
    let module = Parser::new(include_bytes!("wasm/align_6.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_7() {
    let module = Parser::new(include_bytes!("wasm/align_7.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_8() {
    let module = Parser::new(include_bytes!("wasm/align_8.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_9() {
    let module = Parser::new(include_bytes!("wasm/align_9.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_10() {
    let module = Parser::new(include_bytes!("wasm/align_10.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_11() {
    let module = Parser::new(include_bytes!("wasm/align_11.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_12() {
    let module = Parser::new(include_bytes!("wasm/align_12.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_13() {
    let module = Parser::new(include_bytes!("wasm/align_13.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_14() {
    let module = Parser::new(include_bytes!("wasm/align_14.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_15() {
    let module = Parser::new(include_bytes!("wasm/align_15.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_16() {
    let module = Parser::new(include_bytes!("wasm/align_16.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_17() {
    let module = Parser::new(include_bytes!("wasm/align_17.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_18() {
    let module = Parser::new(include_bytes!("wasm/align_18.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_19() {
    let module = Parser::new(include_bytes!("wasm/align_19.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_20() {
    let module = Parser::new(include_bytes!("wasm/align_20.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_21() {
    let module = Parser::new(include_bytes!("wasm/align_21.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_22() {
    let module = Parser::new(include_bytes!("wasm/align_22.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_align_69() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_69.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_70() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_70.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_71.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_72.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_73.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_74.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_75.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_76.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_77.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_78.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_79.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_80.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_81.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_82.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_83.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_84() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_84.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_85.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_86.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_87() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_87.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_88() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_88.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_91.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_93.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_94.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_95.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_96() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_96.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_97() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_97.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_98() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_98.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_99() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_99.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_100() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_100.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_101() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_101.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_102() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_102.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_103() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_103.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_104() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_104.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_align_105() {
    let Ok(module) = Parser::new(include_bytes!("wasm/align_105.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_106() {
    let module = Parser::new(include_bytes!("wasm/align_106.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_153() {
    let module = Parser::new(include_bytes!("wasm/align_153.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_utf8_import_module_0() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_0.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_1() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_1.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_2() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_2.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_3() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_3.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_4() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_4.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_5() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_5.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_6() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_6.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_7() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_7.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_8() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_8.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_9() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_9.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_10() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_10.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_11() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_11.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_12() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_12.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_13() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_13.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_14() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_14.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_15() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_15.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_16() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_16.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_17() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_17.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_18() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_18.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_19() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_19.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_20() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_20.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_21() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_21.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_22() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_22.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_23() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_23.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_24() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_24.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_25() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_25.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_26() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_26.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_27.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_28() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_28.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_29() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_29.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_30() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_30.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_31() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_31.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_32() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_32.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_33() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_33.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_34() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_34.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_35() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_35.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_36() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_36.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_37() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_37.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_38() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_38.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_39() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_39.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_40() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_40.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_41() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_41.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_42() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_42.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_43() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_43.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_44.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_45() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_45.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_46() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_46.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_47() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_47.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_48() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_48.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_49() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_49.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_50() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_50.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_51() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_51.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_52() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_52.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_53() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_53.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_54() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_54.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_55() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_55.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_56() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_56.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_57() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_57.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_58() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_58.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_59() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_59.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_60() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_60.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_61() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_61.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_62() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_62.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_63() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_63.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_64() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_64.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_65() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_65.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_66() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_66.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_67.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_68() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_68.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_69() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_69.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_70() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_70.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_71.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_72.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_73.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_74.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_75.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_76.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_77.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_78.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_79.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_80.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_81.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_82.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_83.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_84() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_84.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_85.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_86.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_87() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_87.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_88() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_88.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_89.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_90.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_91.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_92.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_93.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_94.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_95.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_96() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_96.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_97() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_97.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_98() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_98.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_99() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_99.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_100() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_100.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_101() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_101.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_102() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_102.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_103() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_103.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_104() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_104.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_105() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_105.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_106() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_106.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_107() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_107.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_108() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_108.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_109() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_109.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_110() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_110.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_111() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_111.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_112() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_112.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_113() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_113.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_114() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_114.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_115() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_115.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_116() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_116.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_117() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_117.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_118() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_118.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_119() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_119.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_120() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_120.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_121() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_121.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_122() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_122.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_123() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_123.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_124() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_124.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_125() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_125.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_126() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_126.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_127() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_127.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_128() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_128.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_129() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_129.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_130() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_130.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_131() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_131.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_132() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_132.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_133() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_133.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_134() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_134.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_135() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_135.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_136() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_136.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_137() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_137.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_138() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_138.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_139() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_139.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_140() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_140.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_141() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_141.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_142() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_142.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_143() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_143.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_144() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_144.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_145() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_145.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_146() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_146.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_147() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_147.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_148() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_148.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_149() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_149.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_150() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_150.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_151() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_151.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_152() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_152.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_153() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_153.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_154() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_154.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_155() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_155.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_156() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_156.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_157() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_157.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_158() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_158.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_159() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_159.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_160() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_160.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_161() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_161.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_162() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_162.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_163() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_163.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_164() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_164.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_165() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_165.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_166() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_166.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_167() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_167.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_168() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_168.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_169() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_169.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_170() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_170.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_171() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_171.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_172() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_172.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_173() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_173.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_174() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_174.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_module_175() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-module_175.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_0() {
    let module = Parser::new(include_bytes!("wasm/if_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_if_135() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_135.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_136() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_136.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_137() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_137.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_138() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_138.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_139() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_139.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_140() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_140.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_141() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_141.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_142() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_142.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_143() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_143.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_144() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_144.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_145() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_145.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_146() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_146.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_147() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_147.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_148() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_148.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_149() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_149.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_150() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_150.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_151() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_151.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_152() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_152.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_153() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_153.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_154() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_154.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_155() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_155.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_156() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_156.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_157() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_157.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_158() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_158.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_159() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_159.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_160() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_160.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_161() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_161.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_162() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_162.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_163() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_163.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_164() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_164.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_165() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_165.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_166() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_166.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_167() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_167.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_168() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_168.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_169() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_169.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_170() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_170.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_171() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_171.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_172() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_172.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_173() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_173.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_174() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_174.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_175() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_175.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_176() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_176.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_177() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_177.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_178() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_178.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_179() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_179.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_180() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_180.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_181() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_181.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_182() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_182.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_183() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_183.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_184() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_184.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_185() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_185.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_186() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_186.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_187() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_187.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_188() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_188.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_189() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_189.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_190() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_190.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_191() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_191.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_192() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_192.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_193() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_193.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_194() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_194.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_195() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_195.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_196() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_196.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_197() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_197.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_198() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_198.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_199() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_199.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_200() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_200.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_201() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_201.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_202() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_202.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_203() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_203.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_204() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_204.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_205() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_205.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_206() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_206.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_207() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_207.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_208() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_208.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_209() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_209.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_210() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_210.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_211() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_211.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_212() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_212.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_213() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_213.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_214() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_214.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_215() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_215.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_216() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_216.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_217() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_217.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_218() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_218.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_219() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_219.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_220() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_220.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_221() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_221.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_222() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_222.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_223() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_223.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_224() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_224.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_225() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_225.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_if_226() {
    let Ok(module) = Parser::new(include_bytes!("wasm/if_226.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn const_0() {
    let module = Parser::new(include_bytes!("wasm/const_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_1() {
    let module = Parser::new(include_bytes!("wasm/const_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_6() {
    let module = Parser::new(include_bytes!("wasm/const_6.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_7() {
    let module = Parser::new(include_bytes!("wasm/const_7.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_12() {
    let module = Parser::new(include_bytes!("wasm/const_12.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_13() {
    let module = Parser::new(include_bytes!("wasm/const_13.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_14() {
    let module = Parser::new(include_bytes!("wasm/const_14.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_15() {
    let module = Parser::new(include_bytes!("wasm/const_15.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_16() {
    let module = Parser::new(include_bytes!("wasm/const_16.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_17() {
    let module = Parser::new(include_bytes!("wasm/const_17.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_18() {
    let module = Parser::new(include_bytes!("wasm/const_18.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_19() {
    let module = Parser::new(include_bytes!("wasm/const_19.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_20() {
    let module = Parser::new(include_bytes!("wasm/const_20.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_21() {
    let module = Parser::new(include_bytes!("wasm/const_21.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_22() {
    let module = Parser::new(include_bytes!("wasm/const_22.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_23() {
    let module = Parser::new(include_bytes!("wasm/const_23.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_24() {
    let module = Parser::new(include_bytes!("wasm/const_24.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_25() {
    let module = Parser::new(include_bytes!("wasm/const_25.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_26() {
    let module = Parser::new(include_bytes!("wasm/const_26.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_27() {
    let module = Parser::new(include_bytes!("wasm/const_27.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_28() {
    let module = Parser::new(include_bytes!("wasm/const_28.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_29() {
    let module = Parser::new(include_bytes!("wasm/const_29.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_30() {
    let module = Parser::new(include_bytes!("wasm/const_30.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_31() {
    let module = Parser::new(include_bytes!("wasm/const_31.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_32() {
    let module = Parser::new(include_bytes!("wasm/const_32.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_33() {
    let module = Parser::new(include_bytes!("wasm/const_33.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_34() {
    let module = Parser::new(include_bytes!("wasm/const_34.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_35() {
    let module = Parser::new(include_bytes!("wasm/const_35.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_55() {
    let module = Parser::new(include_bytes!("wasm/const_55.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_56() {
    let module = Parser::new(include_bytes!("wasm/const_56.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_57() {
    let module = Parser::new(include_bytes!("wasm/const_57.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_58() {
    let module = Parser::new(include_bytes!("wasm/const_58.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_59() {
    let module = Parser::new(include_bytes!("wasm/const_59.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_60() {
    let module = Parser::new(include_bytes!("wasm/const_60.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_61() {
    let module = Parser::new(include_bytes!("wasm/const_61.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_62() {
    let module = Parser::new(include_bytes!("wasm/const_62.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_63() {
    let module = Parser::new(include_bytes!("wasm/const_63.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_64() {
    let module = Parser::new(include_bytes!("wasm/const_64.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_65() {
    let module = Parser::new(include_bytes!("wasm/const_65.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_66() {
    let module = Parser::new(include_bytes!("wasm/const_66.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_67() {
    let module = Parser::new(include_bytes!("wasm/const_67.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_68() {
    let module = Parser::new(include_bytes!("wasm/const_68.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_69() {
    let module = Parser::new(include_bytes!("wasm/const_69.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_70() {
    let module = Parser::new(include_bytes!("wasm/const_70.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_71() {
    let module = Parser::new(include_bytes!("wasm/const_71.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_72() {
    let module = Parser::new(include_bytes!("wasm/const_72.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_73() {
    let module = Parser::new(include_bytes!("wasm/const_73.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_74() {
    let module = Parser::new(include_bytes!("wasm/const_74.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_75() {
    let module = Parser::new(include_bytes!("wasm/const_75.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_76() {
    let module = Parser::new(include_bytes!("wasm/const_76.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_77() {
    let module = Parser::new(include_bytes!("wasm/const_77.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_78() {
    let module = Parser::new(include_bytes!("wasm/const_78.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_79() {
    let module = Parser::new(include_bytes!("wasm/const_79.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_80() {
    let module = Parser::new(include_bytes!("wasm/const_80.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_81() {
    let module = Parser::new(include_bytes!("wasm/const_81.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_82() {
    let module = Parser::new(include_bytes!("wasm/const_82.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_83() {
    let module = Parser::new(include_bytes!("wasm/const_83.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_84() {
    let module = Parser::new(include_bytes!("wasm/const_84.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_85() {
    let module = Parser::new(include_bytes!("wasm/const_85.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_86() {
    let module = Parser::new(include_bytes!("wasm/const_86.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_87() {
    let module = Parser::new(include_bytes!("wasm/const_87.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_88() {
    let module = Parser::new(include_bytes!("wasm/const_88.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_89() {
    let module = Parser::new(include_bytes!("wasm/const_89.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_90() {
    let module = Parser::new(include_bytes!("wasm/const_90.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_110() {
    let module = Parser::new(include_bytes!("wasm/const_110.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_111() {
    let module = Parser::new(include_bytes!("wasm/const_111.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_114() {
    let module = Parser::new(include_bytes!("wasm/const_114.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_115() {
    let module = Parser::new(include_bytes!("wasm/const_115.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_118() {
    let module = Parser::new(include_bytes!("wasm/const_118.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_119() {
    let module = Parser::new(include_bytes!("wasm/const_119.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_122() {
    let module = Parser::new(include_bytes!("wasm/const_122.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_123() {
    let module = Parser::new(include_bytes!("wasm/const_123.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_126() {
    let module = Parser::new(include_bytes!("wasm/const_126.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_127() {
    let module = Parser::new(include_bytes!("wasm/const_127.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_128() {
    let module = Parser::new(include_bytes!("wasm/const_128.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_129() {
    let module = Parser::new(include_bytes!("wasm/const_129.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_130() {
    let module = Parser::new(include_bytes!("wasm/const_130.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_131() {
    let module = Parser::new(include_bytes!("wasm/const_131.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_132() {
    let module = Parser::new(include_bytes!("wasm/const_132.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_133() {
    let module = Parser::new(include_bytes!("wasm/const_133.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_134() {
    let module = Parser::new(include_bytes!("wasm/const_134.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_135() {
    let module = Parser::new(include_bytes!("wasm/const_135.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_140() {
    let module = Parser::new(include_bytes!("wasm/const_140.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_141() {
    let module = Parser::new(include_bytes!("wasm/const_141.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_144() {
    let module = Parser::new(include_bytes!("wasm/const_144.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_145() {
    let module = Parser::new(include_bytes!("wasm/const_145.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_148() {
    let module = Parser::new(include_bytes!("wasm/const_148.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_149() {
    let module = Parser::new(include_bytes!("wasm/const_149.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_150() {
    let module = Parser::new(include_bytes!("wasm/const_150.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_151() {
    let module = Parser::new(include_bytes!("wasm/const_151.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_152() {
    let module = Parser::new(include_bytes!("wasm/const_152.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_153() {
    let module = Parser::new(include_bytes!("wasm/const_153.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_154() {
    let module = Parser::new(include_bytes!("wasm/const_154.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_155() {
    let module = Parser::new(include_bytes!("wasm/const_155.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_160() {
    let module = Parser::new(include_bytes!("wasm/const_160.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_161() {
    let module = Parser::new(include_bytes!("wasm/const_161.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_164() {
    let module = Parser::new(include_bytes!("wasm/const_164.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_165() {
    let module = Parser::new(include_bytes!("wasm/const_165.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_168() {
    let module = Parser::new(include_bytes!("wasm/const_168.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_169() {
    let module = Parser::new(include_bytes!("wasm/const_169.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_170() {
    let module = Parser::new(include_bytes!("wasm/const_170.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_171() {
    let module = Parser::new(include_bytes!("wasm/const_171.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_178() {
    let module = Parser::new(include_bytes!("wasm/const_178.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_180() {
    let module = Parser::new(include_bytes!("wasm/const_180.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_182() {
    let module = Parser::new(include_bytes!("wasm/const_182.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_184() {
    let module = Parser::new(include_bytes!("wasm/const_184.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_186() {
    let module = Parser::new(include_bytes!("wasm/const_186.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_188() {
    let module = Parser::new(include_bytes!("wasm/const_188.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_190() {
    let module = Parser::new(include_bytes!("wasm/const_190.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_192() {
    let module = Parser::new(include_bytes!("wasm/const_192.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_194() {
    let module = Parser::new(include_bytes!("wasm/const_194.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_196() {
    let module = Parser::new(include_bytes!("wasm/const_196.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_198() {
    let module = Parser::new(include_bytes!("wasm/const_198.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_200() {
    let module = Parser::new(include_bytes!("wasm/const_200.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_202() {
    let module = Parser::new(include_bytes!("wasm/const_202.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_204() {
    let module = Parser::new(include_bytes!("wasm/const_204.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_206() {
    let module = Parser::new(include_bytes!("wasm/const_206.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_208() {
    let module = Parser::new(include_bytes!("wasm/const_208.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_210() {
    let module = Parser::new(include_bytes!("wasm/const_210.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_212() {
    let module = Parser::new(include_bytes!("wasm/const_212.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_214() {
    let module = Parser::new(include_bytes!("wasm/const_214.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_216() {
    let module = Parser::new(include_bytes!("wasm/const_216.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_218() {
    let module = Parser::new(include_bytes!("wasm/const_218.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_220() {
    let module = Parser::new(include_bytes!("wasm/const_220.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_222() {
    let module = Parser::new(include_bytes!("wasm/const_222.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_224() {
    let module = Parser::new(include_bytes!("wasm/const_224.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_226() {
    let module = Parser::new(include_bytes!("wasm/const_226.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_228() {
    let module = Parser::new(include_bytes!("wasm/const_228.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_230() {
    let module = Parser::new(include_bytes!("wasm/const_230.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_232() {
    let module = Parser::new(include_bytes!("wasm/const_232.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_234() {
    let module = Parser::new(include_bytes!("wasm/const_234.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_236() {
    let module = Parser::new(include_bytes!("wasm/const_236.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_238() {
    let module = Parser::new(include_bytes!("wasm/const_238.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_240() {
    let module = Parser::new(include_bytes!("wasm/const_240.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_242() {
    let module = Parser::new(include_bytes!("wasm/const_242.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_244() {
    let module = Parser::new(include_bytes!("wasm/const_244.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_246() {
    let module = Parser::new(include_bytes!("wasm/const_246.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_248() {
    let module = Parser::new(include_bytes!("wasm/const_248.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_250() {
    let module = Parser::new(include_bytes!("wasm/const_250.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_252() {
    let module = Parser::new(include_bytes!("wasm/const_252.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_254() {
    let module = Parser::new(include_bytes!("wasm/const_254.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_256() {
    let module = Parser::new(include_bytes!("wasm/const_256.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_258() {
    let module = Parser::new(include_bytes!("wasm/const_258.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_260() {
    let module = Parser::new(include_bytes!("wasm/const_260.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_262() {
    let module = Parser::new(include_bytes!("wasm/const_262.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_264() {
    let module = Parser::new(include_bytes!("wasm/const_264.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_266() {
    let module = Parser::new(include_bytes!("wasm/const_266.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_268() {
    let module = Parser::new(include_bytes!("wasm/const_268.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_270() {
    let module = Parser::new(include_bytes!("wasm/const_270.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_272() {
    let module = Parser::new(include_bytes!("wasm/const_272.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_274() {
    let module = Parser::new(include_bytes!("wasm/const_274.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_276() {
    let module = Parser::new(include_bytes!("wasm/const_276.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_278() {
    let module = Parser::new(include_bytes!("wasm/const_278.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_280() {
    let module = Parser::new(include_bytes!("wasm/const_280.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_282() {
    let module = Parser::new(include_bytes!("wasm/const_282.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_284() {
    let module = Parser::new(include_bytes!("wasm/const_284.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_286() {
    let module = Parser::new(include_bytes!("wasm/const_286.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_288() {
    let module = Parser::new(include_bytes!("wasm/const_288.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_290() {
    let module = Parser::new(include_bytes!("wasm/const_290.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_292() {
    let module = Parser::new(include_bytes!("wasm/const_292.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_294() {
    let module = Parser::new(include_bytes!("wasm/const_294.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_296() {
    let module = Parser::new(include_bytes!("wasm/const_296.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_298() {
    let module = Parser::new(include_bytes!("wasm/const_298.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_300() {
    let module = Parser::new(include_bytes!("wasm/const_300.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_302() {
    let module = Parser::new(include_bytes!("wasm/const_302.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_304() {
    let module = Parser::new(include_bytes!("wasm/const_304.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_306() {
    let module = Parser::new(include_bytes!("wasm/const_306.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_308() {
    let module = Parser::new(include_bytes!("wasm/const_308.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_310() {
    let module = Parser::new(include_bytes!("wasm/const_310.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_312() {
    let module = Parser::new(include_bytes!("wasm/const_312.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_314() {
    let module = Parser::new(include_bytes!("wasm/const_314.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_316() {
    let module = Parser::new(include_bytes!("wasm/const_316.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_318() {
    let module = Parser::new(include_bytes!("wasm/const_318.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_320() {
    let module = Parser::new(include_bytes!("wasm/const_320.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_322() {
    let module = Parser::new(include_bytes!("wasm/const_322.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_324() {
    let module = Parser::new(include_bytes!("wasm/const_324.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_326() {
    let module = Parser::new(include_bytes!("wasm/const_326.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_328() {
    let module = Parser::new(include_bytes!("wasm/const_328.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_330() {
    let module = Parser::new(include_bytes!("wasm/const_330.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_332() {
    let module = Parser::new(include_bytes!("wasm/const_332.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_334() {
    let module = Parser::new(include_bytes!("wasm/const_334.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_336() {
    let module = Parser::new(include_bytes!("wasm/const_336.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_338() {
    let module = Parser::new(include_bytes!("wasm/const_338.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_340() {
    let module = Parser::new(include_bytes!("wasm/const_340.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_342() {
    let module = Parser::new(include_bytes!("wasm/const_342.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_344() {
    let module = Parser::new(include_bytes!("wasm/const_344.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_346() {
    let module = Parser::new(include_bytes!("wasm/const_346.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_348() {
    let module = Parser::new(include_bytes!("wasm/const_348.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_350() {
    let module = Parser::new(include_bytes!("wasm/const_350.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_352() {
    let module = Parser::new(include_bytes!("wasm/const_352.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_354() {
    let module = Parser::new(include_bytes!("wasm/const_354.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_356() {
    let module = Parser::new(include_bytes!("wasm/const_356.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_358() {
    let module = Parser::new(include_bytes!("wasm/const_358.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_360() {
    let module = Parser::new(include_bytes!("wasm/const_360.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_362() {
    let module = Parser::new(include_bytes!("wasm/const_362.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_364() {
    let module = Parser::new(include_bytes!("wasm/const_364.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_366() {
    let module = Parser::new(include_bytes!("wasm/const_366.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_368() {
    let module = Parser::new(include_bytes!("wasm/const_368.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_370() {
    let module = Parser::new(include_bytes!("wasm/const_370.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_372() {
    let module = Parser::new(include_bytes!("wasm/const_372.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_374() {
    let module = Parser::new(include_bytes!("wasm/const_374.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_376() {
    let module = Parser::new(include_bytes!("wasm/const_376.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_378() {
    let module = Parser::new(include_bytes!("wasm/const_378.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_380() {
    let module = Parser::new(include_bytes!("wasm/const_380.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_382() {
    let module = Parser::new(include_bytes!("wasm/const_382.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_384() {
    let module = Parser::new(include_bytes!("wasm/const_384.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_386() {
    let module = Parser::new(include_bytes!("wasm/const_386.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_388() {
    let module = Parser::new(include_bytes!("wasm/const_388.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_390() {
    let module = Parser::new(include_bytes!("wasm/const_390.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_392() {
    let module = Parser::new(include_bytes!("wasm/const_392.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_394() {
    let module = Parser::new(include_bytes!("wasm/const_394.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_396() {
    let module = Parser::new(include_bytes!("wasm/const_396.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_398() {
    let module = Parser::new(include_bytes!("wasm/const_398.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_400() {
    let module = Parser::new(include_bytes!("wasm/const_400.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_402() {
    let module = Parser::new(include_bytes!("wasm/const_402.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_404() {
    let module = Parser::new(include_bytes!("wasm/const_404.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_406() {
    let module = Parser::new(include_bytes!("wasm/const_406.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_408() {
    let module = Parser::new(include_bytes!("wasm/const_408.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_410() {
    let module = Parser::new(include_bytes!("wasm/const_410.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_412() {
    let module = Parser::new(include_bytes!("wasm/const_412.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_414() {
    let module = Parser::new(include_bytes!("wasm/const_414.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_416() {
    let module = Parser::new(include_bytes!("wasm/const_416.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_418() {
    let module = Parser::new(include_bytes!("wasm/const_418.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_420() {
    let module = Parser::new(include_bytes!("wasm/const_420.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_422() {
    let module = Parser::new(include_bytes!("wasm/const_422.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_424() {
    let module = Parser::new(include_bytes!("wasm/const_424.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_426() {
    let module = Parser::new(include_bytes!("wasm/const_426.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_428() {
    let module = Parser::new(include_bytes!("wasm/const_428.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_430() {
    let module = Parser::new(include_bytes!("wasm/const_430.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_432() {
    let module = Parser::new(include_bytes!("wasm/const_432.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_434() {
    let module = Parser::new(include_bytes!("wasm/const_434.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_436() {
    let module = Parser::new(include_bytes!("wasm/const_436.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_438() {
    let module = Parser::new(include_bytes!("wasm/const_438.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_440() {
    let module = Parser::new(include_bytes!("wasm/const_440.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_442() {
    let module = Parser::new(include_bytes!("wasm/const_442.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_444() {
    let module = Parser::new(include_bytes!("wasm/const_444.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_446() {
    let module = Parser::new(include_bytes!("wasm/const_446.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_448() {
    let module = Parser::new(include_bytes!("wasm/const_448.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_450() {
    let module = Parser::new(include_bytes!("wasm/const_450.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_452() {
    let module = Parser::new(include_bytes!("wasm/const_452.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_454() {
    let module = Parser::new(include_bytes!("wasm/const_454.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_456() {
    let module = Parser::new(include_bytes!("wasm/const_456.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_458() {
    let module = Parser::new(include_bytes!("wasm/const_458.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_460() {
    let module = Parser::new(include_bytes!("wasm/const_460.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_462() {
    let module = Parser::new(include_bytes!("wasm/const_462.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_464() {
    let module = Parser::new(include_bytes!("wasm/const_464.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_466() {
    let module = Parser::new(include_bytes!("wasm/const_466.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_468() {
    let module = Parser::new(include_bytes!("wasm/const_468.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_470() {
    let module = Parser::new(include_bytes!("wasm/const_470.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_472() {
    let module = Parser::new(include_bytes!("wasm/const_472.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_474() {
    let module = Parser::new(include_bytes!("wasm/const_474.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_476() {
    let module = Parser::new(include_bytes!("wasm/const_476.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_478() {
    let module = Parser::new(include_bytes!("wasm/const_478.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_480() {
    let module = Parser::new(include_bytes!("wasm/const_480.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_482() {
    let module = Parser::new(include_bytes!("wasm/const_482.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_484() {
    let module = Parser::new(include_bytes!("wasm/const_484.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_486() {
    let module = Parser::new(include_bytes!("wasm/const_486.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_488() {
    let module = Parser::new(include_bytes!("wasm/const_488.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_490() {
    let module = Parser::new(include_bytes!("wasm/const_490.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_492() {
    let module = Parser::new(include_bytes!("wasm/const_492.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_494() {
    let module = Parser::new(include_bytes!("wasm/const_494.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_496() {
    let module = Parser::new(include_bytes!("wasm/const_496.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_498() {
    let module = Parser::new(include_bytes!("wasm/const_498.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_500() {
    let module = Parser::new(include_bytes!("wasm/const_500.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_502() {
    let module = Parser::new(include_bytes!("wasm/const_502.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_504() {
    let module = Parser::new(include_bytes!("wasm/const_504.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_506() {
    let module = Parser::new(include_bytes!("wasm/const_506.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_508() {
    let module = Parser::new(include_bytes!("wasm/const_508.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_510() {
    let module = Parser::new(include_bytes!("wasm/const_510.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_512() {
    let module = Parser::new(include_bytes!("wasm/const_512.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_514() {
    let module = Parser::new(include_bytes!("wasm/const_514.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_516() {
    let module = Parser::new(include_bytes!("wasm/const_516.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_518() {
    let module = Parser::new(include_bytes!("wasm/const_518.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_520() {
    let module = Parser::new(include_bytes!("wasm/const_520.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_522() {
    let module = Parser::new(include_bytes!("wasm/const_522.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_524() {
    let module = Parser::new(include_bytes!("wasm/const_524.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_526() {
    let module = Parser::new(include_bytes!("wasm/const_526.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_528() {
    let module = Parser::new(include_bytes!("wasm/const_528.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_530() {
    let module = Parser::new(include_bytes!("wasm/const_530.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_532() {
    let module = Parser::new(include_bytes!("wasm/const_532.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_534() {
    let module = Parser::new(include_bytes!("wasm/const_534.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_536() {
    let module = Parser::new(include_bytes!("wasm/const_536.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_538() {
    let module = Parser::new(include_bytes!("wasm/const_538.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_540() {
    let module = Parser::new(include_bytes!("wasm/const_540.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_542() {
    let module = Parser::new(include_bytes!("wasm/const_542.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_544() {
    let module = Parser::new(include_bytes!("wasm/const_544.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_546() {
    let module = Parser::new(include_bytes!("wasm/const_546.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_548() {
    let module = Parser::new(include_bytes!("wasm/const_548.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_550() {
    let module = Parser::new(include_bytes!("wasm/const_550.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_552() {
    let module = Parser::new(include_bytes!("wasm/const_552.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_554() {
    let module = Parser::new(include_bytes!("wasm/const_554.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_556() {
    let module = Parser::new(include_bytes!("wasm/const_556.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_558() {
    let module = Parser::new(include_bytes!("wasm/const_558.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_560() {
    let module = Parser::new(include_bytes!("wasm/const_560.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_562() {
    let module = Parser::new(include_bytes!("wasm/const_562.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_564() {
    let module = Parser::new(include_bytes!("wasm/const_564.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_566() {
    let module = Parser::new(include_bytes!("wasm/const_566.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_568() {
    let module = Parser::new(include_bytes!("wasm/const_568.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_570() {
    let module = Parser::new(include_bytes!("wasm/const_570.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_572() {
    let module = Parser::new(include_bytes!("wasm/const_572.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_574() {
    let module = Parser::new(include_bytes!("wasm/const_574.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_576() {
    let module = Parser::new(include_bytes!("wasm/const_576.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_578() {
    let module = Parser::new(include_bytes!("wasm/const_578.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_580() {
    let module = Parser::new(include_bytes!("wasm/const_580.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_582() {
    let module = Parser::new(include_bytes!("wasm/const_582.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_584() {
    let module = Parser::new(include_bytes!("wasm/const_584.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_586() {
    let module = Parser::new(include_bytes!("wasm/const_586.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_588() {
    let module = Parser::new(include_bytes!("wasm/const_588.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_590() {
    let module = Parser::new(include_bytes!("wasm/const_590.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_592() {
    let module = Parser::new(include_bytes!("wasm/const_592.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_594() {
    let module = Parser::new(include_bytes!("wasm/const_594.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_596() {
    let module = Parser::new(include_bytes!("wasm/const_596.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_598() {
    let module = Parser::new(include_bytes!("wasm/const_598.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_600() {
    let module = Parser::new(include_bytes!("wasm/const_600.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_602() {
    let module = Parser::new(include_bytes!("wasm/const_602.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_604() {
    let module = Parser::new(include_bytes!("wasm/const_604.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_606() {
    let module = Parser::new(include_bytes!("wasm/const_606.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_608() {
    let module = Parser::new(include_bytes!("wasm/const_608.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_610() {
    let module = Parser::new(include_bytes!("wasm/const_610.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_612() {
    let module = Parser::new(include_bytes!("wasm/const_612.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_614() {
    let module = Parser::new(include_bytes!("wasm/const_614.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_616() {
    let module = Parser::new(include_bytes!("wasm/const_616.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_618() {
    let module = Parser::new(include_bytes!("wasm/const_618.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_620() {
    let module = Parser::new(include_bytes!("wasm/const_620.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_622() {
    let module = Parser::new(include_bytes!("wasm/const_622.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_624() {
    let module = Parser::new(include_bytes!("wasm/const_624.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_626() {
    let module = Parser::new(include_bytes!("wasm/const_626.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_628() {
    let module = Parser::new(include_bytes!("wasm/const_628.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_630() {
    let module = Parser::new(include_bytes!("wasm/const_630.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_632() {
    let module = Parser::new(include_bytes!("wasm/const_632.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_634() {
    let module = Parser::new(include_bytes!("wasm/const_634.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_636() {
    let module = Parser::new(include_bytes!("wasm/const_636.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_638() {
    let module = Parser::new(include_bytes!("wasm/const_638.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_640() {
    let module = Parser::new(include_bytes!("wasm/const_640.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_642() {
    let module = Parser::new(include_bytes!("wasm/const_642.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_644() {
    let module = Parser::new(include_bytes!("wasm/const_644.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_646() {
    let module = Parser::new(include_bytes!("wasm/const_646.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_648() {
    let module = Parser::new(include_bytes!("wasm/const_648.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_650() {
    let module = Parser::new(include_bytes!("wasm/const_650.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_652() {
    let module = Parser::new(include_bytes!("wasm/const_652.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_654() {
    let module = Parser::new(include_bytes!("wasm/const_654.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_656() {
    let module = Parser::new(include_bytes!("wasm/const_656.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_658() {
    let module = Parser::new(include_bytes!("wasm/const_658.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_660() {
    let module = Parser::new(include_bytes!("wasm/const_660.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_662() {
    let module = Parser::new(include_bytes!("wasm/const_662.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_664() {
    let module = Parser::new(include_bytes!("wasm/const_664.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_666() {
    let module = Parser::new(include_bytes!("wasm/const_666.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_668() {
    let module = Parser::new(include_bytes!("wasm/const_668.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_670() {
    let module = Parser::new(include_bytes!("wasm/const_670.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_672() {
    let module = Parser::new(include_bytes!("wasm/const_672.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_674() {
    let module = Parser::new(include_bytes!("wasm/const_674.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_676() {
    let module = Parser::new(include_bytes!("wasm/const_676.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_678() {
    let module = Parser::new(include_bytes!("wasm/const_678.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_680() {
    let module = Parser::new(include_bytes!("wasm/const_680.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_682() {
    let module = Parser::new(include_bytes!("wasm/const_682.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_684() {
    let module = Parser::new(include_bytes!("wasm/const_684.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_686() {
    let module = Parser::new(include_bytes!("wasm/const_686.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_688() {
    let module = Parser::new(include_bytes!("wasm/const_688.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_690() {
    let module = Parser::new(include_bytes!("wasm/const_690.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_692() {
    let module = Parser::new(include_bytes!("wasm/const_692.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_694() {
    let module = Parser::new(include_bytes!("wasm/const_694.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_696() {
    let module = Parser::new(include_bytes!("wasm/const_696.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_698() {
    let module = Parser::new(include_bytes!("wasm/const_698.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_700() {
    let module = Parser::new(include_bytes!("wasm/const_700.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_702() {
    let module = Parser::new(include_bytes!("wasm/const_702.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_704() {
    let module = Parser::new(include_bytes!("wasm/const_704.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_706() {
    let module = Parser::new(include_bytes!("wasm/const_706.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_708() {
    let module = Parser::new(include_bytes!("wasm/const_708.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_710() {
    let module = Parser::new(include_bytes!("wasm/const_710.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_712() {
    let module = Parser::new(include_bytes!("wasm/const_712.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_714() {
    let module = Parser::new(include_bytes!("wasm/const_714.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_716() {
    let module = Parser::new(include_bytes!("wasm/const_716.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_718() {
    let module = Parser::new(include_bytes!("wasm/const_718.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_720() {
    let module = Parser::new(include_bytes!("wasm/const_720.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_722() {
    let module = Parser::new(include_bytes!("wasm/const_722.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_724() {
    let module = Parser::new(include_bytes!("wasm/const_724.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_726() {
    let module = Parser::new(include_bytes!("wasm/const_726.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_728() {
    let module = Parser::new(include_bytes!("wasm/const_728.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_730() {
    let module = Parser::new(include_bytes!("wasm/const_730.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_732() {
    let module = Parser::new(include_bytes!("wasm/const_732.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_734() {
    let module = Parser::new(include_bytes!("wasm/const_734.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_736() {
    let module = Parser::new(include_bytes!("wasm/const_736.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_738() {
    let module = Parser::new(include_bytes!("wasm/const_738.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_740() {
    let module = Parser::new(include_bytes!("wasm/const_740.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_742() {
    let module = Parser::new(include_bytes!("wasm/const_742.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_744() {
    let module = Parser::new(include_bytes!("wasm/const_744.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_746() {
    let module = Parser::new(include_bytes!("wasm/const_746.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_748() {
    let module = Parser::new(include_bytes!("wasm/const_748.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_750() {
    let module = Parser::new(include_bytes!("wasm/const_750.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_752() {
    let module = Parser::new(include_bytes!("wasm/const_752.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_754() {
    let module = Parser::new(include_bytes!("wasm/const_754.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_756() {
    let module = Parser::new(include_bytes!("wasm/const_756.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_758() {
    let module = Parser::new(include_bytes!("wasm/const_758.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_760() {
    let module = Parser::new(include_bytes!("wasm/const_760.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_762() {
    let module = Parser::new(include_bytes!("wasm/const_762.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_764() {
    let module = Parser::new(include_bytes!("wasm/const_764.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_766() {
    let module = Parser::new(include_bytes!("wasm/const_766.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_768() {
    let module = Parser::new(include_bytes!("wasm/const_768.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_770() {
    let module = Parser::new(include_bytes!("wasm/const_770.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_772() {
    let module = Parser::new(include_bytes!("wasm/const_772.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_774() {
    let module = Parser::new(include_bytes!("wasm/const_774.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_776() {
    let module = Parser::new(include_bytes!("wasm/const_776.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn skip_stack_guard_page_0() {
    let module = Parser::new(include_bytes!("wasm/skip-stack-guard-page_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn f64_cmp_0() {
    let module = Parser::new(include_bytes!("wasm/f64_cmp_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_f64_cmp_2401() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_cmp_2401.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_cmp_2402() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_cmp_2402.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_cmp_2403() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_cmp_2403.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_cmp_2404() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_cmp_2404.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_cmp_2405() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_cmp_2405.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_cmp_2406() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_cmp_2406.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_0() {
    let module = Parser::new(include_bytes!("wasm/block_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_block_64() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_64.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_65() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_65.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_66() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_66.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_67.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_68() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_68.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_69() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_69.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_70() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_70.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_71.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_72.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_73.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_74.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_75.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_76.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_77.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_78.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_79.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_80.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_81.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_82.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_83.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_84() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_84.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_85.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_86.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_87() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_87.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_88() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_88.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_91.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_93.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_94.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_95.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_96() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_96.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_97() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_97.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_98() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_98.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_99() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_99.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_100() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_100.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_101() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_101.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_102() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_102.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_103() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_103.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_104() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_104.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_105() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_105.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_106() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_106.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_107() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_107.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_108() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_108.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_109() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_109.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_110() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_110.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_111() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_111.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_112() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_112.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_113() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_113.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_114() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_114.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_115() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_115.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_116() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_116.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_117() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_117.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_118() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_118.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_119() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_119.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_120() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_120.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_121() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_121.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_122() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_122.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_123() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_123.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_124() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_124.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_125() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_125.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_126() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_126.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_127() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_127.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_128() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_128.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_129() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_129.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_130() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_130.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_131() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_131.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_132() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_132.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_133() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_133.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_134() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_134.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_135() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_135.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_136() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_136.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_137() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_137.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_138() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_138.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_139() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_139.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_140() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_140.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_141() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_141.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_142() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_142.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_143() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_143.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_144() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_144.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_145() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_145.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_146() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_146.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_147() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_147.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_148() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_148.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_149() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_149.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_150() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_150.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_151() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_151.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_152() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_152.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_153() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_153.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_154() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_154.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_155() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_155.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_156() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_156.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_157() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_157.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_158() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_158.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_159() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_159.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_160() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_160.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_161() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_161.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_162() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_162.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_163() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_163.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_164() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_164.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_165() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_165.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_166() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_166.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_167() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_167.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_168() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_168.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_169() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_169.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_170() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_170.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_171() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_171.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_172() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_172.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_173() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_173.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_174() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_174.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_175() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_175.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_176() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_176.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_177() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_177.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_178() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_178.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_179() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_179.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_180() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_180.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_181() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_181.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_182() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_182.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_183() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_183.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_184() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_184.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_185() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_185.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_186() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_186.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_187() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_187.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_188() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_188.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_189() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_189.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_190() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_190.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_191() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_191.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_192() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_192.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_193() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_193.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_194() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_194.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_195() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_195.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_196() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_196.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_197() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_197.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_198() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_198.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_199() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_199.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_200() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_200.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_201() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_201.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_202() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_202.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_203() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_203.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_204() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_204.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_205() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_205.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_206() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_206.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_207() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_207.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_208() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_208.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_209() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_209.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_210() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_210.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_211() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_211.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_212() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_212.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_213() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_213.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_214() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_214.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_215() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_215.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_216() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_216.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_217() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_217.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_block_218() {
    let Ok(module) = Parser::new(include_bytes!("wasm/block_218.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_0() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_0.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_1() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_1.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_2() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_2.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_3() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_3.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_4() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_4.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_5() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_5.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_6() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_6.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_7() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_7.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_8() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_8.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_9() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_9.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_10() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_10.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_11() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_11.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_12() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_12.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_13() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_13.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_14() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_14.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_15() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_15.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_16() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_16.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_17() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_17.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_18() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_18.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_19() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_19.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_20() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_20.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_21() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_21.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_22() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_22.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_23() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_23.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_24() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_24.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_25() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_25.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_26() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_26.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_27.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_28() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_28.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_29() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_29.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_30() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_30.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_31() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_31.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_32() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_32.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_33() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_33.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_34() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_34.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_35() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_35.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_36() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_36.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_37() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_37.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_38() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_38.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_39() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_39.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_40() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_40.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_41() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_41.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_42() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_42.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_43() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_43.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_44.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_45() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_45.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_46() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_46.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_47() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_47.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_48() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_48.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_49() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_49.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_50() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_50.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_51() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_51.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_52() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_52.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_53() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_53.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_54() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_54.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_55() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_55.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_56() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_56.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_57() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_57.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_58() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_58.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_59() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_59.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_60() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_60.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_61() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_61.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_62() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_62.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_63() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_63.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_64() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_64.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_65() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_65.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_66() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_66.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_67.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_68() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_68.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_69() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_69.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_70() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_70.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_71.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_72.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_73.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_74.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_75.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_76.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_77.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_78.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_79.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_80.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_81.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_82.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_83.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_84() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_84.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_85.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_86.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_87() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_87.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_88() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_88.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_89.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_90.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_91.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_92.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_93.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_94.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_95.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_96() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_96.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_97() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_97.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_98() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_98.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_99() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_99.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_100() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_100.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_101() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_101.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_102() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_102.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_103() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_103.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_104() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_104.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_105() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_105.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_106() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_106.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_107() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_107.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_108() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_108.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_109() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_109.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_110() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_110.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_111() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_111.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_112() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_112.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_113() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_113.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_114() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_114.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_115() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_115.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_116() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_116.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_unreached_invalid_117() {
    let Ok(module) = Parser::new(include_bytes!("wasm/unreached-invalid_117.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn labels_0() {
    let module = Parser::new(include_bytes!("wasm/labels_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_labels_26() {
    let Ok(module) = Parser::new(include_bytes!("wasm/labels_26.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_labels_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/labels_27.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_labels_28() {
    let Ok(module) = Parser::new(include_bytes!("wasm/labels_28.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn switch_0() {
    let module = Parser::new(include_bytes!("wasm/switch_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_switch_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/switch_27.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_0() {
    let module = Parser::new(include_bytes!("wasm/i64_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_i64_385() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_385.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_386() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_386.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_387() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_387.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_388() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_388.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_389() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_389.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_390() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_390.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_391() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_391.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_392() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_392.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_393() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_393.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_394() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_394.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_395() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_395.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_396() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_396.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_397() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_397.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_398() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_398.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_399() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_399.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_400() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_400.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_401() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_401.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_402() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_402.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_403() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_403.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_404() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_404.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_405() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_405.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_406() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_406.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_407() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_407.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_408() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_408.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_409() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_409.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_410() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_410.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_411() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_411.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_412() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_412.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i64_413() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i64_413.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_0() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_32() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_32.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_64() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_64.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_96() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_96.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_128() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_128.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_160() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_160.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_192() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_192.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_224() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_224.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_256() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_256.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_607() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_607.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_959() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_959.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_1310() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_1310.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_1662() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_1662.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_2013() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_2013.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_2364() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_2364.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_2715() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_2715.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_3066() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_3066.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_3417() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_3417.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_3768() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_3768.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_memory_copy_4119() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4119.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4120() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4120.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4121() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4121.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4122() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4122.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4123() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4123.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4124() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4124.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4125() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4125.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4126() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4126.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4127() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4127.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4128() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4128.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4129() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4129.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4130() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4130.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4131() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4131.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4132() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4132.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4133() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4133.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4134() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4134.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4135() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4135.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4136() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4136.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4137() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4137.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4138() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4138.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4139() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4139.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4140() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4140.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4141() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4141.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4142() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4142.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4143() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4143.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4144() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4144.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4145() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4145.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4146() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4146.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4147() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4147.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4148() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4148.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4149() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4149.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4150() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4150.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4151() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4151.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4152() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4152.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4153() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4153.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4154() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4154.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4155() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4155.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4156() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4156.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4157() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4157.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4158() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4158.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4159() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4159.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4160() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4160.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4161() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4161.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4162() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4162.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4163() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4163.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4164() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4164.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4165() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4165.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4166() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4166.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4167() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4167.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4168() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4168.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4169() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4169.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4170() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4170.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4171() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4171.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4172() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4172.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4173() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4173.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4174() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4174.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4175() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4175.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4176() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4176.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4177() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4177.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4178() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4178.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4179() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4179.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4180() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4180.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4181() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4181.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_copy_4182() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_copy_4182.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4183() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4183.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4188() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4188.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4193() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4193.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4195() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4195.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4197() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4197.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4199() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4199.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4201() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4201.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4205() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4205.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4207() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4207.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4209() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4209.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4211() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4211.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4213() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4213.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4215() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4215.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4217() {
    let module = Parser::new(include_bytes!("wasm/memory_copy_4217.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn stack_0() {
    let module = Parser::new(include_bytes!("wasm/stack_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn stack_6() {
    let module = Parser::new(include_bytes!("wasm/stack_6.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn loop_0() {
    let module = Parser::new(include_bytes!("wasm/loop_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_loop_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_91.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_93.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_94.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_95.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_96() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_96.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_97() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_97.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_98() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_98.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_99() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_99.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_100() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_100.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_101() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_101.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_102() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_102.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_103() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_103.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_104() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_104.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_105() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_105.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_106() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_106.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_107() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_107.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_108() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_108.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_109() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_109.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_110() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_110.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_111() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_111.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_112() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_112.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_113() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_113.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_114() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_114.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_loop_115() {
    let Ok(module) = Parser::new(include_bytes!("wasm/loop_115.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_0() {
    let module = Parser::new(include_bytes!("wasm/conversions_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_conversions_594() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_594.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_595() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_595.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_596() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_596.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_597() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_597.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_598() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_598.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_599() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_599.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_600() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_600.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_601() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_601.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_602() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_602.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_603() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_603.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_604() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_604.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_605() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_605.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_606() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_606.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_607() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_607.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_608() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_608.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_609() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_609.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_610() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_610.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_611() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_611.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_612() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_612.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_613() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_613.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_614() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_614.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_615() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_615.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_616() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_616.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_617() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_617.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_conversions_618() {
    let Ok(module) = Parser::new(include_bytes!("wasm/conversions_618.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn comments_0() {
    let module = Parser::new(include_bytes!("wasm/comments_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn comments_1() {
    let module = Parser::new(include_bytes!("wasm/comments_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn comments_2() {
    let module = Parser::new(include_bytes!("wasm/comments_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn comments_3() {
    let module = Parser::new(include_bytes!("wasm/comments_3.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn endianness_0() {
    let module = Parser::new(include_bytes!("wasm/endianness_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn return_0() {
    let module = Parser::new(include_bytes!("wasm/return_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_return_64() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_64.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_65() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_65.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_66() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_66.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_67.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_68() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_68.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_69() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_69.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_70() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_70.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_71.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_72.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_73.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_74.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_75.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_76.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_77.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_78.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_79.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_80.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_81.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_82.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_return_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/return_83.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_0() {
    let module = Parser::new(include_bytes!("wasm/store_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_store_17() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_17.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_18() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_18.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_19() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_19.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_20() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_20.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_21() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_21.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_22() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_22.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_23() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_23.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_24() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_24.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_25() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_25.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_26() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_26.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_27.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_28() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_28.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_29() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_29.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_30() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_30.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_31() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_31.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_32() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_32.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_33() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_33.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_34() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_34.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_35() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_35.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_36() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_36.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_37() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_37.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_38() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_38.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_39() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_39.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_40() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_40.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_41() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_41.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_42() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_42.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_43() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_43.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_44.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_45() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_45.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_46() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_46.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_47() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_47.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_48() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_48.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_49() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_49.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_50() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_50.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_51() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_51.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_52() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_52.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_53() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_53.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_54() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_54.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_55() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_55.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_56() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_56.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_57() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_57.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_58() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_58.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_59() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_59.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_60() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_60.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_61() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_61.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_62() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_62.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_63() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_63.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_64() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_64.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_65() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_65.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_66() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_66.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_store_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/store_67.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_redundancy_0() {
    let module = Parser::new(include_bytes!("wasm/memory_redundancy_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn i32_0() {
    let module = Parser::new(include_bytes!("wasm/i32_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_i32_375() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_375.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_376() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_376.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_377() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_377.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_378() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_378.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_379() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_379.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_380() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_380.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_381() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_381.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_382() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_382.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_383() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_383.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_384() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_384.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_385() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_385.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_386() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_386.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_387() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_387.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_388() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_388.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_389() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_389.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_390() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_390.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_391() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_391.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_392() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_392.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_393() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_393.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_394() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_394.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_395() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_395.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_396() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_396.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_397() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_397.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_398() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_398.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_399() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_399.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_400() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_400.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_401() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_401.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_402() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_402.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_403() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_403.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_404() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_404.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_405() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_405.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_406() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_406.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_407() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_407.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_408() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_408.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_409() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_409.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_410() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_410.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_411() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_411.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_412() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_412.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_413() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_413.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_414() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_414.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_415() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_415.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_416() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_416.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_417() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_417.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_418() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_418.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_419() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_419.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_420() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_420.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_421() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_421.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_422() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_422.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_423() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_423.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_424() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_424.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_425() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_425.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_426() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_426.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_427() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_427.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_428() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_428.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_429() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_429.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_430() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_430.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_431() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_431.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_432() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_432.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_433() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_433.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_434() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_434.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_435() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_435.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_436() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_436.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_437() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_437.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_438() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_438.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_439() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_439.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_440() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_440.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_441() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_441.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_442() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_442.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_443() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_443.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_444() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_444.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_445() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_445.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_446() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_446.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_447() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_447.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_448() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_448.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_449() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_449.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_450() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_450.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_451() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_451.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_452() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_452.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_453() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_453.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_454() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_454.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_455() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_455.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_456() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_456.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_i32_457() {
    let Ok(module) = Parser::new(include_bytes!("wasm/i32_457.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreachable_0() {
    let module = Parser::new(include_bytes!("wasm/unreachable_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_0() {
    let module = Parser::new(include_bytes!("wasm/bulk_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_1() {
    let module = Parser::new(include_bytes!("wasm/bulk_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_2() {
    let module = Parser::new(include_bytes!("wasm/bulk_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_18() {
    let module = Parser::new(include_bytes!("wasm/bulk_18.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_47() {
    let module = Parser::new(include_bytes!("wasm/bulk_47.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_60() {
    let module = Parser::new(include_bytes!("wasm/bulk_60.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_71() {
    let module = Parser::new(include_bytes!("wasm/bulk_71.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_72() {
    let module = Parser::new(include_bytes!("wasm/bulk_72.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_73() {
    let module = Parser::new(include_bytes!("wasm/bulk_73.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_85() {
    let module = Parser::new(include_bytes!("wasm/bulk_85.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_96() {
    let module = Parser::new(include_bytes!("wasm/bulk_96.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_97() {
    let module = Parser::new(include_bytes!("wasm/bulk_97.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_98() {
    let module = Parser::new(include_bytes!("wasm/bulk_98.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn traps_0() {
    let module = Parser::new(include_bytes!("wasm/traps_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn traps_7() {
    let module = Parser::new(include_bytes!("wasm/traps_7.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn traps_12() {
    let module = Parser::new(include_bytes!("wasm/traps_12.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn traps_21() {
    let module = Parser::new(include_bytes!("wasm/traps_21.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn local_tee_0() {
    let module = Parser::new(include_bytes!("wasm/local_tee_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_local_tee_56() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_56.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_57() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_57.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_58() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_58.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_59() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_59.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_60() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_60.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_61() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_61.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_62() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_62.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_63() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_63.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_64() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_64.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_65() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_65.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_66() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_66.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_67.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_68() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_68.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_69() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_69.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_70() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_70.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_71.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_72.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_73.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_74.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_75.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_76.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_77.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_78.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_79.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_80.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_81.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_82.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_83.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_84() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_84.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_85.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_86.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_87() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_87.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_88() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_88.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_91.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_93.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_94.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_95.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_local_tee_96() {
    let Ok(module) = Parser::new(include_bytes!("wasm/local_tee_96.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_bitwise_0() {
    let module = Parser::new(include_bytes!("wasm/f64_bitwise_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_f64_bitwise_361() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_bitwise_361.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_bitwise_362() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_bitwise_362.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_bitwise_363() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_bitwise_363.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_0() {
    let module = Parser::new(include_bytes!("wasm/binary_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_1() {
    let module = Parser::new(include_bytes!("wasm/binary_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_2() {
    let module = Parser::new(include_bytes!("wasm/binary_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_3() {
    let module = Parser::new(include_bytes!("wasm/binary_3.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_4() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_4.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_5() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_5.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_6() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_6.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_7() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_7.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_8() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_8.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_9() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_9.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_10() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_10.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_11() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_11.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_12() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_12.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_13() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_13.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_14() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_14.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_15() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_15.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_16() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_16.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_17() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_17.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_18() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_18.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_19() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_19.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_20() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_20.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_21() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_21.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_22() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_22.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_23() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_23.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_24() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_24.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_25() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_25.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_26() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_26.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_27.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_28() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_28.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_29() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_29.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_30() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_30.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_31() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_31.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_32() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_32.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_33() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_33.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_34() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_34.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_35() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_35.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_36() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_36.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_37() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_37.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_38() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_38.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_39() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_39.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_40() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_40.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_41() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_41.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_42() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_42.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_43() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_43.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_44.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_45() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_45.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_46() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_46.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_47() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_47.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_48() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_48.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_49() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_49.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_50() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_50.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_51() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_51.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_52() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_52.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_53() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_53.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_54() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_54.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_55() {
    let module = Parser::new(include_bytes!("wasm/binary_55.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_56() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_56.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_57() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_57.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_58() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_58.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_59() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_59.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_60() {
    let module = Parser::new(include_bytes!("wasm/binary_60.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_61() {
    let module = Parser::new(include_bytes!("wasm/binary_61.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_62() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_62.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_63() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_63.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_64() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_64.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_65() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_65.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_66() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_66.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_67.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_68() {
    let module = Parser::new(include_bytes!("wasm/binary_68.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_69() {
    let module = Parser::new(include_bytes!("wasm/binary_69.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_70() {
    let module = Parser::new(include_bytes!("wasm/binary_70.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_71.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_72.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_73() {
    let module = Parser::new(include_bytes!("wasm/binary_73.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_74.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_75.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_76.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_77.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_78.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_79.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_80.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_81.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_82() {
    let module = Parser::new(include_bytes!("wasm/binary_82.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_83.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_84() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_84.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_85.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_86.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_87() {
    let module = Parser::new(include_bytes!("wasm/binary_87.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_88() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_88.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_91.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_93() {
    let module = Parser::new(include_bytes!("wasm/binary_93.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_94.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_95.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_96() {
    let module = Parser::new(include_bytes!("wasm/binary_96.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_97() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_97.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_98() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_98.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_99() {
    let module = Parser::new(include_bytes!("wasm/binary_99.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_100() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_100.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_101() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_101.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_102() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_102.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_103() {
    let module = Parser::new(include_bytes!("wasm/binary_103.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_104() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_104.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_105() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_105.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_106() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_106.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_107() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_107.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_108() {
    let module = Parser::new(include_bytes!("wasm/binary_108.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_109() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_109.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_110() {
    let module = Parser::new(include_bytes!("wasm/binary_110.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_111() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary_111.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_grow_0() {
    let module = Parser::new(include_bytes!("wasm/memory_grow_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_grow_21() {
    let module = Parser::new(include_bytes!("wasm/memory_grow_21.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_grow_30() {
    let module = Parser::new(include_bytes!("wasm/memory_grow_30.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_grow_39() {
    let module = Parser::new(include_bytes!("wasm/memory_grow_39.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_grow_51() {
    let module = Parser::new(include_bytes!("wasm/memory_grow_51.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_memory_grow_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_grow_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_grow_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_grow_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_grow_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_grow_91.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_grow_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_grow_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_grow_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_grow_93.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_grow_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_grow_94.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_grow_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_grow_95.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn tokens_0() {
    let module = Parser::new(include_bytes!("wasm/tokens_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_1() {
    let module = Parser::new(include_bytes!("wasm/tokens_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_2() {
    let module = Parser::new(include_bytes!("wasm/tokens_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_3() {
    let module = Parser::new(include_bytes!("wasm/tokens_3.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_4() {
    let module = Parser::new(include_bytes!("wasm/tokens_4.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_5() {
    let module = Parser::new(include_bytes!("wasm/tokens_5.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_6() {
    let module = Parser::new(include_bytes!("wasm/tokens_6.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_7() {
    let module = Parser::new(include_bytes!("wasm/tokens_7.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_8() {
    let module = Parser::new(include_bytes!("wasm/tokens_8.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_9() {
    let module = Parser::new(include_bytes!("wasm/tokens_9.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_10() {
    let module = Parser::new(include_bytes!("wasm/tokens_10.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_11() {
    let module = Parser::new(include_bytes!("wasm/tokens_11.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_12() {
    let module = Parser::new(include_bytes!("wasm/tokens_12.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_13() {
    let module = Parser::new(include_bytes!("wasm/tokens_13.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_14() {
    let module = Parser::new(include_bytes!("wasm/tokens_14.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_15() {
    let module = Parser::new(include_bytes!("wasm/tokens_15.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_16() {
    let module = Parser::new(include_bytes!("wasm/tokens_16.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_18() {
    let module = Parser::new(include_bytes!("wasm/tokens_18.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_20() {
    let module = Parser::new(include_bytes!("wasm/tokens_20.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_22() {
    let module = Parser::new(include_bytes!("wasm/tokens_22.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_23() {
    let module = Parser::new(include_bytes!("wasm/tokens_23.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_24() {
    let module = Parser::new(include_bytes!("wasm/tokens_24.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_26() {
    let module = Parser::new(include_bytes!("wasm/tokens_26.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_28() {
    let module = Parser::new(include_bytes!("wasm/tokens_28.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_30() {
    let module = Parser::new(include_bytes!("wasm/tokens_30.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_32() {
    let module = Parser::new(include_bytes!("wasm/tokens_32.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_34() {
    let module = Parser::new(include_bytes!("wasm/tokens_34.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_36() {
    let module = Parser::new(include_bytes!("wasm/tokens_36.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_38() {
    let module = Parser::new(include_bytes!("wasm/tokens_38.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_40() {
    let module = Parser::new(include_bytes!("wasm/tokens_40.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_42() {
    let module = Parser::new(include_bytes!("wasm/tokens_42.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_44() {
    let module = Parser::new(include_bytes!("wasm/tokens_44.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_46() {
    let module = Parser::new(include_bytes!("wasm/tokens_46.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_48() {
    let module = Parser::new(include_bytes!("wasm/tokens_48.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_50() {
    let module = Parser::new(include_bytes!("wasm/tokens_50.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn call_indirect_0() {
    let module = Parser::new(include_bytes!("wasm/call_indirect_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn call_indirect_123() {
    let module = Parser::new(include_bytes!("wasm/call_indirect_123.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_call_indirect_147() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_147.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_148() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_148.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_149() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_149.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_150() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_150.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_151() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_151.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_152() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_152.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_153() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_153.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_154() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_154.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_155() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_155.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_156() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_156.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_157() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_157.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_158() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_158.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_159() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_159.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_160() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_160.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_161() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_161.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_162() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_162.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_163() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_163.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_164() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_164.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_165() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_165.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_166() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_166.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_167() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_167.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_call_indirect_168() {
    let Ok(module) = Parser::new(include_bytes!("wasm/call_indirect_168.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_169() {
    let module = Parser::new(include_bytes!("wasm/call_indirect_169.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn type_0() {
    let module = Parser::new(include_bytes!("wasm/type_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn load_0() {
    let module = Parser::new(include_bytes!("wasm/load_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_load_51() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_51.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_52() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_52.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_53() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_53.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_54() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_54.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_55() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_55.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_56() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_56.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_57() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_57.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_58() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_58.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_59() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_59.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_60() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_60.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_61() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_61.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_62() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_62.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_63() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_63.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_64() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_64.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_65() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_65.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_66() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_66.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_67.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_68() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_68.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_69() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_69.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_70() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_70.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_71.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_72.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_73.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_74.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_75.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_76.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_77.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_78.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_79.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_80.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_81.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_82.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_83.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_84() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_84.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_85.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_86.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_87() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_87.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_88() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_88.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_91.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_93.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_94.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_95.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_load_96() {
    let Ok(module) = Parser::new(include_bytes!("wasm/load_96.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_0() {
    let module = Parser::new(include_bytes!("wasm/memory_fill_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_4() {
    let module = Parser::new(include_bytes!("wasm/memory_fill_4.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_6() {
    let module = Parser::new(include_bytes!("wasm/memory_fill_6.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_8() {
    let module = Parser::new(include_bytes!("wasm/memory_fill_8.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_11() {
    let module = Parser::new(include_bytes!("wasm/memory_fill_11.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_13() {
    let module = Parser::new(include_bytes!("wasm/memory_fill_13.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_15() {
    let module = Parser::new(include_bytes!("wasm/memory_fill_15.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_20() {
    let module = Parser::new(include_bytes!("wasm/memory_fill_20.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_memory_fill_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_27.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_28() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_28.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_29() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_29.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_30() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_30.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_31() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_31.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_32() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_32.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_33() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_33.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_34() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_34.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_35() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_35.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_36() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_36.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_37() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_37.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_38() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_38.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_39() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_39.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_40() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_40.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_41() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_41.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_42() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_42.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_43() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_43.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_44.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_45() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_45.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_46() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_46.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_47() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_47.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_48() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_48.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_49() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_49.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_50() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_50.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_51() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_51.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_52() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_52.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_53() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_53.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_54() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_54.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_55() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_55.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_56() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_56.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_57() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_57.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_58() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_58.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_59() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_59.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_60() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_60.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_61() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_61.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_62() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_62.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_63() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_63.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_64() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_64.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_65() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_65.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_66() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_66.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_67.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_68() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_68.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_69() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_69.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_70() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_70.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_71.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_72.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_73.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_74.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_75.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_76.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_77.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_78.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_79.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_80.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_81.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_82.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_83.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_84() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_84.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_85.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_86.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_87() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_87.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_88() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_88.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_fill_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_fill_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_91() {
    let module = Parser::new(include_bytes!("wasm/memory_fill_91.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_94() {
    let module = Parser::new(include_bytes!("wasm/memory_fill_94.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_97() {
    let module = Parser::new(include_bytes!("wasm/memory_fill_97.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_size_0() {
    let module = Parser::new(include_bytes!("wasm/memory_size_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_size_8() {
    let module = Parser::new(include_bytes!("wasm/memory_size_8.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_size_16() {
    let module = Parser::new(include_bytes!("wasm/memory_size_16.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_size_28() {
    let module = Parser::new(include_bytes!("wasm/memory_size_28.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_memory_size_40() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_size_40.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_size_41() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_size_41.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn imports_0() {
    let module = Parser::new(include_bytes!("wasm/imports_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_2() {
    let module = Parser::new(include_bytes!("wasm/imports_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_imports_5() {
    let Ok(module) = Parser::new(include_bytes!("wasm/imports_5.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn imports_6() {
    let module = Parser::new(include_bytes!("wasm/imports_6.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_8() {
    let module = Parser::new(include_bytes!("wasm/imports_8.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_10() {
    let module = Parser::new(include_bytes!("wasm/imports_10.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_11() {
    let module = Parser::new(include_bytes!("wasm/imports_11.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_12() {
    let module = Parser::new(include_bytes!("wasm/imports_12.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_13() {
    let module = Parser::new(include_bytes!("wasm/imports_13.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_14() {
    let module = Parser::new(include_bytes!("wasm/imports_14.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_15() {
    let module = Parser::new(include_bytes!("wasm/imports_15.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_16() {
    let module = Parser::new(include_bytes!("wasm/imports_16.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_41() {
    let module = Parser::new(include_bytes!("wasm/imports_41.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_46() {
    let module = Parser::new(include_bytes!("wasm/imports_46.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_47() {
    let module = Parser::new(include_bytes!("wasm/imports_47.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_48() {
    let module = Parser::new(include_bytes!("wasm/imports_48.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_69() {
    let module = Parser::new(include_bytes!("wasm/imports_69.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_75() {
    let module = Parser::new(include_bytes!("wasm/imports_75.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_81() {
    let module = Parser::new(include_bytes!("wasm/imports_81.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_82() {
    let module = Parser::new(include_bytes!("wasm/imports_82.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_83() {
    let module = Parser::new(include_bytes!("wasm/imports_83.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_84() {
    let module = Parser::new(include_bytes!("wasm/imports_84.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_85() {
    let module = Parser::new(include_bytes!("wasm/imports_85.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_86() {
    let module = Parser::new(include_bytes!("wasm/imports_86.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_87() {
    let module = Parser::new(include_bytes!("wasm/imports_87.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_88() {
    let module = Parser::new(include_bytes!("wasm/imports_88.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_89() {
    let module = Parser::new(include_bytes!("wasm/imports_89.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_90() {
    let module = Parser::new(include_bytes!("wasm/imports_90.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_91() {
    let module = Parser::new(include_bytes!("wasm/imports_91.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_92() {
    let module = Parser::new(include_bytes!("wasm/imports_92.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_93() {
    let module = Parser::new(include_bytes!("wasm/imports_93.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_94() {
    let module = Parser::new(include_bytes!("wasm/imports_94.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_95() {
    let module = Parser::new(include_bytes!("wasm/imports_95.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_96() {
    let module = Parser::new(include_bytes!("wasm/imports_96.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_97() {
    let module = Parser::new(include_bytes!("wasm/imports_97.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_98() {
    let module = Parser::new(include_bytes!("wasm/imports_98.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_99() {
    let module = Parser::new(include_bytes!("wasm/imports_99.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_100() {
    let module = Parser::new(include_bytes!("wasm/imports_100.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_101() {
    let module = Parser::new(include_bytes!("wasm/imports_101.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_114() {
    let module = Parser::new(include_bytes!("wasm/imports_114.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_119() {
    let module = Parser::new(include_bytes!("wasm/imports_119.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_imports_124() {
    let Ok(module) = Parser::new(include_bytes!("wasm/imports_124.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_imports_125() {
    let Ok(module) = Parser::new(include_bytes!("wasm/imports_125.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_imports_126() {
    let Ok(module) = Parser::new(include_bytes!("wasm/imports_126.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn imports_127() {
    let module = Parser::new(include_bytes!("wasm/imports_127.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_128() {
    let module = Parser::new(include_bytes!("wasm/imports_128.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_129() {
    let module = Parser::new(include_bytes!("wasm/imports_129.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_130() {
    let module = Parser::new(include_bytes!("wasm/imports_130.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_131() {
    let module = Parser::new(include_bytes!("wasm/imports_131.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_132() {
    let module = Parser::new(include_bytes!("wasm/imports_132.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_133() {
    let module = Parser::new(include_bytes!("wasm/imports_133.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_134() {
    let module = Parser::new(include_bytes!("wasm/imports_134.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_135() {
    let module = Parser::new(include_bytes!("wasm/imports_135.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_150() {
    let module = Parser::new(include_bytes!("wasm/imports_150.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_156() {
    let module = Parser::new(include_bytes!("wasm/imports_156.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_159() {
    let module = Parser::new(include_bytes!("wasm/imports_159.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_162() {
    let module = Parser::new(include_bytes!("wasm/imports_162.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_180() {
    let module = Parser::new(include_bytes!("wasm/imports_180.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn left_to_right_0() {
    let module = Parser::new(include_bytes!("wasm/left-to-right_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn ref_is_null_0() {
    let module = Parser::new(include_bytes!("wasm/ref_is_null_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_ref_is_null_14() {
    let Ok(module) = Parser::new(include_bytes!("wasm/ref_is_null_14.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_ref_is_null_15() {
    let Ok(module) = Parser::new(include_bytes!("wasm/ref_is_null_15.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_trap_0() {
    let module = Parser::new(include_bytes!("wasm/memory_trap_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_trap_14() {
    let module = Parser::new(include_bytes!("wasm/memory_trap_14.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_0() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_1() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_2() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_3() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_3.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_4() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_4.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_5() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_5.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_6() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_6.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_7() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_7.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_8() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_8.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_9() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_9.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_10() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_10.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_11() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_11.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_12() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_12.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_13() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_13.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_14() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_14.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_15() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_15.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_16() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_16.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_17() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_17.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_18() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_18.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_19() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_19.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_20() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_20.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_21() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_21.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_22() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_22.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_23() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_23.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_24() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_24.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_leb128_25() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_25.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_26() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_26.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_27.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_28() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_28.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_29() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_29.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_30() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_30.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_31() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_31.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_32() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_32.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_33() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_33.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_34() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_34.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_35() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_35.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_36() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_36.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_37() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_37.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_38() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_38.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_39() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_39.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_40() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_40.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_41() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_41.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_42() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_42.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_43() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_43.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_44.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_45() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_45.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_46() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_46.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_47() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_47.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_48() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_48.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_49() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_49.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_50() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_50.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_51() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_51.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_52() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_52.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_53() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_53.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_54() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_54.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_55() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_55.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_56() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_56.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_57() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_57.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_58() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_58.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_59() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_59.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_60() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_60.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_61() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_61.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_62() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_62.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_63() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_63.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_64() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_64.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_65() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_65.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_66() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_66.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_67.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_68() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_68.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_69() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_69.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_70() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_70.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_71.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_72.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_73.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_74.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_75.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_76.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_77.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_78.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_79.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_binary_leb128_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_80.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_leb128_81() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_81.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_leb128_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_82.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_leb128_83() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_83.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_84() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_84.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_85() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_85.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_86() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_86.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_87() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_87.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_88() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_88.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_89() {
    let module = Parser::new(include_bytes!("wasm/binary-leb128_89.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_binary_leb128_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/binary-leb128_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_0() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_0.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_1() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_1.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_2() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_2.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_3() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_3.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_4() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_4.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_5() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_5.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_6() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_6.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_7() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_7.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_8() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_8.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_9() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_9.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_10() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_10.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_11() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_11.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_12() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_12.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_13() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_13.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_14() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_14.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_15() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_15.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_16() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_16.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_17() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_17.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_18() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_18.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_19() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_19.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_20() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_20.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_21() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_21.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_22() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_22.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_23() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_23.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_24() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_24.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_25() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_25.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_26() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_26.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_27() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_27.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_28() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_28.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_29() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_29.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_30() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_30.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_31() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_31.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_32() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_32.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_33() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_33.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_34() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_34.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_35() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_35.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_36() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_36.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_37() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_37.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_38() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_38.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_39() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_39.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_40() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_40.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_41() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_41.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_42() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_42.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_43() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_43.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_44() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_44.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_45() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_45.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_46() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_46.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_47() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_47.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_48() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_48.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_49() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_49.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_50() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_50.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_51() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_51.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_52() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_52.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_53() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_53.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_54() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_54.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_55() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_55.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_56() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_56.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_57() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_57.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_58() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_58.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_59() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_59.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_60() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_60.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_61() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_61.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_62() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_62.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_63() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_63.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_64() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_64.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_65() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_65.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_66() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_66.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_67() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_67.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_68() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_68.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_69() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_69.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_70() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_70.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_71() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_71.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_72() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_72.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_73() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_73.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_74() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_74.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_75() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_75.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_76() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_76.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_77() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_77.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_78() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_78.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_79() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_79.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_80() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_80.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_81() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_81.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_82() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_82.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_83() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_83.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_84() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_84.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_85() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_85.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_86() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_86.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_87() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_87.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_88() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_88.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_89() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_89.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_90() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_90.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_91() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_91.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_92() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_92.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_93() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_93.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_94() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_94.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_95() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_95.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_96() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_96.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_97() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_97.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_98() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_98.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_99() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_99.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_100() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_100.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_101() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_101.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_102() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_102.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_103() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_103.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_104() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_104.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_105() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_105.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_106() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_106.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_107() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_107.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_108() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_108.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_109() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_109.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_110() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_110.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_111() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_111.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_112() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_112.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_113() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_113.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_114() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_114.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_115() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_115.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_116() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_116.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_117() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_117.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_118() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_118.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_119() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_119.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_120() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_120.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_121() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_121.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_122() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_122.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_123() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_123.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_124() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_124.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_125() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_125.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_126() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_126.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_127() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_127.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_128() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_128.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_129() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_129.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_130() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_130.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_131() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_131.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_132() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_132.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_133() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_133.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_134() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_134.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_135() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_135.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_136() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_136.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_137() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_137.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_138() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_138.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_139() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_139.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_140() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_140.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_141() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_141.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_142() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_142.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_143() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_143.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_144() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_144.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_145() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_145.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_146() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_146.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_147() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_147.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_148() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_148.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_149() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_149.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_150() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_150.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_151() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_151.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_152() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_152.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_153() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_153.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_154() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_154.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_155() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_155.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_156() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_156.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_157() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_157.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_158() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_158.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_159() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_159.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_160() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_160.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_161() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_161.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_162() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_162.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_163() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_163.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_164() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_164.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_165() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_165.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_166() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_166.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_167() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_167.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_168() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_168.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_169() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_169.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_170() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_170.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_171() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_171.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_172() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_172.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_173() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_173.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_174() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_174.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_custom_section_id_175() {
    let Ok(module) =
        Parser::new(include_bytes!("wasm/utf8-custom-section-id_175.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_0() {
    let module = Parser::new(include_bytes!("wasm/br_table_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_br_table_150() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_150.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_151() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_151.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_152() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_152.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_153() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_153.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_154() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_154.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_155() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_155.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_156() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_156.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_157() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_157.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_158() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_158.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_159() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_159.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_160() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_160.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_161() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_161.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_162() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_162.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_163() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_163.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_164() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_164.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_165() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_165.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_166() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_166.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_167() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_167.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_168() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_168.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_169() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_169.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_170() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_170.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_171() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_171.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_172() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_172.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_table_173() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_table_173.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_0() {
    let module = Parser::new(include_bytes!("wasm/select_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_select_119() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_119.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_120() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_120.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_121() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_121.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_122() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_122.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_123() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_123.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_124() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_124.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_125() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_125.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_126() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_126.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_127() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_127.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_128() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_128.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_129() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_129.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_130() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_130.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_131() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_131.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_132() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_132.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_133() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_133.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_134() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_134.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_135() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_135.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_136() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_136.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_137() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_137.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_138() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_138.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_139() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_139.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_140() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_140.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_141() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_141.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_142() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_142.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_143() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_143.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_144() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_144.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_145() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_145.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_select_146() {
    let Ok(module) = Parser::new(include_bytes!("wasm/select_146.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_147() {
    let module = Parser::new(include_bytes!("wasm/select_147.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_utf8_import_field_0() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_0.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_1() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_1.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_2() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_2.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_3() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_3.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_4() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_4.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_5() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_5.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_6() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_6.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_7() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_7.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_8() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_8.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_9() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_9.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_10() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_10.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_11() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_11.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_12() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_12.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_13() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_13.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_14() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_14.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_15() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_15.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_16() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_16.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_17() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_17.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_18() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_18.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_19() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_19.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_20() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_20.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_21() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_21.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_22() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_22.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_23() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_23.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_24() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_24.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_25() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_25.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_26() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_26.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_27() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_27.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_28() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_28.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_29() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_29.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_30() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_30.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_31() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_31.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_32() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_32.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_33() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_33.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_34() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_34.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_35() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_35.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_36() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_36.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_37() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_37.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_38() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_38.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_39() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_39.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_40() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_40.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_41() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_41.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_42() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_42.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_43() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_43.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_44.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_45() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_45.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_46() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_46.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_47() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_47.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_48() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_48.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_49() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_49.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_50() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_50.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_51() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_51.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_52() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_52.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_53() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_53.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_54() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_54.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_55() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_55.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_56() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_56.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_57() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_57.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_58() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_58.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_59() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_59.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_60() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_60.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_61() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_61.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_62() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_62.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_63() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_63.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_64() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_64.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_65() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_65.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_66() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_66.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_67.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_68() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_68.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_69() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_69.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_70() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_70.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_71.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_72.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_73.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_74.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_75.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_76.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_77.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_78.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_79.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_80.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_81.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_82.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_83.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_84() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_84.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_85.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_86.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_87() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_87.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_88() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_88.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_89.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_90.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_91.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_92.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_93.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_94.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_95.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_96() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_96.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_97() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_97.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_98() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_98.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_99() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_99.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_100() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_100.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_101() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_101.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_102() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_102.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_103() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_103.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_104() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_104.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_105() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_105.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_106() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_106.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_107() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_107.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_108() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_108.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_109() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_109.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_110() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_110.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_111() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_111.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_112() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_112.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_113() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_113.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_114() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_114.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_115() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_115.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_116() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_116.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_117() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_117.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_118() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_118.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_119() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_119.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_120() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_120.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_121() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_121.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_122() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_122.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_123() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_123.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_124() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_124.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_125() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_125.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_126() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_126.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_127() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_127.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_128() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_128.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_129() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_129.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_130() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_130.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_131() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_131.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_132() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_132.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_133() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_133.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_134() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_134.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_135() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_135.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_136() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_136.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_137() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_137.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_138() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_138.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_139() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_139.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_140() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_140.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_141() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_141.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_142() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_142.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_143() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_143.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_144() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_144.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_145() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_145.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_146() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_146.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_147() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_147.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_148() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_148.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_149() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_149.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_150() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_150.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_151() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_151.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_152() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_152.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_153() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_153.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_154() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_154.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_155() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_155.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_156() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_156.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_157() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_157.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_158() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_158.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_159() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_159.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_160() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_160.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_161() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_161.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_162() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_162.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_163() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_163.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_164() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_164.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_165() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_165.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_166() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_166.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_167() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_167.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_168() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_168.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_169() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_169.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_170() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_170.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_171() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_171.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_172() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_172.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_173() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_173.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_174() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_174.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_utf8_import_field_175() {
    let Ok(module) = Parser::new(include_bytes!("wasm/utf8-import-field_175.wasm")).read_module()
    else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_bitwise_0() {
    let module = Parser::new(include_bytes!("wasm/f32_bitwise_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_f32_bitwise_361() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_bitwise_361.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_bitwise_362() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_bitwise_362.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_bitwise_363() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_bitwise_363.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_0() {
    let module = Parser::new(include_bytes!("wasm/memory_init_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_32() {
    let module = Parser::new(include_bytes!("wasm/memory_init_32.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_64() {
    let module = Parser::new(include_bytes!("wasm/memory_init_64.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_96() {
    let module = Parser::new(include_bytes!("wasm/memory_init_96.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_memory_init_128() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_128.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_129() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_129.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_130() {
    let module = Parser::new(include_bytes!("wasm/memory_init_130.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_132() {
    let module = Parser::new(include_bytes!("wasm/memory_init_132.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_134() {
    let module = Parser::new(include_bytes!("wasm/memory_init_134.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_memory_init_136() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_136.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_137() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_137.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_138() {
    let module = Parser::new(include_bytes!("wasm/memory_init_138.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_140() {
    let module = Parser::new(include_bytes!("wasm/memory_init_140.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_142() {
    let module = Parser::new(include_bytes!("wasm/memory_init_142.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_144() {
    let module = Parser::new(include_bytes!("wasm/memory_init_144.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_146() {
    let module = Parser::new(include_bytes!("wasm/memory_init_146.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_148() {
    let module = Parser::new(include_bytes!("wasm/memory_init_148.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_150() {
    let module = Parser::new(include_bytes!("wasm/memory_init_150.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_152() {
    let module = Parser::new(include_bytes!("wasm/memory_init_152.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_154() {
    let module = Parser::new(include_bytes!("wasm/memory_init_154.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_156() {
    let module = Parser::new(include_bytes!("wasm/memory_init_156.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_memory_init_158() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_158.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_159() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_159.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_160() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_160.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_161() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_161.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_162() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_162.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_163() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_163.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_164() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_164.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_165() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_165.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_166() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_166.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_167() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_167.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_168() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_168.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_169() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_169.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_170() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_170.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_171() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_171.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_172() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_172.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_173() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_173.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_174() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_174.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_175() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_175.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_176() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_176.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_177() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_177.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_178() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_178.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_179() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_179.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_180() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_180.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_181() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_181.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_182() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_182.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_183() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_183.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_184() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_184.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_185() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_185.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_186() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_186.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_187() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_187.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_188() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_188.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_189() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_189.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_190() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_190.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_191() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_191.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_192() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_192.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_193() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_193.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_194() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_194.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_195() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_195.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_196() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_196.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_197() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_197.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_198() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_198.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_199() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_199.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_200() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_200.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_201() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_201.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_202() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_202.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_203() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_203.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_204() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_204.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_205() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_205.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_206() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_206.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_207() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_207.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_208() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_208.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_209() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_209.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_210() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_210.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_211() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_211.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_212() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_212.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_213() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_213.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_214() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_214.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_215() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_215.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_216() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_216.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_217() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_217.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_218() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_218.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_219() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_219.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_memory_init_220() {
    let Ok(module) = Parser::new(include_bytes!("wasm/memory_init_220.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_221() {
    let module = Parser::new(include_bytes!("wasm/memory_init_221.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_224() {
    let module = Parser::new(include_bytes!("wasm/memory_init_224.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_227() {
    let module = Parser::new(include_bytes!("wasm/memory_init_227.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_230() {
    let module = Parser::new(include_bytes!("wasm/memory_init_230.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_233() {
    let module = Parser::new(include_bytes!("wasm/memory_init_233.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_236() {
    let module = Parser::new(include_bytes!("wasm/memory_init_236.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_239() {
    let module = Parser::new(include_bytes!("wasm/memory_init_239.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_0() {
    let module = Parser::new(include_bytes!("wasm/elem_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_1() {
    let module = Parser::new(include_bytes!("wasm/elem_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_2() {
    let module = Parser::new(include_bytes!("wasm/elem_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_3() {
    let module = Parser::new(include_bytes!("wasm/elem_3.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_4() {
    let module = Parser::new(include_bytes!("wasm/elem_4.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_5() {
    let module = Parser::new(include_bytes!("wasm/elem_5.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_6() {
    let module = Parser::new(include_bytes!("wasm/elem_6.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_7() {
    let module = Parser::new(include_bytes!("wasm/elem_7.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_8() {
    let module = Parser::new(include_bytes!("wasm/elem_8.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_11() {
    let module = Parser::new(include_bytes!("wasm/elem_11.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_elem_14() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_14.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_15() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_15.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_16() {
    let module = Parser::new(include_bytes!("wasm/elem_16.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_17() {
    let module = Parser::new(include_bytes!("wasm/elem_17.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_18() {
    let module = Parser::new(include_bytes!("wasm/elem_18.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_19() {
    let module = Parser::new(include_bytes!("wasm/elem_19.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_20() {
    let module = Parser::new(include_bytes!("wasm/elem_20.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_21() {
    let module = Parser::new(include_bytes!("wasm/elem_21.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_22() {
    let module = Parser::new(include_bytes!("wasm/elem_22.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_23() {
    let module = Parser::new(include_bytes!("wasm/elem_23.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_24() {
    let module = Parser::new(include_bytes!("wasm/elem_24.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_25() {
    let module = Parser::new(include_bytes!("wasm/elem_25.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_38() {
    let module = Parser::new(include_bytes!("wasm/elem_38.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_40() {
    let module = Parser::new(include_bytes!("wasm/elem_40.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_elem_42() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_42.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_43() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_43.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_44.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_45() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_45.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_46() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_46.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_47() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_47.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_48() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_48.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_49() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_49.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_50() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_50.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_51() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_51.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_52() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_52.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_53() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_53.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_54() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_54.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_55() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_55.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_56() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_56.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_57() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_57.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_58() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_58.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_59() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_59.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_60() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_60.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_61() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_61.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_62() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_62.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_63() {
    let module = Parser::new(include_bytes!("wasm/elem_63.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_65() {
    let module = Parser::new(include_bytes!("wasm/elem_65.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_67() {
    let module = Parser::new(include_bytes!("wasm/elem_67.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_72() {
    let module = Parser::new(include_bytes!("wasm/elem_72.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_76() {
    let module = Parser::new(include_bytes!("wasm/elem_76.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_elem_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_80.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_81.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_82.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_elem_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/elem_83.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_84() {
    let module = Parser::new(include_bytes!("wasm/elem_84.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_92() {
    let module = Parser::new(include_bytes!("wasm/elem_92.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_95() {
    let module = Parser::new(include_bytes!("wasm/elem_95.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_97() {
    let module = Parser::new(include_bytes!("wasm/elem_97.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_get_0() {
    let module = Parser::new(include_bytes!("wasm/table_get_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_table_get_11() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_get_11.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_get_12() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_get_12.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_get_13() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_get_13.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_get_14() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_get_14.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_get_15() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_get_15.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_0() {
    let module = Parser::new(include_bytes!("wasm/f32_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_f32_2501() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_2501.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_2502() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_2502.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_2503() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_2503.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_2504() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_2504.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_2505() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_2505.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_2506() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_2506.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_2507() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_2507.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_2508() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_2508.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_2509() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_2509.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_2510() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_2510.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_2511() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_2511.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_start_0() {
    let Ok(module) = Parser::new(include_bytes!("wasm/start_0.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_start_1() {
    let Ok(module) = Parser::new(include_bytes!("wasm/start_1.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_start_2() {
    let Ok(module) = Parser::new(include_bytes!("wasm/start_2.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn start_3() {
    let module = Parser::new(include_bytes!("wasm/start_3.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn start_9() {
    let module = Parser::new(include_bytes!("wasm/start_9.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn start_15() {
    let module = Parser::new(include_bytes!("wasm/start_15.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn start_16() {
    let module = Parser::new(include_bytes!("wasm/start_16.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn start_17() {
    let module = Parser::new(include_bytes!("wasm/start_17.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_0() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_6() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_6.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_17() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_17.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_22() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_22.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_27() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_27.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_30() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_30.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_39() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_39.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_42() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_42.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_51() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_51.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_54() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_54.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_57() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_57.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_60() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_60.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_63() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_63.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_66() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_66.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_69() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_69.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_74() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_74.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_83() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_83.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_94() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_94.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_105() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_105.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_116() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_116.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_127() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_127.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_138() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_138.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_149() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_149.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_160() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_160.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_177() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_177.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_194() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_194.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_205() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_205.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_211() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_211.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_222() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_222.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_228() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_228.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_241() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_241.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_252() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_252.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_263() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_263.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_274() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_274.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_285() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_285.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_288() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_288.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_294() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_294.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_308() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_308.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_319() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_319.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_325() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_325.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_358() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_358.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_372() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_372.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_386() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_386.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_419() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_419.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_452() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_452.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_485() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_485.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_518() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_518.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_551() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_551.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_554() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_554.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_556() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_556.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_558() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_558.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_560() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_560.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_562() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_562.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_564() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_564.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_568() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_568.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_570() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_570.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_573() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_573.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_592() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_592.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_603() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_603.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_614() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_614.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_620() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_620.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_626() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_626.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_629() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_629.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_632() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_632.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_641() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_641.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_650() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_650.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_659() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_659.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_668() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_668.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_679() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_679.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_690() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_690.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_701() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_701.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_712() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_712.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_723() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_723.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_734() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_734.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_745() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_745.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_756() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_756.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_759() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_759.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_773() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_773.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_776() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_776.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_779() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_779.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_794() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_794.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_797() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_797.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_800() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_800.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_805() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_805.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_814() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_814.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_817() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_817.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_820() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_820.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_829() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_829.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_863() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_863.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_866() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_866.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_873() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_873.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_876() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_876.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_879() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_879.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_892() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_892.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_894() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_894.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_897() {
    let module = Parser::new(include_bytes!("wasm/float_exprs_897.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_memory_0() {
    let module = Parser::new(include_bytes!("wasm/float_memory_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_memory_15() {
    let module = Parser::new(include_bytes!("wasm/float_memory_15.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_memory_30() {
    let module = Parser::new(include_bytes!("wasm/float_memory_30.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_memory_45() {
    let module = Parser::new(include_bytes!("wasm/float_memory_45.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_memory_60() {
    let module = Parser::new(include_bytes!("wasm/float_memory_60.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_memory_75() {
    let module = Parser::new(include_bytes!("wasm/float_memory_75.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_size_0() {
    let module = Parser::new(include_bytes!("wasm/table_size_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_table_size_37() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_size_37.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_size_38() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_size_38.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_set_0() {
    let module = Parser::new(include_bytes!("wasm/table_set_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_table_set_19() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_set_19.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_set_20() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_set_20.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_set_21() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_set_21.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_set_22() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_set_22.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_set_23() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_set_23.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_set_24() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_set_24.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_set_25() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_set_25.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_cmp_0() {
    let module = Parser::new(include_bytes!("wasm/f32_cmp_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_f32_cmp_2401() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_cmp_2401.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_cmp_2402() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_cmp_2402.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_cmp_2403() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_cmp_2403.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_cmp_2404() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_cmp_2404.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_cmp_2405() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_cmp_2405.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f32_cmp_2406() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f32_cmp_2406.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_0() {
    let module = Parser::new(include_bytes!("wasm/br_if_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_br_if_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_91.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_93.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_94.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_95.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_96() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_96.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_97() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_97.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_98() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_98.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_99() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_99.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_100() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_100.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_101() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_101.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_102() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_102.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_103() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_103.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_104() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_104.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_105() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_105.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_106() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_106.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_107() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_107.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_108() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_108.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_109() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_109.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_110() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_110.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_111() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_111.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_112() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_112.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_113() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_113.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_114() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_114.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_115() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_115.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_116() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_116.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_if_117() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_if_117.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn ref_func_0() {
    let module = Parser::new(include_bytes!("wasm/ref_func_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn ref_func_2() {
    let module = Parser::new(include_bytes!("wasm/ref_func_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_ref_func_13() {
    let Ok(module) = Parser::new(include_bytes!("wasm/ref_func_13.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn ref_func_14() {
    let module = Parser::new(include_bytes!("wasm/ref_func_14.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_ref_func_15() {
    let Ok(module) = Parser::new(include_bytes!("wasm/ref_func_15.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_ref_func_16() {
    let Ok(module) = Parser::new(include_bytes!("wasm/ref_func_16.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_valid_0() {
    let module = Parser::new(include_bytes!("wasm/unreached-valid_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn unreached_valid_5() {
    let module = Parser::new(include_bytes!("wasm/unreached-valid_5.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_fill_0() {
    let module = Parser::new(include_bytes!("wasm/table_fill_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_table_fill_36() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_fill_36.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_fill_37() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_fill_37.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_fill_38() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_fill_38.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_fill_39() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_fill_39.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_fill_40() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_fill_40.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_fill_41() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_fill_41.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_fill_42() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_fill_42.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_fill_43() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_fill_43.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_fill_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_fill_44.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_0() {
    let module = Parser::new(include_bytes!("wasm/data_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_1() {
    let module = Parser::new(include_bytes!("wasm/data_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_2() {
    let module = Parser::new(include_bytes!("wasm/data_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_3() {
    let module = Parser::new(include_bytes!("wasm/data_3.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_4() {
    let module = Parser::new(include_bytes!("wasm/data_4.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_5() {
    let module = Parser::new(include_bytes!("wasm/data_5.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_6() {
    let module = Parser::new(include_bytes!("wasm/data_6.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_7() {
    let module = Parser::new(include_bytes!("wasm/data_7.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_8() {
    let module = Parser::new(include_bytes!("wasm/data_8.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_data_9() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_9.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_10() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_10.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_11() {
    let module = Parser::new(include_bytes!("wasm/data_11.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_12() {
    let module = Parser::new(include_bytes!("wasm/data_12.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_13() {
    let module = Parser::new(include_bytes!("wasm/data_13.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_14() {
    let module = Parser::new(include_bytes!("wasm/data_14.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_15() {
    let module = Parser::new(include_bytes!("wasm/data_15.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_16() {
    let module = Parser::new(include_bytes!("wasm/data_16.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_17() {
    let module = Parser::new(include_bytes!("wasm/data_17.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_18() {
    let module = Parser::new(include_bytes!("wasm/data_18.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_19() {
    let module = Parser::new(include_bytes!("wasm/data_19.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_20() {
    let module = Parser::new(include_bytes!("wasm/data_20.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_21() {
    let module = Parser::new(include_bytes!("wasm/data_21.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_22() {
    let module = Parser::new(include_bytes!("wasm/data_22.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_23() {
    let module = Parser::new(include_bytes!("wasm/data_23.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_24() {
    let module = Parser::new(include_bytes!("wasm/data_24.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_25() {
    let module = Parser::new(include_bytes!("wasm/data_25.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_26() {
    let module = Parser::new(include_bytes!("wasm/data_26.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_data_41() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_41.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_42() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_42.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_43() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_43.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_44.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_45() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_45.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_46() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_46.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_47() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_47.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_48() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_48.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_49() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_49.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_50() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_50.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_51() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_51.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_52() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_52.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_53() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_53.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_54() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_54.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_55() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_55.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_56() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_56.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_57() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_57.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_58() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_58.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_59() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_59.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_data_60() {
    let Ok(module) = Parser::new(include_bytes!("wasm/data_60.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn int_literals_0() {
    let module = Parser::new(include_bytes!("wasm/int_literals_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn address_0() {
    let module = Parser::new(include_bytes!("wasm/address_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_address_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/address_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn address_93() {
    let module = Parser::new(include_bytes!("wasm/address_93.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn address_220() {
    let module = Parser::new(include_bytes!("wasm/address_220.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn address_240() {
    let module = Parser::new(include_bytes!("wasm/address_240.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_grow_0() {
    let module = Parser::new(include_bytes!("wasm/table_grow_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_grow_22() {
    let module = Parser::new(include_bytes!("wasm/table_grow_22.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_grow_24() {
    let module = Parser::new(include_bytes!("wasm/table_grow_24.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_grow_30() {
    let module = Parser::new(include_bytes!("wasm/table_grow_30.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_grow_39() {
    let module = Parser::new(include_bytes!("wasm/table_grow_39.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_table_grow_43() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_grow_43.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_grow_44() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_grow_44.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_grow_45() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_grow_45.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_grow_46() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_grow_46.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_grow_47() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_grow_47.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_grow_48() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_grow_48.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_grow_49() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_grow_49.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_ptrs_0() {
    let module = Parser::new(include_bytes!("wasm/func_ptrs_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_func_ptrs_5() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_ptrs_5.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_ptrs_6() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_ptrs_6.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_ptrs_7() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_ptrs_7.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_ptrs_8() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_ptrs_8.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_ptrs_9() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_ptrs_9.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_ptrs_10() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_ptrs_10.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_func_ptrs_11() {
    let Ok(module) = Parser::new(include_bytes!("wasm/func_ptrs_11.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_ptrs_12() {
    let module = Parser::new(include_bytes!("wasm/func_ptrs_12.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn func_ptrs_33() {
    let module = Parser::new(include_bytes!("wasm/func_ptrs_33.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_0() {
    let module = Parser::new(include_bytes!("wasm/table_init_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_2() {
    let module = Parser::new(include_bytes!("wasm/table_init_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_34() {
    let module = Parser::new(include_bytes!("wasm/table_init_34.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_66() {
    let module = Parser::new(include_bytes!("wasm/table_init_66.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_98() {
    let module = Parser::new(include_bytes!("wasm/table_init_98.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_130() {
    let module = Parser::new(include_bytes!("wasm/table_init_130.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_162() {
    let module = Parser::new(include_bytes!("wasm/table_init_162.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_table_init_194() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_194.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_195() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_195.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_196() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_196.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_197() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_197.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_198() {
    let module = Parser::new(include_bytes!("wasm/table_init_198.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_200() {
    let module = Parser::new(include_bytes!("wasm/table_init_200.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_202() {
    let module = Parser::new(include_bytes!("wasm/table_init_202.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_204() {
    let module = Parser::new(include_bytes!("wasm/table_init_204.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_206() {
    let module = Parser::new(include_bytes!("wasm/table_init_206.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_208() {
    let module = Parser::new(include_bytes!("wasm/table_init_208.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_210() {
    let module = Parser::new(include_bytes!("wasm/table_init_210.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_212() {
    let module = Parser::new(include_bytes!("wasm/table_init_212.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_214() {
    let module = Parser::new(include_bytes!("wasm/table_init_214.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_216() {
    let module = Parser::new(include_bytes!("wasm/table_init_216.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_218() {
    let module = Parser::new(include_bytes!("wasm/table_init_218.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_220() {
    let module = Parser::new(include_bytes!("wasm/table_init_220.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_222() {
    let module = Parser::new(include_bytes!("wasm/table_init_222.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_224() {
    let module = Parser::new(include_bytes!("wasm/table_init_224.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_226() {
    let module = Parser::new(include_bytes!("wasm/table_init_226.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_228() {
    let module = Parser::new(include_bytes!("wasm/table_init_228.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_230() {
    let module = Parser::new(include_bytes!("wasm/table_init_230.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_232() {
    let module = Parser::new(include_bytes!("wasm/table_init_232.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_234() {
    let module = Parser::new(include_bytes!("wasm/table_init_234.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_236() {
    let module = Parser::new(include_bytes!("wasm/table_init_236.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_238() {
    let module = Parser::new(include_bytes!("wasm/table_init_238.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_table_init_240() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_240.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_241() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_241.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_242() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_242.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_243() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_243.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_244() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_244.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_245() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_245.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_246() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_246.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_247() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_247.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_248() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_248.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_249() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_249.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_250() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_250.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_251() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_251.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_252() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_252.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_253() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_253.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_254() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_254.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_255() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_255.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_256() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_256.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_257() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_257.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_258() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_258.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_259() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_259.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_260() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_260.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_261() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_261.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_262() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_262.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_263() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_263.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_264() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_264.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_265() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_265.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_266() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_266.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_267() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_267.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_268() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_268.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_269() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_269.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_270() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_270.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_271() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_271.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_272() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_272.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_273() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_273.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_274() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_274.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_275() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_275.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_276() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_276.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_277() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_277.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_278() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_278.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_279() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_279.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_280() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_280.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_281() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_281.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_282() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_282.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_283() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_283.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_284() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_284.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_285() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_285.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_286() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_286.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_287() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_287.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_288() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_288.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_289() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_289.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_290() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_290.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_291() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_291.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_292() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_292.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_293() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_293.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_294() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_294.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_295() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_295.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_296() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_296.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_297() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_297.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_298() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_298.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_299() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_299.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_300() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_300.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_301() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_301.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_init_302() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_init_302.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_303() {
    let module = Parser::new(include_bytes!("wasm/table_init_303.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_337() {
    let module = Parser::new(include_bytes!("wasm/table_init_337.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_371() {
    let module = Parser::new(include_bytes!("wasm/table_init_371.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_533() {
    let module = Parser::new(include_bytes!("wasm/table_init_533.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_695() {
    let module = Parser::new(include_bytes!("wasm/table_init_695.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_761() {
    let module = Parser::new(include_bytes!("wasm/table_init_761.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_779() {
    let module = Parser::new(include_bytes!("wasm/table_init_779.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn global_0() {
    let module = Parser::new(include_bytes!("wasm/global_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_global_59() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_59.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_60() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_60.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_61() {
    let module = Parser::new(include_bytes!("wasm/global_61.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn global_62() {
    let module = Parser::new(include_bytes!("wasm/global_62.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_global_63() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_63.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_64() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_64.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_65() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_65.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_66() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_66.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_67() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_67.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_68() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_68.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_69() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_69.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_70() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_70.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_71() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_71.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_72() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_72.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_73() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_73.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_74() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_74.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_75() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_75.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_76() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_76.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_77.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_78.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_79.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_80.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_81() {
    let module = Parser::new(include_bytes!("wasm/global_81.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_global_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_82.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_83.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_84() {
    let module = Parser::new(include_bytes!("wasm/global_84.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_global_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_85.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_86.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_87() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_87.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_88() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_88.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_91.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_93.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_94.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_95.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_96() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_96.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_97() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_97.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_98() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_98.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_99() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_99.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_100() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_100.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_101() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_101.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_102() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_102.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_103() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_103.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_104() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_104.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_105() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_105.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_global_106() {
    let Ok(module) = Parser::new(include_bytes!("wasm/global_106.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn custom_0() {
    let module = Parser::new(include_bytes!("wasm/custom_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn custom_1() {
    let module = Parser::new(include_bytes!("wasm/custom_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn custom_2() {
    let module = Parser::new(include_bytes!("wasm/custom_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_custom_3() {
    let Ok(module) = Parser::new(include_bytes!("wasm/custom_3.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_custom_4() {
    let Ok(module) = Parser::new(include_bytes!("wasm/custom_4.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_custom_5() {
    let Ok(module) = Parser::new(include_bytes!("wasm/custom_5.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_custom_6() {
    let Ok(module) = Parser::new(include_bytes!("wasm/custom_6.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_custom_7() {
    let Ok(module) = Parser::new(include_bytes!("wasm/custom_7.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_custom_8() {
    let Ok(module) = Parser::new(include_bytes!("wasm/custom_8.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_custom_9() {
    let Ok(module) = Parser::new(include_bytes!("wasm/custom_9.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_custom_10() {
    let Ok(module) = Parser::new(include_bytes!("wasm/custom_10.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn int_exprs_0() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_5() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_5.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_8() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_8.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_10() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_10.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_15() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_15.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_20() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_20.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_25() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_25.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_30() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_30.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_35() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_35.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_40() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_40.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_43() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_43.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_46() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_46.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_51() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_51.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_60() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_60.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_69() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_69.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_78() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_78.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_87() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_87.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_96() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_96.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_105() {
    let module = Parser::new(include_bytes!("wasm/int_exprs_105.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn f64_0() {
    let module = Parser::new(include_bytes!("wasm/f64_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_f64_2501() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_2501.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_2502() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_2502.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_2503() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_2503.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_2504() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_2504.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_2505() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_2505.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_2506() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_2506.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_2507() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_2507.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_2508() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_2508.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_2509() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_2509.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_2510() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_2510.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_f64_2511() {
    let Ok(module) = Parser::new(include_bytes!("wasm/f64_2511.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_0() {
    let module = Parser::new(include_bytes!("wasm/br_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_br_77() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_77.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_78() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_78.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_79() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_79.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_80() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_80.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_81() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_81.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_82() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_82.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_83() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_83.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_84() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_84.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_85.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_86.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_87() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_87.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_88() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_88.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_89() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_89.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_90() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_90.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_91() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_91.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_92() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_92.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_93() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_93.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_94() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_94.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_95() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_95.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_br_96() {
    let Ok(module) = Parser::new(include_bytes!("wasm/br_96.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn nop_0() {
    let module = Parser::new(include_bytes!("wasm/nop_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_nop_84() {
    let Ok(module) = Parser::new(include_bytes!("wasm/nop_84.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_nop_85() {
    let Ok(module) = Parser::new(include_bytes!("wasm/nop_85.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_nop_86() {
    let Ok(module) = Parser::new(include_bytes!("wasm/nop_86.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_nop_87() {
    let Ok(module) = Parser::new(include_bytes!("wasm/nop_87.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_0() {
    let module = Parser::new(include_bytes!("wasm/table_0.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_1() {
    let module = Parser::new(include_bytes!("wasm/table_1.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_2() {
    let module = Parser::new(include_bytes!("wasm/table_2.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_3() {
    let module = Parser::new(include_bytes!("wasm/table_3.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_4() {
    let module = Parser::new(include_bytes!("wasm/table_4.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_5() {
    let module = Parser::new(include_bytes!("wasm/table_5.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_6() {
    let module = Parser::new(include_bytes!("wasm/table_6.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_7() {
    let module = Parser::new(include_bytes!("wasm/table_7.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_8() {
    let module = Parser::new(include_bytes!("wasm/table_8.wasm"))
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn invalid_table_9() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_9.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_10() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_10.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_11() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_11.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn invalid_table_12() {
    let Ok(module) = Parser::new(include_bytes!("wasm/table_12.wasm")).read_module() else {
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}
