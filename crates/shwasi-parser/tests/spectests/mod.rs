// This file was generated by xtask specgen

use shwasi_parser::Parser;

#[test]
fn forward_0() {
    let wasm = include_bytes!("wasm/forward_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_misc_0() {
    let wasm = include_bytes!("wasm/float_misc_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_0() {
    let wasm = include_bytes!("wasm/table_copy_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_2() {
    let wasm = include_bytes!("wasm/table_copy_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_64() {
    let wasm = include_bytes!("wasm/table_copy_64.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_126() {
    let wasm = include_bytes!("wasm/table_copy_126.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_188() {
    let wasm = include_bytes!("wasm/table_copy_188.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_250() {
    let wasm = include_bytes!("wasm/table_copy_250.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_312() {
    let wasm = include_bytes!("wasm/table_copy_312.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_374() {
    let wasm = include_bytes!("wasm/table_copy_374.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_436() {
    let wasm = include_bytes!("wasm/table_copy_436.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_498() {
    let wasm = include_bytes!("wasm/table_copy_498.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_560() {
    let wasm = include_bytes!("wasm/table_copy_560.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_622() {
    let wasm = include_bytes!("wasm/table_copy_622.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_684() {
    let wasm = include_bytes!("wasm/table_copy_684.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_746() {
    let wasm = include_bytes!("wasm/table_copy_746.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_808() {
    let wasm = include_bytes!("wasm/table_copy_808.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_870() {
    let wasm = include_bytes!("wasm/table_copy_870.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_932() {
    let wasm = include_bytes!("wasm/table_copy_932.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_994() {
    let wasm = include_bytes!("wasm/table_copy_994.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1056() {
    let wasm = include_bytes!("wasm/table_copy_1056.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1118() {
    let wasm = include_bytes!("wasm/table_copy_1118.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1120() {
    let wasm = include_bytes!("wasm/table_copy_1120.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1122() {
    let wasm = include_bytes!("wasm/table_copy_1122.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1124() {
    let wasm = include_bytes!("wasm/table_copy_1124.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1126() {
    let wasm = include_bytes!("wasm/table_copy_1126.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1128() {
    let wasm = include_bytes!("wasm/table_copy_1128.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1130() {
    let wasm = include_bytes!("wasm/table_copy_1130.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1132() {
    let wasm = include_bytes!("wasm/table_copy_1132.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1134() {
    let wasm = include_bytes!("wasm/table_copy_1134.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1136() {
    let wasm = include_bytes!("wasm/table_copy_1136.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1138() {
    let wasm = include_bytes!("wasm/table_copy_1138.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1140() {
    let wasm = include_bytes!("wasm/table_copy_1140.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1142() {
    let wasm = include_bytes!("wasm/table_copy_1142.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1144() {
    let wasm = include_bytes!("wasm/table_copy_1144.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1146() {
    let wasm = include_bytes!("wasm/table_copy_1146.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1148() {
    let wasm = include_bytes!("wasm/table_copy_1148.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1150() {
    let wasm = include_bytes!("wasm/table_copy_1150.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1152() {
    let wasm = include_bytes!("wasm/table_copy_1152.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1154() {
    let wasm = include_bytes!("wasm/table_copy_1154.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1156() {
    let wasm = include_bytes!("wasm/table_copy_1156.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1158() {
    let wasm = include_bytes!("wasm/table_copy_1158.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1160() {
    let wasm = include_bytes!("wasm/table_copy_1160.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1162() {
    let wasm = include_bytes!("wasm/table_copy_1162.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1196() {
    let wasm = include_bytes!("wasm/table_copy_1196.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1230() {
    let wasm = include_bytes!("wasm/table_copy_1230.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1264() {
    let wasm = include_bytes!("wasm/table_copy_1264.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1298() {
    let wasm = include_bytes!("wasm/table_copy_1298.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1332() {
    let wasm = include_bytes!("wasm/table_copy_1332.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1366() {
    let wasm = include_bytes!("wasm/table_copy_1366.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1400() {
    let wasm = include_bytes!("wasm/table_copy_1400.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1434() {
    let wasm = include_bytes!("wasm/table_copy_1434.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1468() {
    let wasm = include_bytes!("wasm/table_copy_1468.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_copy_1598() {
    let wasm = include_bytes!("wasm/table_copy_1598.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn ref_null_0() {
    let wasm = include_bytes!("wasm/ref_null_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_0() {
    let wasm = include_bytes!("wasm/memory_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_1() {
    let wasm = include_bytes!("wasm/memory_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_2() {
    let wasm = include_bytes!("wasm/memory_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_3() {
    let wasm = include_bytes!("wasm/memory_3.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_4() {
    let wasm = include_bytes!("wasm/memory_4.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_5() {
    let wasm = include_bytes!("wasm/memory_5.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_8() {
    let wasm = include_bytes!("wasm/memory_8.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_10() {
    let wasm = include_bytes!("wasm/memory_10.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_12() {
    let wasm = include_bytes!("wasm/memory_12.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_33() {
    let wasm = include_bytes!("wasm/memory_33.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn unwind_0() {
    let wasm = include_bytes!("wasm/unwind_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn call_0() {
    let wasm = include_bytes!("wasm/call_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn local_get_0() {
    let wasm = include_bytes!("wasm/local_get_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn fac_0() {
    let wasm = include_bytes!("wasm/fac_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn func_0() {
    let wasm = include_bytes!("wasm/func_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn func_90() {
    let wasm = include_bytes!("wasm/func_90.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn func_93() {
    let wasm = include_bytes!("wasm/func_93.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn func_97() {
    let wasm = include_bytes!("wasm/func_97.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_0() {
    let wasm = include_bytes!("wasm/exports_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_1() {
    let wasm = include_bytes!("wasm/exports_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_2() {
    let wasm = include_bytes!("wasm/exports_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_3() {
    let wasm = include_bytes!("wasm/exports_3.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_4() {
    let wasm = include_bytes!("wasm/exports_4.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_5() {
    let wasm = include_bytes!("wasm/exports_5.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_6() {
    let wasm = include_bytes!("wasm/exports_6.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_7() {
    let wasm = include_bytes!("wasm/exports_7.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_8() {
    let wasm = include_bytes!("wasm/exports_8.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_9() {
    let wasm = include_bytes!("wasm/exports_9.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_10() {
    let wasm = include_bytes!("wasm/exports_10.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_11() {
    let wasm = include_bytes!("wasm/exports_11.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_14() {
    let wasm = include_bytes!("wasm/exports_14.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_15() {
    let wasm = include_bytes!("wasm/exports_15.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_17() {
    let wasm = include_bytes!("wasm/exports_17.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_29() {
    let wasm = include_bytes!("wasm/exports_29.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_30() {
    let wasm = include_bytes!("wasm/exports_30.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_31() {
    let wasm = include_bytes!("wasm/exports_31.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_32() {
    let wasm = include_bytes!("wasm/exports_32.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_33() {
    let wasm = include_bytes!("wasm/exports_33.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_34() {
    let wasm = include_bytes!("wasm/exports_34.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_35() {
    let wasm = include_bytes!("wasm/exports_35.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_36() {
    let wasm = include_bytes!("wasm/exports_36.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_37() {
    let wasm = include_bytes!("wasm/exports_37.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_38() {
    let wasm = include_bytes!("wasm/exports_38.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_41() {
    let wasm = include_bytes!("wasm/exports_41.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_42() {
    let wasm = include_bytes!("wasm/exports_42.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_52() {
    let wasm = include_bytes!("wasm/exports_52.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_53() {
    let wasm = include_bytes!("wasm/exports_53.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_54() {
    let wasm = include_bytes!("wasm/exports_54.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_55() {
    let wasm = include_bytes!("wasm/exports_55.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_56() {
    let wasm = include_bytes!("wasm/exports_56.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_57() {
    let wasm = include_bytes!("wasm/exports_57.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_58() {
    let wasm = include_bytes!("wasm/exports_58.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_59() {
    let wasm = include_bytes!("wasm/exports_59.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_60() {
    let wasm = include_bytes!("wasm/exports_60.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_61() {
    let wasm = include_bytes!("wasm/exports_61.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_62() {
    let wasm = include_bytes!("wasm/exports_62.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_63() {
    let wasm = include_bytes!("wasm/exports_63.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_64() {
    let wasm = include_bytes!("wasm/exports_64.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_65() {
    let wasm = include_bytes!("wasm/exports_65.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_66() {
    let wasm = include_bytes!("wasm/exports_66.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_75() {
    let wasm = include_bytes!("wasm/exports_75.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_76() {
    let wasm = include_bytes!("wasm/exports_76.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_77() {
    let wasm = include_bytes!("wasm/exports_77.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_78() {
    let wasm = include_bytes!("wasm/exports_78.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_79() {
    let wasm = include_bytes!("wasm/exports_79.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_80() {
    let wasm = include_bytes!("wasm/exports_80.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_81() {
    let wasm = include_bytes!("wasm/exports_81.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_82() {
    let wasm = include_bytes!("wasm/exports_82.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_83() {
    let wasm = include_bytes!("wasm/exports_83.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_84() {
    let wasm = include_bytes!("wasm/exports_84.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_85() {
    let wasm = include_bytes!("wasm/exports_85.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_86() {
    let wasm = include_bytes!("wasm/exports_86.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_87() {
    let wasm = include_bytes!("wasm/exports_87.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn exports_88() {
    let wasm = include_bytes!("wasm/exports_88.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn local_set_0() {
    let wasm = include_bytes!("wasm/local_set_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn inline_module_0() {
    let wasm = include_bytes!("wasm/inline-module_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_0() {
    let wasm = include_bytes!("wasm/linking_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_2() {
    let wasm = include_bytes!("wasm/linking_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_7() {
    let wasm = include_bytes!("wasm/linking_7.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_11() {
    let wasm = include_bytes!("wasm/linking_11.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_13() {
    let wasm = include_bytes!("wasm/linking_13.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_31() {
    let wasm = include_bytes!("wasm/linking_31.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_33() {
    let wasm = include_bytes!("wasm/linking_33.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_38() {
    let wasm = include_bytes!("wasm/linking_38.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_40() {
    let wasm = include_bytes!("wasm/linking_40.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_59() {
    let wasm = include_bytes!("wasm/linking_59.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_80() {
    let wasm = include_bytes!("wasm/linking_80.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_81() {
    let wasm = include_bytes!("wasm/linking_81.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_83() {
    let wasm = include_bytes!("wasm/linking_83.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_93() {
    let wasm = include_bytes!("wasm/linking_93.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_95() {
    let wasm = include_bytes!("wasm/linking_95.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_98() {
    let wasm = include_bytes!("wasm/linking_98.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_100() {
    let wasm = include_bytes!("wasm/linking_100.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_104() {
    let wasm = include_bytes!("wasm/linking_104.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_109() {
    let wasm = include_bytes!("wasm/linking_109.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_111() {
    let wasm = include_bytes!("wasm/linking_111.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn linking_127() {
    let wasm = include_bytes!("wasm/linking_127.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_literals_0() {
    let wasm = include_bytes!("wasm/float_literals_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_literals_83() {
    let wasm = include_bytes!("wasm/float_literals_83.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_0() {
    let wasm = include_bytes!("wasm/align_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_1() {
    let wasm = include_bytes!("wasm/align_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_2() {
    let wasm = include_bytes!("wasm/align_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_3() {
    let wasm = include_bytes!("wasm/align_3.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_4() {
    let wasm = include_bytes!("wasm/align_4.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_5() {
    let wasm = include_bytes!("wasm/align_5.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_6() {
    let wasm = include_bytes!("wasm/align_6.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_7() {
    let wasm = include_bytes!("wasm/align_7.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_8() {
    let wasm = include_bytes!("wasm/align_8.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_9() {
    let wasm = include_bytes!("wasm/align_9.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_10() {
    let wasm = include_bytes!("wasm/align_10.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_11() {
    let wasm = include_bytes!("wasm/align_11.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_12() {
    let wasm = include_bytes!("wasm/align_12.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_13() {
    let wasm = include_bytes!("wasm/align_13.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_14() {
    let wasm = include_bytes!("wasm/align_14.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_15() {
    let wasm = include_bytes!("wasm/align_15.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_16() {
    let wasm = include_bytes!("wasm/align_16.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_17() {
    let wasm = include_bytes!("wasm/align_17.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_18() {
    let wasm = include_bytes!("wasm/align_18.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_19() {
    let wasm = include_bytes!("wasm/align_19.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_20() {
    let wasm = include_bytes!("wasm/align_20.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_21() {
    let wasm = include_bytes!("wasm/align_21.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_22() {
    let wasm = include_bytes!("wasm/align_22.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_106() {
    let wasm = include_bytes!("wasm/align_106.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn align_153() {
    let wasm = include_bytes!("wasm/align_153.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn if_0() {
    let wasm = include_bytes!("wasm/if_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_0() {
    let wasm = include_bytes!("wasm/const_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_1() {
    let wasm = include_bytes!("wasm/const_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_6() {
    let wasm = include_bytes!("wasm/const_6.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_7() {
    let wasm = include_bytes!("wasm/const_7.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_12() {
    let wasm = include_bytes!("wasm/const_12.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_13() {
    let wasm = include_bytes!("wasm/const_13.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_14() {
    let wasm = include_bytes!("wasm/const_14.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_15() {
    let wasm = include_bytes!("wasm/const_15.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_16() {
    let wasm = include_bytes!("wasm/const_16.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_17() {
    let wasm = include_bytes!("wasm/const_17.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_18() {
    let wasm = include_bytes!("wasm/const_18.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_19() {
    let wasm = include_bytes!("wasm/const_19.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_20() {
    let wasm = include_bytes!("wasm/const_20.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_21() {
    let wasm = include_bytes!("wasm/const_21.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_22() {
    let wasm = include_bytes!("wasm/const_22.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_23() {
    let wasm = include_bytes!("wasm/const_23.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_24() {
    let wasm = include_bytes!("wasm/const_24.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_25() {
    let wasm = include_bytes!("wasm/const_25.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_26() {
    let wasm = include_bytes!("wasm/const_26.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_27() {
    let wasm = include_bytes!("wasm/const_27.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_28() {
    let wasm = include_bytes!("wasm/const_28.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_29() {
    let wasm = include_bytes!("wasm/const_29.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_30() {
    let wasm = include_bytes!("wasm/const_30.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_31() {
    let wasm = include_bytes!("wasm/const_31.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_32() {
    let wasm = include_bytes!("wasm/const_32.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_33() {
    let wasm = include_bytes!("wasm/const_33.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_34() {
    let wasm = include_bytes!("wasm/const_34.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_35() {
    let wasm = include_bytes!("wasm/const_35.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_55() {
    let wasm = include_bytes!("wasm/const_55.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_56() {
    let wasm = include_bytes!("wasm/const_56.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_57() {
    let wasm = include_bytes!("wasm/const_57.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_58() {
    let wasm = include_bytes!("wasm/const_58.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_59() {
    let wasm = include_bytes!("wasm/const_59.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_60() {
    let wasm = include_bytes!("wasm/const_60.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_61() {
    let wasm = include_bytes!("wasm/const_61.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_62() {
    let wasm = include_bytes!("wasm/const_62.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_63() {
    let wasm = include_bytes!("wasm/const_63.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_64() {
    let wasm = include_bytes!("wasm/const_64.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_65() {
    let wasm = include_bytes!("wasm/const_65.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_66() {
    let wasm = include_bytes!("wasm/const_66.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_67() {
    let wasm = include_bytes!("wasm/const_67.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_68() {
    let wasm = include_bytes!("wasm/const_68.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_69() {
    let wasm = include_bytes!("wasm/const_69.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_70() {
    let wasm = include_bytes!("wasm/const_70.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_71() {
    let wasm = include_bytes!("wasm/const_71.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_72() {
    let wasm = include_bytes!("wasm/const_72.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_73() {
    let wasm = include_bytes!("wasm/const_73.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_74() {
    let wasm = include_bytes!("wasm/const_74.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_75() {
    let wasm = include_bytes!("wasm/const_75.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_76() {
    let wasm = include_bytes!("wasm/const_76.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_77() {
    let wasm = include_bytes!("wasm/const_77.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_78() {
    let wasm = include_bytes!("wasm/const_78.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_79() {
    let wasm = include_bytes!("wasm/const_79.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_80() {
    let wasm = include_bytes!("wasm/const_80.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_81() {
    let wasm = include_bytes!("wasm/const_81.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_82() {
    let wasm = include_bytes!("wasm/const_82.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_83() {
    let wasm = include_bytes!("wasm/const_83.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_84() {
    let wasm = include_bytes!("wasm/const_84.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_85() {
    let wasm = include_bytes!("wasm/const_85.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_86() {
    let wasm = include_bytes!("wasm/const_86.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_87() {
    let wasm = include_bytes!("wasm/const_87.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_88() {
    let wasm = include_bytes!("wasm/const_88.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_89() {
    let wasm = include_bytes!("wasm/const_89.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_90() {
    let wasm = include_bytes!("wasm/const_90.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_110() {
    let wasm = include_bytes!("wasm/const_110.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_111() {
    let wasm = include_bytes!("wasm/const_111.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_114() {
    let wasm = include_bytes!("wasm/const_114.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_115() {
    let wasm = include_bytes!("wasm/const_115.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_118() {
    let wasm = include_bytes!("wasm/const_118.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_119() {
    let wasm = include_bytes!("wasm/const_119.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_122() {
    let wasm = include_bytes!("wasm/const_122.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_123() {
    let wasm = include_bytes!("wasm/const_123.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_126() {
    let wasm = include_bytes!("wasm/const_126.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_127() {
    let wasm = include_bytes!("wasm/const_127.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_128() {
    let wasm = include_bytes!("wasm/const_128.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_129() {
    let wasm = include_bytes!("wasm/const_129.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_130() {
    let wasm = include_bytes!("wasm/const_130.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_131() {
    let wasm = include_bytes!("wasm/const_131.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_132() {
    let wasm = include_bytes!("wasm/const_132.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_133() {
    let wasm = include_bytes!("wasm/const_133.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_134() {
    let wasm = include_bytes!("wasm/const_134.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_135() {
    let wasm = include_bytes!("wasm/const_135.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_140() {
    let wasm = include_bytes!("wasm/const_140.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_141() {
    let wasm = include_bytes!("wasm/const_141.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_144() {
    let wasm = include_bytes!("wasm/const_144.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_145() {
    let wasm = include_bytes!("wasm/const_145.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_148() {
    let wasm = include_bytes!("wasm/const_148.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_149() {
    let wasm = include_bytes!("wasm/const_149.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_150() {
    let wasm = include_bytes!("wasm/const_150.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_151() {
    let wasm = include_bytes!("wasm/const_151.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_152() {
    let wasm = include_bytes!("wasm/const_152.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_153() {
    let wasm = include_bytes!("wasm/const_153.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_154() {
    let wasm = include_bytes!("wasm/const_154.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_155() {
    let wasm = include_bytes!("wasm/const_155.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_160() {
    let wasm = include_bytes!("wasm/const_160.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_161() {
    let wasm = include_bytes!("wasm/const_161.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_164() {
    let wasm = include_bytes!("wasm/const_164.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_165() {
    let wasm = include_bytes!("wasm/const_165.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_168() {
    let wasm = include_bytes!("wasm/const_168.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_169() {
    let wasm = include_bytes!("wasm/const_169.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_170() {
    let wasm = include_bytes!("wasm/const_170.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_171() {
    let wasm = include_bytes!("wasm/const_171.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_178() {
    let wasm = include_bytes!("wasm/const_178.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_180() {
    let wasm = include_bytes!("wasm/const_180.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_182() {
    let wasm = include_bytes!("wasm/const_182.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_184() {
    let wasm = include_bytes!("wasm/const_184.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_186() {
    let wasm = include_bytes!("wasm/const_186.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_188() {
    let wasm = include_bytes!("wasm/const_188.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_190() {
    let wasm = include_bytes!("wasm/const_190.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_192() {
    let wasm = include_bytes!("wasm/const_192.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_194() {
    let wasm = include_bytes!("wasm/const_194.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_196() {
    let wasm = include_bytes!("wasm/const_196.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_198() {
    let wasm = include_bytes!("wasm/const_198.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_200() {
    let wasm = include_bytes!("wasm/const_200.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_202() {
    let wasm = include_bytes!("wasm/const_202.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_204() {
    let wasm = include_bytes!("wasm/const_204.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_206() {
    let wasm = include_bytes!("wasm/const_206.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_208() {
    let wasm = include_bytes!("wasm/const_208.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_210() {
    let wasm = include_bytes!("wasm/const_210.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_212() {
    let wasm = include_bytes!("wasm/const_212.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_214() {
    let wasm = include_bytes!("wasm/const_214.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_216() {
    let wasm = include_bytes!("wasm/const_216.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_218() {
    let wasm = include_bytes!("wasm/const_218.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_220() {
    let wasm = include_bytes!("wasm/const_220.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_222() {
    let wasm = include_bytes!("wasm/const_222.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_224() {
    let wasm = include_bytes!("wasm/const_224.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_226() {
    let wasm = include_bytes!("wasm/const_226.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_228() {
    let wasm = include_bytes!("wasm/const_228.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_230() {
    let wasm = include_bytes!("wasm/const_230.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_232() {
    let wasm = include_bytes!("wasm/const_232.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_234() {
    let wasm = include_bytes!("wasm/const_234.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_236() {
    let wasm = include_bytes!("wasm/const_236.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_238() {
    let wasm = include_bytes!("wasm/const_238.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_240() {
    let wasm = include_bytes!("wasm/const_240.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_242() {
    let wasm = include_bytes!("wasm/const_242.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_244() {
    let wasm = include_bytes!("wasm/const_244.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_246() {
    let wasm = include_bytes!("wasm/const_246.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_248() {
    let wasm = include_bytes!("wasm/const_248.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_250() {
    let wasm = include_bytes!("wasm/const_250.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_252() {
    let wasm = include_bytes!("wasm/const_252.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_254() {
    let wasm = include_bytes!("wasm/const_254.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_256() {
    let wasm = include_bytes!("wasm/const_256.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_258() {
    let wasm = include_bytes!("wasm/const_258.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_260() {
    let wasm = include_bytes!("wasm/const_260.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_262() {
    let wasm = include_bytes!("wasm/const_262.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_264() {
    let wasm = include_bytes!("wasm/const_264.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_266() {
    let wasm = include_bytes!("wasm/const_266.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_268() {
    let wasm = include_bytes!("wasm/const_268.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_270() {
    let wasm = include_bytes!("wasm/const_270.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_272() {
    let wasm = include_bytes!("wasm/const_272.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_274() {
    let wasm = include_bytes!("wasm/const_274.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_276() {
    let wasm = include_bytes!("wasm/const_276.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_278() {
    let wasm = include_bytes!("wasm/const_278.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_280() {
    let wasm = include_bytes!("wasm/const_280.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_282() {
    let wasm = include_bytes!("wasm/const_282.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_284() {
    let wasm = include_bytes!("wasm/const_284.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_286() {
    let wasm = include_bytes!("wasm/const_286.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_288() {
    let wasm = include_bytes!("wasm/const_288.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_290() {
    let wasm = include_bytes!("wasm/const_290.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_292() {
    let wasm = include_bytes!("wasm/const_292.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_294() {
    let wasm = include_bytes!("wasm/const_294.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_296() {
    let wasm = include_bytes!("wasm/const_296.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_298() {
    let wasm = include_bytes!("wasm/const_298.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_300() {
    let wasm = include_bytes!("wasm/const_300.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_302() {
    let wasm = include_bytes!("wasm/const_302.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_304() {
    let wasm = include_bytes!("wasm/const_304.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_306() {
    let wasm = include_bytes!("wasm/const_306.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_308() {
    let wasm = include_bytes!("wasm/const_308.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_310() {
    let wasm = include_bytes!("wasm/const_310.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_312() {
    let wasm = include_bytes!("wasm/const_312.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_314() {
    let wasm = include_bytes!("wasm/const_314.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_316() {
    let wasm = include_bytes!("wasm/const_316.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_318() {
    let wasm = include_bytes!("wasm/const_318.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_320() {
    let wasm = include_bytes!("wasm/const_320.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_322() {
    let wasm = include_bytes!("wasm/const_322.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_324() {
    let wasm = include_bytes!("wasm/const_324.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_326() {
    let wasm = include_bytes!("wasm/const_326.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_328() {
    let wasm = include_bytes!("wasm/const_328.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_330() {
    let wasm = include_bytes!("wasm/const_330.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_332() {
    let wasm = include_bytes!("wasm/const_332.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_334() {
    let wasm = include_bytes!("wasm/const_334.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_336() {
    let wasm = include_bytes!("wasm/const_336.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_338() {
    let wasm = include_bytes!("wasm/const_338.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_340() {
    let wasm = include_bytes!("wasm/const_340.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_342() {
    let wasm = include_bytes!("wasm/const_342.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_344() {
    let wasm = include_bytes!("wasm/const_344.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_346() {
    let wasm = include_bytes!("wasm/const_346.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_348() {
    let wasm = include_bytes!("wasm/const_348.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_350() {
    let wasm = include_bytes!("wasm/const_350.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_352() {
    let wasm = include_bytes!("wasm/const_352.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_354() {
    let wasm = include_bytes!("wasm/const_354.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_356() {
    let wasm = include_bytes!("wasm/const_356.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_358() {
    let wasm = include_bytes!("wasm/const_358.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_360() {
    let wasm = include_bytes!("wasm/const_360.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_362() {
    let wasm = include_bytes!("wasm/const_362.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_364() {
    let wasm = include_bytes!("wasm/const_364.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_366() {
    let wasm = include_bytes!("wasm/const_366.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_368() {
    let wasm = include_bytes!("wasm/const_368.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_370() {
    let wasm = include_bytes!("wasm/const_370.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_372() {
    let wasm = include_bytes!("wasm/const_372.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_374() {
    let wasm = include_bytes!("wasm/const_374.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_376() {
    let wasm = include_bytes!("wasm/const_376.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_378() {
    let wasm = include_bytes!("wasm/const_378.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_380() {
    let wasm = include_bytes!("wasm/const_380.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_382() {
    let wasm = include_bytes!("wasm/const_382.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_384() {
    let wasm = include_bytes!("wasm/const_384.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_386() {
    let wasm = include_bytes!("wasm/const_386.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_388() {
    let wasm = include_bytes!("wasm/const_388.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_390() {
    let wasm = include_bytes!("wasm/const_390.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_392() {
    let wasm = include_bytes!("wasm/const_392.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_394() {
    let wasm = include_bytes!("wasm/const_394.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_396() {
    let wasm = include_bytes!("wasm/const_396.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_398() {
    let wasm = include_bytes!("wasm/const_398.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_400() {
    let wasm = include_bytes!("wasm/const_400.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_402() {
    let wasm = include_bytes!("wasm/const_402.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_404() {
    let wasm = include_bytes!("wasm/const_404.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_406() {
    let wasm = include_bytes!("wasm/const_406.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_408() {
    let wasm = include_bytes!("wasm/const_408.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_410() {
    let wasm = include_bytes!("wasm/const_410.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_412() {
    let wasm = include_bytes!("wasm/const_412.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_414() {
    let wasm = include_bytes!("wasm/const_414.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_416() {
    let wasm = include_bytes!("wasm/const_416.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_418() {
    let wasm = include_bytes!("wasm/const_418.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_420() {
    let wasm = include_bytes!("wasm/const_420.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_422() {
    let wasm = include_bytes!("wasm/const_422.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_424() {
    let wasm = include_bytes!("wasm/const_424.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_426() {
    let wasm = include_bytes!("wasm/const_426.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_428() {
    let wasm = include_bytes!("wasm/const_428.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_430() {
    let wasm = include_bytes!("wasm/const_430.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_432() {
    let wasm = include_bytes!("wasm/const_432.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_434() {
    let wasm = include_bytes!("wasm/const_434.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_436() {
    let wasm = include_bytes!("wasm/const_436.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_438() {
    let wasm = include_bytes!("wasm/const_438.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_440() {
    let wasm = include_bytes!("wasm/const_440.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_442() {
    let wasm = include_bytes!("wasm/const_442.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_444() {
    let wasm = include_bytes!("wasm/const_444.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_446() {
    let wasm = include_bytes!("wasm/const_446.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_448() {
    let wasm = include_bytes!("wasm/const_448.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_450() {
    let wasm = include_bytes!("wasm/const_450.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_452() {
    let wasm = include_bytes!("wasm/const_452.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_454() {
    let wasm = include_bytes!("wasm/const_454.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_456() {
    let wasm = include_bytes!("wasm/const_456.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_458() {
    let wasm = include_bytes!("wasm/const_458.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_460() {
    let wasm = include_bytes!("wasm/const_460.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_462() {
    let wasm = include_bytes!("wasm/const_462.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_464() {
    let wasm = include_bytes!("wasm/const_464.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_466() {
    let wasm = include_bytes!("wasm/const_466.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_468() {
    let wasm = include_bytes!("wasm/const_468.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_470() {
    let wasm = include_bytes!("wasm/const_470.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_472() {
    let wasm = include_bytes!("wasm/const_472.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_474() {
    let wasm = include_bytes!("wasm/const_474.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_476() {
    let wasm = include_bytes!("wasm/const_476.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_478() {
    let wasm = include_bytes!("wasm/const_478.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_480() {
    let wasm = include_bytes!("wasm/const_480.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_482() {
    let wasm = include_bytes!("wasm/const_482.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_484() {
    let wasm = include_bytes!("wasm/const_484.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_486() {
    let wasm = include_bytes!("wasm/const_486.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_488() {
    let wasm = include_bytes!("wasm/const_488.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_490() {
    let wasm = include_bytes!("wasm/const_490.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_492() {
    let wasm = include_bytes!("wasm/const_492.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_494() {
    let wasm = include_bytes!("wasm/const_494.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_496() {
    let wasm = include_bytes!("wasm/const_496.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_498() {
    let wasm = include_bytes!("wasm/const_498.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_500() {
    let wasm = include_bytes!("wasm/const_500.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_502() {
    let wasm = include_bytes!("wasm/const_502.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_504() {
    let wasm = include_bytes!("wasm/const_504.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_506() {
    let wasm = include_bytes!("wasm/const_506.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_508() {
    let wasm = include_bytes!("wasm/const_508.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_510() {
    let wasm = include_bytes!("wasm/const_510.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_512() {
    let wasm = include_bytes!("wasm/const_512.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_514() {
    let wasm = include_bytes!("wasm/const_514.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_516() {
    let wasm = include_bytes!("wasm/const_516.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_518() {
    let wasm = include_bytes!("wasm/const_518.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_520() {
    let wasm = include_bytes!("wasm/const_520.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_522() {
    let wasm = include_bytes!("wasm/const_522.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_524() {
    let wasm = include_bytes!("wasm/const_524.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_526() {
    let wasm = include_bytes!("wasm/const_526.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_528() {
    let wasm = include_bytes!("wasm/const_528.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_530() {
    let wasm = include_bytes!("wasm/const_530.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_532() {
    let wasm = include_bytes!("wasm/const_532.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_534() {
    let wasm = include_bytes!("wasm/const_534.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_536() {
    let wasm = include_bytes!("wasm/const_536.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_538() {
    let wasm = include_bytes!("wasm/const_538.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_540() {
    let wasm = include_bytes!("wasm/const_540.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_542() {
    let wasm = include_bytes!("wasm/const_542.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_544() {
    let wasm = include_bytes!("wasm/const_544.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_546() {
    let wasm = include_bytes!("wasm/const_546.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_548() {
    let wasm = include_bytes!("wasm/const_548.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_550() {
    let wasm = include_bytes!("wasm/const_550.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_552() {
    let wasm = include_bytes!("wasm/const_552.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_554() {
    let wasm = include_bytes!("wasm/const_554.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_556() {
    let wasm = include_bytes!("wasm/const_556.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_558() {
    let wasm = include_bytes!("wasm/const_558.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_560() {
    let wasm = include_bytes!("wasm/const_560.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_562() {
    let wasm = include_bytes!("wasm/const_562.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_564() {
    let wasm = include_bytes!("wasm/const_564.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_566() {
    let wasm = include_bytes!("wasm/const_566.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_568() {
    let wasm = include_bytes!("wasm/const_568.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_570() {
    let wasm = include_bytes!("wasm/const_570.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_572() {
    let wasm = include_bytes!("wasm/const_572.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_574() {
    let wasm = include_bytes!("wasm/const_574.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_576() {
    let wasm = include_bytes!("wasm/const_576.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_578() {
    let wasm = include_bytes!("wasm/const_578.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_580() {
    let wasm = include_bytes!("wasm/const_580.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_582() {
    let wasm = include_bytes!("wasm/const_582.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_584() {
    let wasm = include_bytes!("wasm/const_584.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_586() {
    let wasm = include_bytes!("wasm/const_586.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_588() {
    let wasm = include_bytes!("wasm/const_588.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_590() {
    let wasm = include_bytes!("wasm/const_590.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_592() {
    let wasm = include_bytes!("wasm/const_592.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_594() {
    let wasm = include_bytes!("wasm/const_594.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_596() {
    let wasm = include_bytes!("wasm/const_596.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_598() {
    let wasm = include_bytes!("wasm/const_598.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_600() {
    let wasm = include_bytes!("wasm/const_600.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_602() {
    let wasm = include_bytes!("wasm/const_602.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_604() {
    let wasm = include_bytes!("wasm/const_604.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_606() {
    let wasm = include_bytes!("wasm/const_606.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_608() {
    let wasm = include_bytes!("wasm/const_608.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_610() {
    let wasm = include_bytes!("wasm/const_610.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_612() {
    let wasm = include_bytes!("wasm/const_612.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_614() {
    let wasm = include_bytes!("wasm/const_614.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_616() {
    let wasm = include_bytes!("wasm/const_616.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_618() {
    let wasm = include_bytes!("wasm/const_618.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_620() {
    let wasm = include_bytes!("wasm/const_620.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_622() {
    let wasm = include_bytes!("wasm/const_622.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_624() {
    let wasm = include_bytes!("wasm/const_624.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_626() {
    let wasm = include_bytes!("wasm/const_626.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_628() {
    let wasm = include_bytes!("wasm/const_628.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_630() {
    let wasm = include_bytes!("wasm/const_630.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_632() {
    let wasm = include_bytes!("wasm/const_632.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_634() {
    let wasm = include_bytes!("wasm/const_634.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_636() {
    let wasm = include_bytes!("wasm/const_636.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_638() {
    let wasm = include_bytes!("wasm/const_638.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_640() {
    let wasm = include_bytes!("wasm/const_640.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_642() {
    let wasm = include_bytes!("wasm/const_642.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_644() {
    let wasm = include_bytes!("wasm/const_644.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_646() {
    let wasm = include_bytes!("wasm/const_646.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_648() {
    let wasm = include_bytes!("wasm/const_648.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_650() {
    let wasm = include_bytes!("wasm/const_650.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_652() {
    let wasm = include_bytes!("wasm/const_652.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_654() {
    let wasm = include_bytes!("wasm/const_654.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_656() {
    let wasm = include_bytes!("wasm/const_656.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_658() {
    let wasm = include_bytes!("wasm/const_658.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_660() {
    let wasm = include_bytes!("wasm/const_660.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_662() {
    let wasm = include_bytes!("wasm/const_662.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_664() {
    let wasm = include_bytes!("wasm/const_664.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_666() {
    let wasm = include_bytes!("wasm/const_666.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_668() {
    let wasm = include_bytes!("wasm/const_668.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_670() {
    let wasm = include_bytes!("wasm/const_670.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_672() {
    let wasm = include_bytes!("wasm/const_672.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_674() {
    let wasm = include_bytes!("wasm/const_674.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_676() {
    let wasm = include_bytes!("wasm/const_676.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_678() {
    let wasm = include_bytes!("wasm/const_678.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_680() {
    let wasm = include_bytes!("wasm/const_680.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_682() {
    let wasm = include_bytes!("wasm/const_682.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_684() {
    let wasm = include_bytes!("wasm/const_684.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_686() {
    let wasm = include_bytes!("wasm/const_686.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_688() {
    let wasm = include_bytes!("wasm/const_688.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_690() {
    let wasm = include_bytes!("wasm/const_690.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_692() {
    let wasm = include_bytes!("wasm/const_692.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_694() {
    let wasm = include_bytes!("wasm/const_694.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_696() {
    let wasm = include_bytes!("wasm/const_696.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_698() {
    let wasm = include_bytes!("wasm/const_698.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_700() {
    let wasm = include_bytes!("wasm/const_700.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_702() {
    let wasm = include_bytes!("wasm/const_702.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_704() {
    let wasm = include_bytes!("wasm/const_704.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_706() {
    let wasm = include_bytes!("wasm/const_706.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_708() {
    let wasm = include_bytes!("wasm/const_708.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_710() {
    let wasm = include_bytes!("wasm/const_710.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_712() {
    let wasm = include_bytes!("wasm/const_712.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_714() {
    let wasm = include_bytes!("wasm/const_714.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_716() {
    let wasm = include_bytes!("wasm/const_716.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_718() {
    let wasm = include_bytes!("wasm/const_718.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_720() {
    let wasm = include_bytes!("wasm/const_720.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_722() {
    let wasm = include_bytes!("wasm/const_722.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_724() {
    let wasm = include_bytes!("wasm/const_724.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_726() {
    let wasm = include_bytes!("wasm/const_726.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_728() {
    let wasm = include_bytes!("wasm/const_728.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_730() {
    let wasm = include_bytes!("wasm/const_730.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_732() {
    let wasm = include_bytes!("wasm/const_732.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_734() {
    let wasm = include_bytes!("wasm/const_734.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_736() {
    let wasm = include_bytes!("wasm/const_736.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_738() {
    let wasm = include_bytes!("wasm/const_738.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_740() {
    let wasm = include_bytes!("wasm/const_740.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_742() {
    let wasm = include_bytes!("wasm/const_742.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_744() {
    let wasm = include_bytes!("wasm/const_744.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_746() {
    let wasm = include_bytes!("wasm/const_746.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_748() {
    let wasm = include_bytes!("wasm/const_748.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_750() {
    let wasm = include_bytes!("wasm/const_750.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_752() {
    let wasm = include_bytes!("wasm/const_752.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_754() {
    let wasm = include_bytes!("wasm/const_754.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_756() {
    let wasm = include_bytes!("wasm/const_756.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_758() {
    let wasm = include_bytes!("wasm/const_758.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_760() {
    let wasm = include_bytes!("wasm/const_760.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_762() {
    let wasm = include_bytes!("wasm/const_762.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_764() {
    let wasm = include_bytes!("wasm/const_764.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_766() {
    let wasm = include_bytes!("wasm/const_766.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_768() {
    let wasm = include_bytes!("wasm/const_768.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_770() {
    let wasm = include_bytes!("wasm/const_770.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_772() {
    let wasm = include_bytes!("wasm/const_772.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_774() {
    let wasm = include_bytes!("wasm/const_774.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn const_776() {
    let wasm = include_bytes!("wasm/const_776.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn skip_stack_guard_page_0() {
    let wasm = include_bytes!("wasm/skip-stack-guard-page_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn f64_cmp_0() {
    let wasm = include_bytes!("wasm/f64_cmp_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn block_0() {
    let wasm = include_bytes!("wasm/block_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn labels_0() {
    let wasm = include_bytes!("wasm/labels_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn switch_0() {
    let wasm = include_bytes!("wasm/switch_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn i64_0() {
    let wasm = include_bytes!("wasm/i64_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_0() {
    let wasm = include_bytes!("wasm/memory_copy_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_32() {
    let wasm = include_bytes!("wasm/memory_copy_32.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_64() {
    let wasm = include_bytes!("wasm/memory_copy_64.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_96() {
    let wasm = include_bytes!("wasm/memory_copy_96.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_128() {
    let wasm = include_bytes!("wasm/memory_copy_128.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_160() {
    let wasm = include_bytes!("wasm/memory_copy_160.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_192() {
    let wasm = include_bytes!("wasm/memory_copy_192.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_224() {
    let wasm = include_bytes!("wasm/memory_copy_224.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_256() {
    let wasm = include_bytes!("wasm/memory_copy_256.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_607() {
    let wasm = include_bytes!("wasm/memory_copy_607.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_959() {
    let wasm = include_bytes!("wasm/memory_copy_959.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_1310() {
    let wasm = include_bytes!("wasm/memory_copy_1310.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_1662() {
    let wasm = include_bytes!("wasm/memory_copy_1662.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_2013() {
    let wasm = include_bytes!("wasm/memory_copy_2013.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_2364() {
    let wasm = include_bytes!("wasm/memory_copy_2364.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_2715() {
    let wasm = include_bytes!("wasm/memory_copy_2715.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_3066() {
    let wasm = include_bytes!("wasm/memory_copy_3066.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_3417() {
    let wasm = include_bytes!("wasm/memory_copy_3417.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_3768() {
    let wasm = include_bytes!("wasm/memory_copy_3768.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4183() {
    let wasm = include_bytes!("wasm/memory_copy_4183.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4188() {
    let wasm = include_bytes!("wasm/memory_copy_4188.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4193() {
    let wasm = include_bytes!("wasm/memory_copy_4193.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4195() {
    let wasm = include_bytes!("wasm/memory_copy_4195.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4197() {
    let wasm = include_bytes!("wasm/memory_copy_4197.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4199() {
    let wasm = include_bytes!("wasm/memory_copy_4199.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4201() {
    let wasm = include_bytes!("wasm/memory_copy_4201.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4205() {
    let wasm = include_bytes!("wasm/memory_copy_4205.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4207() {
    let wasm = include_bytes!("wasm/memory_copy_4207.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4209() {
    let wasm = include_bytes!("wasm/memory_copy_4209.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4211() {
    let wasm = include_bytes!("wasm/memory_copy_4211.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4213() {
    let wasm = include_bytes!("wasm/memory_copy_4213.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4215() {
    let wasm = include_bytes!("wasm/memory_copy_4215.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_copy_4217() {
    let wasm = include_bytes!("wasm/memory_copy_4217.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn stack_0() {
    let wasm = include_bytes!("wasm/stack_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn stack_6() {
    let wasm = include_bytes!("wasm/stack_6.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn loop_0() {
    let wasm = include_bytes!("wasm/loop_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn conversions_0() {
    let wasm = include_bytes!("wasm/conversions_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn comments_0() {
    let wasm = include_bytes!("wasm/comments_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn comments_1() {
    let wasm = include_bytes!("wasm/comments_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn comments_2() {
    let wasm = include_bytes!("wasm/comments_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn comments_3() {
    let wasm = include_bytes!("wasm/comments_3.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn endianness_0() {
    let wasm = include_bytes!("wasm/endianness_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn return_0() {
    let wasm = include_bytes!("wasm/return_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn store_0() {
    let wasm = include_bytes!("wasm/store_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_redundancy_0() {
    let wasm = include_bytes!("wasm/memory_redundancy_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn i32_0() {
    let wasm = include_bytes!("wasm/i32_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn unreachable_0() {
    let wasm = include_bytes!("wasm/unreachable_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_0() {
    let wasm = include_bytes!("wasm/bulk_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_1() {
    let wasm = include_bytes!("wasm/bulk_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_2() {
    let wasm = include_bytes!("wasm/bulk_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_18() {
    let wasm = include_bytes!("wasm/bulk_18.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_47() {
    let wasm = include_bytes!("wasm/bulk_47.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_60() {
    let wasm = include_bytes!("wasm/bulk_60.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_71() {
    let wasm = include_bytes!("wasm/bulk_71.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_72() {
    let wasm = include_bytes!("wasm/bulk_72.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_73() {
    let wasm = include_bytes!("wasm/bulk_73.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_85() {
    let wasm = include_bytes!("wasm/bulk_85.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_96() {
    let wasm = include_bytes!("wasm/bulk_96.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_97() {
    let wasm = include_bytes!("wasm/bulk_97.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn bulk_98() {
    let wasm = include_bytes!("wasm/bulk_98.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn traps_0() {
    let wasm = include_bytes!("wasm/traps_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn traps_7() {
    let wasm = include_bytes!("wasm/traps_7.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn traps_12() {
    let wasm = include_bytes!("wasm/traps_12.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn traps_21() {
    let wasm = include_bytes!("wasm/traps_21.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn local_tee_0() {
    let wasm = include_bytes!("wasm/local_tee_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn f64_bitwise_0() {
    let wasm = include_bytes!("wasm/f64_bitwise_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_0() {
    let wasm = include_bytes!("wasm/binary_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_1() {
    let wasm = include_bytes!("wasm/binary_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_2() {
    let wasm = include_bytes!("wasm/binary_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_3() {
    let wasm = include_bytes!("wasm/binary_3.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_55() {
    let wasm = include_bytes!("wasm/binary_55.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_60() {
    let wasm = include_bytes!("wasm/binary_60.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_61() {
    let wasm = include_bytes!("wasm/binary_61.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_68() {
    let wasm = include_bytes!("wasm/binary_68.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_69() {
    let wasm = include_bytes!("wasm/binary_69.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_70() {
    let wasm = include_bytes!("wasm/binary_70.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_73() {
    let wasm = include_bytes!("wasm/binary_73.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_82() {
    let wasm = include_bytes!("wasm/binary_82.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_87() {
    let wasm = include_bytes!("wasm/binary_87.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_93() {
    let wasm = include_bytes!("wasm/binary_93.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_96() {
    let wasm = include_bytes!("wasm/binary_96.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_99() {
    let wasm = include_bytes!("wasm/binary_99.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_103() {
    let wasm = include_bytes!("wasm/binary_103.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_108() {
    let wasm = include_bytes!("wasm/binary_108.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_110() {
    let wasm = include_bytes!("wasm/binary_110.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_grow_0() {
    let wasm = include_bytes!("wasm/memory_grow_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_grow_21() {
    let wasm = include_bytes!("wasm/memory_grow_21.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_grow_30() {
    let wasm = include_bytes!("wasm/memory_grow_30.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_grow_39() {
    let wasm = include_bytes!("wasm/memory_grow_39.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_grow_51() {
    let wasm = include_bytes!("wasm/memory_grow_51.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_0() {
    let wasm = include_bytes!("wasm/tokens_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_1() {
    let wasm = include_bytes!("wasm/tokens_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_2() {
    let wasm = include_bytes!("wasm/tokens_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_3() {
    let wasm = include_bytes!("wasm/tokens_3.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_4() {
    let wasm = include_bytes!("wasm/tokens_4.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_5() {
    let wasm = include_bytes!("wasm/tokens_5.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_6() {
    let wasm = include_bytes!("wasm/tokens_6.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_7() {
    let wasm = include_bytes!("wasm/tokens_7.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_8() {
    let wasm = include_bytes!("wasm/tokens_8.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_9() {
    let wasm = include_bytes!("wasm/tokens_9.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_10() {
    let wasm = include_bytes!("wasm/tokens_10.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_11() {
    let wasm = include_bytes!("wasm/tokens_11.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_12() {
    let wasm = include_bytes!("wasm/tokens_12.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_13() {
    let wasm = include_bytes!("wasm/tokens_13.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_14() {
    let wasm = include_bytes!("wasm/tokens_14.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_15() {
    let wasm = include_bytes!("wasm/tokens_15.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_16() {
    let wasm = include_bytes!("wasm/tokens_16.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_18() {
    let wasm = include_bytes!("wasm/tokens_18.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_20() {
    let wasm = include_bytes!("wasm/tokens_20.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_22() {
    let wasm = include_bytes!("wasm/tokens_22.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_23() {
    let wasm = include_bytes!("wasm/tokens_23.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_24() {
    let wasm = include_bytes!("wasm/tokens_24.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_26() {
    let wasm = include_bytes!("wasm/tokens_26.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_28() {
    let wasm = include_bytes!("wasm/tokens_28.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_30() {
    let wasm = include_bytes!("wasm/tokens_30.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_32() {
    let wasm = include_bytes!("wasm/tokens_32.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_34() {
    let wasm = include_bytes!("wasm/tokens_34.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_36() {
    let wasm = include_bytes!("wasm/tokens_36.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_38() {
    let wasm = include_bytes!("wasm/tokens_38.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_40() {
    let wasm = include_bytes!("wasm/tokens_40.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_42() {
    let wasm = include_bytes!("wasm/tokens_42.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_44() {
    let wasm = include_bytes!("wasm/tokens_44.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_46() {
    let wasm = include_bytes!("wasm/tokens_46.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_48() {
    let wasm = include_bytes!("wasm/tokens_48.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn tokens_50() {
    let wasm = include_bytes!("wasm/tokens_50.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn call_indirect_0() {
    let wasm = include_bytes!("wasm/call_indirect_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn call_indirect_123() {
    let wasm = include_bytes!("wasm/call_indirect_123.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn call_indirect_169() {
    let wasm = include_bytes!("wasm/call_indirect_169.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn type_0() {
    let wasm = include_bytes!("wasm/type_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn load_0() {
    let wasm = include_bytes!("wasm/load_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_fill_0() {
    let wasm = include_bytes!("wasm/memory_fill_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_fill_4() {
    let wasm = include_bytes!("wasm/memory_fill_4.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_fill_6() {
    let wasm = include_bytes!("wasm/memory_fill_6.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_fill_8() {
    let wasm = include_bytes!("wasm/memory_fill_8.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_fill_11() {
    let wasm = include_bytes!("wasm/memory_fill_11.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_fill_13() {
    let wasm = include_bytes!("wasm/memory_fill_13.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_fill_15() {
    let wasm = include_bytes!("wasm/memory_fill_15.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_fill_20() {
    let wasm = include_bytes!("wasm/memory_fill_20.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_fill_91() {
    let wasm = include_bytes!("wasm/memory_fill_91.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_fill_94() {
    let wasm = include_bytes!("wasm/memory_fill_94.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_fill_97() {
    let wasm = include_bytes!("wasm/memory_fill_97.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_size_0() {
    let wasm = include_bytes!("wasm/memory_size_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_size_8() {
    let wasm = include_bytes!("wasm/memory_size_8.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_size_16() {
    let wasm = include_bytes!("wasm/memory_size_16.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_size_28() {
    let wasm = include_bytes!("wasm/memory_size_28.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_0() {
    let wasm = include_bytes!("wasm/imports_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_2() {
    let wasm = include_bytes!("wasm/imports_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_6() {
    let wasm = include_bytes!("wasm/imports_6.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_8() {
    let wasm = include_bytes!("wasm/imports_8.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_10() {
    let wasm = include_bytes!("wasm/imports_10.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_11() {
    let wasm = include_bytes!("wasm/imports_11.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_12() {
    let wasm = include_bytes!("wasm/imports_12.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_13() {
    let wasm = include_bytes!("wasm/imports_13.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_14() {
    let wasm = include_bytes!("wasm/imports_14.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_15() {
    let wasm = include_bytes!("wasm/imports_15.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_16() {
    let wasm = include_bytes!("wasm/imports_16.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_41() {
    let wasm = include_bytes!("wasm/imports_41.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_46() {
    let wasm = include_bytes!("wasm/imports_46.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_47() {
    let wasm = include_bytes!("wasm/imports_47.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_48() {
    let wasm = include_bytes!("wasm/imports_48.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_69() {
    let wasm = include_bytes!("wasm/imports_69.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_75() {
    let wasm = include_bytes!("wasm/imports_75.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_81() {
    let wasm = include_bytes!("wasm/imports_81.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_82() {
    let wasm = include_bytes!("wasm/imports_82.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_83() {
    let wasm = include_bytes!("wasm/imports_83.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_84() {
    let wasm = include_bytes!("wasm/imports_84.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_85() {
    let wasm = include_bytes!("wasm/imports_85.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_86() {
    let wasm = include_bytes!("wasm/imports_86.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_87() {
    let wasm = include_bytes!("wasm/imports_87.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_88() {
    let wasm = include_bytes!("wasm/imports_88.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_89() {
    let wasm = include_bytes!("wasm/imports_89.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_90() {
    let wasm = include_bytes!("wasm/imports_90.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_91() {
    let wasm = include_bytes!("wasm/imports_91.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_92() {
    let wasm = include_bytes!("wasm/imports_92.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_93() {
    let wasm = include_bytes!("wasm/imports_93.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_94() {
    let wasm = include_bytes!("wasm/imports_94.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_95() {
    let wasm = include_bytes!("wasm/imports_95.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_96() {
    let wasm = include_bytes!("wasm/imports_96.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_97() {
    let wasm = include_bytes!("wasm/imports_97.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_98() {
    let wasm = include_bytes!("wasm/imports_98.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_99() {
    let wasm = include_bytes!("wasm/imports_99.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_100() {
    let wasm = include_bytes!("wasm/imports_100.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_101() {
    let wasm = include_bytes!("wasm/imports_101.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_114() {
    let wasm = include_bytes!("wasm/imports_114.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_119() {
    let wasm = include_bytes!("wasm/imports_119.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_127() {
    let wasm = include_bytes!("wasm/imports_127.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_128() {
    let wasm = include_bytes!("wasm/imports_128.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_129() {
    let wasm = include_bytes!("wasm/imports_129.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_130() {
    let wasm = include_bytes!("wasm/imports_130.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_131() {
    let wasm = include_bytes!("wasm/imports_131.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_132() {
    let wasm = include_bytes!("wasm/imports_132.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_133() {
    let wasm = include_bytes!("wasm/imports_133.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_134() {
    let wasm = include_bytes!("wasm/imports_134.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_135() {
    let wasm = include_bytes!("wasm/imports_135.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_150() {
    let wasm = include_bytes!("wasm/imports_150.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_156() {
    let wasm = include_bytes!("wasm/imports_156.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_159() {
    let wasm = include_bytes!("wasm/imports_159.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_162() {
    let wasm = include_bytes!("wasm/imports_162.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn imports_180() {
    let wasm = include_bytes!("wasm/imports_180.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn left_to_right_0() {
    let wasm = include_bytes!("wasm/left-to-right_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn ref_is_null_0() {
    let wasm = include_bytes!("wasm/ref_is_null_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_trap_0() {
    let wasm = include_bytes!("wasm/memory_trap_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_trap_14() {
    let wasm = include_bytes!("wasm/memory_trap_14.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_0() {
    let wasm = include_bytes!("wasm/binary-leb128_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_1() {
    let wasm = include_bytes!("wasm/binary-leb128_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_2() {
    let wasm = include_bytes!("wasm/binary-leb128_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_3() {
    let wasm = include_bytes!("wasm/binary-leb128_3.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_4() {
    let wasm = include_bytes!("wasm/binary-leb128_4.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_5() {
    let wasm = include_bytes!("wasm/binary-leb128_5.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_6() {
    let wasm = include_bytes!("wasm/binary-leb128_6.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_7() {
    let wasm = include_bytes!("wasm/binary-leb128_7.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_8() {
    let wasm = include_bytes!("wasm/binary-leb128_8.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_9() {
    let wasm = include_bytes!("wasm/binary-leb128_9.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_10() {
    let wasm = include_bytes!("wasm/binary-leb128_10.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_11() {
    let wasm = include_bytes!("wasm/binary-leb128_11.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_12() {
    let wasm = include_bytes!("wasm/binary-leb128_12.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_13() {
    let wasm = include_bytes!("wasm/binary-leb128_13.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_14() {
    let wasm = include_bytes!("wasm/binary-leb128_14.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_15() {
    let wasm = include_bytes!("wasm/binary-leb128_15.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_16() {
    let wasm = include_bytes!("wasm/binary-leb128_16.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_17() {
    let wasm = include_bytes!("wasm/binary-leb128_17.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_18() {
    let wasm = include_bytes!("wasm/binary-leb128_18.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_19() {
    let wasm = include_bytes!("wasm/binary-leb128_19.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_20() {
    let wasm = include_bytes!("wasm/binary-leb128_20.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_21() {
    let wasm = include_bytes!("wasm/binary-leb128_21.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_22() {
    let wasm = include_bytes!("wasm/binary-leb128_22.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_23() {
    let wasm = include_bytes!("wasm/binary-leb128_23.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_24() {
    let wasm = include_bytes!("wasm/binary-leb128_24.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_81() {
    let wasm = include_bytes!("wasm/binary-leb128_81.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_83() {
    let wasm = include_bytes!("wasm/binary-leb128_83.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_84() {
    let wasm = include_bytes!("wasm/binary-leb128_84.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_85() {
    let wasm = include_bytes!("wasm/binary-leb128_85.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_86() {
    let wasm = include_bytes!("wasm/binary-leb128_86.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_87() {
    let wasm = include_bytes!("wasm/binary-leb128_87.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_88() {
    let wasm = include_bytes!("wasm/binary-leb128_88.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn binary_leb128_89() {
    let wasm = include_bytes!("wasm/binary-leb128_89.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn br_table_0() {
    let wasm = include_bytes!("wasm/br_table_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn select_0() {
    let wasm = include_bytes!("wasm/select_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn select_147() {
    let wasm = include_bytes!("wasm/select_147.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn f32_bitwise_0() {
    let wasm = include_bytes!("wasm/f32_bitwise_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_0() {
    let wasm = include_bytes!("wasm/memory_init_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_32() {
    let wasm = include_bytes!("wasm/memory_init_32.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_64() {
    let wasm = include_bytes!("wasm/memory_init_64.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_96() {
    let wasm = include_bytes!("wasm/memory_init_96.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_130() {
    let wasm = include_bytes!("wasm/memory_init_130.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_132() {
    let wasm = include_bytes!("wasm/memory_init_132.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_134() {
    let wasm = include_bytes!("wasm/memory_init_134.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_138() {
    let wasm = include_bytes!("wasm/memory_init_138.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_140() {
    let wasm = include_bytes!("wasm/memory_init_140.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_142() {
    let wasm = include_bytes!("wasm/memory_init_142.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_144() {
    let wasm = include_bytes!("wasm/memory_init_144.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_146() {
    let wasm = include_bytes!("wasm/memory_init_146.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_148() {
    let wasm = include_bytes!("wasm/memory_init_148.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_150() {
    let wasm = include_bytes!("wasm/memory_init_150.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_152() {
    let wasm = include_bytes!("wasm/memory_init_152.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_154() {
    let wasm = include_bytes!("wasm/memory_init_154.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_156() {
    let wasm = include_bytes!("wasm/memory_init_156.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_221() {
    let wasm = include_bytes!("wasm/memory_init_221.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_224() {
    let wasm = include_bytes!("wasm/memory_init_224.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_227() {
    let wasm = include_bytes!("wasm/memory_init_227.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_230() {
    let wasm = include_bytes!("wasm/memory_init_230.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_233() {
    let wasm = include_bytes!("wasm/memory_init_233.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_236() {
    let wasm = include_bytes!("wasm/memory_init_236.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn memory_init_239() {
    let wasm = include_bytes!("wasm/memory_init_239.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_0() {
    let wasm = include_bytes!("wasm/elem_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_1() {
    let wasm = include_bytes!("wasm/elem_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_2() {
    let wasm = include_bytes!("wasm/elem_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_3() {
    let wasm = include_bytes!("wasm/elem_3.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_4() {
    let wasm = include_bytes!("wasm/elem_4.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_5() {
    let wasm = include_bytes!("wasm/elem_5.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_6() {
    let wasm = include_bytes!("wasm/elem_6.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_7() {
    let wasm = include_bytes!("wasm/elem_7.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_8() {
    let wasm = include_bytes!("wasm/elem_8.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_11() {
    let wasm = include_bytes!("wasm/elem_11.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_16() {
    let wasm = include_bytes!("wasm/elem_16.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_17() {
    let wasm = include_bytes!("wasm/elem_17.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_18() {
    let wasm = include_bytes!("wasm/elem_18.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_19() {
    let wasm = include_bytes!("wasm/elem_19.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_20() {
    let wasm = include_bytes!("wasm/elem_20.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_21() {
    let wasm = include_bytes!("wasm/elem_21.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_22() {
    let wasm = include_bytes!("wasm/elem_22.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_23() {
    let wasm = include_bytes!("wasm/elem_23.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_24() {
    let wasm = include_bytes!("wasm/elem_24.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_25() {
    let wasm = include_bytes!("wasm/elem_25.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_38() {
    let wasm = include_bytes!("wasm/elem_38.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_40() {
    let wasm = include_bytes!("wasm/elem_40.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_63() {
    let wasm = include_bytes!("wasm/elem_63.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_65() {
    let wasm = include_bytes!("wasm/elem_65.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_67() {
    let wasm = include_bytes!("wasm/elem_67.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_72() {
    let wasm = include_bytes!("wasm/elem_72.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_76() {
    let wasm = include_bytes!("wasm/elem_76.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_84() {
    let wasm = include_bytes!("wasm/elem_84.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_92() {
    let wasm = include_bytes!("wasm/elem_92.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_95() {
    let wasm = include_bytes!("wasm/elem_95.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn elem_97() {
    let wasm = include_bytes!("wasm/elem_97.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_get_0() {
    let wasm = include_bytes!("wasm/table_get_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn f32_0() {
    let wasm = include_bytes!("wasm/f32_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn start_3() {
    let wasm = include_bytes!("wasm/start_3.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn start_9() {
    let wasm = include_bytes!("wasm/start_9.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn start_15() {
    let wasm = include_bytes!("wasm/start_15.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn start_16() {
    let wasm = include_bytes!("wasm/start_16.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn start_17() {
    let wasm = include_bytes!("wasm/start_17.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_0() {
    let wasm = include_bytes!("wasm/float_exprs_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_6() {
    let wasm = include_bytes!("wasm/float_exprs_6.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_17() {
    let wasm = include_bytes!("wasm/float_exprs_17.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_22() {
    let wasm = include_bytes!("wasm/float_exprs_22.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_27() {
    let wasm = include_bytes!("wasm/float_exprs_27.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_30() {
    let wasm = include_bytes!("wasm/float_exprs_30.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_39() {
    let wasm = include_bytes!("wasm/float_exprs_39.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_42() {
    let wasm = include_bytes!("wasm/float_exprs_42.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_51() {
    let wasm = include_bytes!("wasm/float_exprs_51.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_54() {
    let wasm = include_bytes!("wasm/float_exprs_54.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_57() {
    let wasm = include_bytes!("wasm/float_exprs_57.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_60() {
    let wasm = include_bytes!("wasm/float_exprs_60.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_63() {
    let wasm = include_bytes!("wasm/float_exprs_63.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_66() {
    let wasm = include_bytes!("wasm/float_exprs_66.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_69() {
    let wasm = include_bytes!("wasm/float_exprs_69.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_74() {
    let wasm = include_bytes!("wasm/float_exprs_74.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_83() {
    let wasm = include_bytes!("wasm/float_exprs_83.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_94() {
    let wasm = include_bytes!("wasm/float_exprs_94.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_105() {
    let wasm = include_bytes!("wasm/float_exprs_105.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_116() {
    let wasm = include_bytes!("wasm/float_exprs_116.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_127() {
    let wasm = include_bytes!("wasm/float_exprs_127.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_138() {
    let wasm = include_bytes!("wasm/float_exprs_138.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_149() {
    let wasm = include_bytes!("wasm/float_exprs_149.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_160() {
    let wasm = include_bytes!("wasm/float_exprs_160.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_177() {
    let wasm = include_bytes!("wasm/float_exprs_177.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_194() {
    let wasm = include_bytes!("wasm/float_exprs_194.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_205() {
    let wasm = include_bytes!("wasm/float_exprs_205.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_211() {
    let wasm = include_bytes!("wasm/float_exprs_211.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_222() {
    let wasm = include_bytes!("wasm/float_exprs_222.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_228() {
    let wasm = include_bytes!("wasm/float_exprs_228.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_241() {
    let wasm = include_bytes!("wasm/float_exprs_241.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_252() {
    let wasm = include_bytes!("wasm/float_exprs_252.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_263() {
    let wasm = include_bytes!("wasm/float_exprs_263.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_274() {
    let wasm = include_bytes!("wasm/float_exprs_274.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_285() {
    let wasm = include_bytes!("wasm/float_exprs_285.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_288() {
    let wasm = include_bytes!("wasm/float_exprs_288.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_294() {
    let wasm = include_bytes!("wasm/float_exprs_294.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_308() {
    let wasm = include_bytes!("wasm/float_exprs_308.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_319() {
    let wasm = include_bytes!("wasm/float_exprs_319.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_325() {
    let wasm = include_bytes!("wasm/float_exprs_325.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_358() {
    let wasm = include_bytes!("wasm/float_exprs_358.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_372() {
    let wasm = include_bytes!("wasm/float_exprs_372.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_386() {
    let wasm = include_bytes!("wasm/float_exprs_386.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_419() {
    let wasm = include_bytes!("wasm/float_exprs_419.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_452() {
    let wasm = include_bytes!("wasm/float_exprs_452.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_485() {
    let wasm = include_bytes!("wasm/float_exprs_485.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_518() {
    let wasm = include_bytes!("wasm/float_exprs_518.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_551() {
    let wasm = include_bytes!("wasm/float_exprs_551.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_554() {
    let wasm = include_bytes!("wasm/float_exprs_554.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_556() {
    let wasm = include_bytes!("wasm/float_exprs_556.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_558() {
    let wasm = include_bytes!("wasm/float_exprs_558.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_560() {
    let wasm = include_bytes!("wasm/float_exprs_560.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_562() {
    let wasm = include_bytes!("wasm/float_exprs_562.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_564() {
    let wasm = include_bytes!("wasm/float_exprs_564.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_568() {
    let wasm = include_bytes!("wasm/float_exprs_568.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_570() {
    let wasm = include_bytes!("wasm/float_exprs_570.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_573() {
    let wasm = include_bytes!("wasm/float_exprs_573.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_592() {
    let wasm = include_bytes!("wasm/float_exprs_592.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_603() {
    let wasm = include_bytes!("wasm/float_exprs_603.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_614() {
    let wasm = include_bytes!("wasm/float_exprs_614.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_620() {
    let wasm = include_bytes!("wasm/float_exprs_620.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_626() {
    let wasm = include_bytes!("wasm/float_exprs_626.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_629() {
    let wasm = include_bytes!("wasm/float_exprs_629.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_632() {
    let wasm = include_bytes!("wasm/float_exprs_632.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_641() {
    let wasm = include_bytes!("wasm/float_exprs_641.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_650() {
    let wasm = include_bytes!("wasm/float_exprs_650.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_659() {
    let wasm = include_bytes!("wasm/float_exprs_659.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_668() {
    let wasm = include_bytes!("wasm/float_exprs_668.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_679() {
    let wasm = include_bytes!("wasm/float_exprs_679.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_690() {
    let wasm = include_bytes!("wasm/float_exprs_690.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_701() {
    let wasm = include_bytes!("wasm/float_exprs_701.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_712() {
    let wasm = include_bytes!("wasm/float_exprs_712.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_723() {
    let wasm = include_bytes!("wasm/float_exprs_723.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_734() {
    let wasm = include_bytes!("wasm/float_exprs_734.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_745() {
    let wasm = include_bytes!("wasm/float_exprs_745.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_756() {
    let wasm = include_bytes!("wasm/float_exprs_756.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_759() {
    let wasm = include_bytes!("wasm/float_exprs_759.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_773() {
    let wasm = include_bytes!("wasm/float_exprs_773.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_776() {
    let wasm = include_bytes!("wasm/float_exprs_776.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_779() {
    let wasm = include_bytes!("wasm/float_exprs_779.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_794() {
    let wasm = include_bytes!("wasm/float_exprs_794.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_797() {
    let wasm = include_bytes!("wasm/float_exprs_797.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_800() {
    let wasm = include_bytes!("wasm/float_exprs_800.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_805() {
    let wasm = include_bytes!("wasm/float_exprs_805.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_814() {
    let wasm = include_bytes!("wasm/float_exprs_814.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_817() {
    let wasm = include_bytes!("wasm/float_exprs_817.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_820() {
    let wasm = include_bytes!("wasm/float_exprs_820.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_829() {
    let wasm = include_bytes!("wasm/float_exprs_829.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_863() {
    let wasm = include_bytes!("wasm/float_exprs_863.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_866() {
    let wasm = include_bytes!("wasm/float_exprs_866.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_873() {
    let wasm = include_bytes!("wasm/float_exprs_873.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_876() {
    let wasm = include_bytes!("wasm/float_exprs_876.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_879() {
    let wasm = include_bytes!("wasm/float_exprs_879.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_892() {
    let wasm = include_bytes!("wasm/float_exprs_892.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_894() {
    let wasm = include_bytes!("wasm/float_exprs_894.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_exprs_897() {
    let wasm = include_bytes!("wasm/float_exprs_897.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_memory_0() {
    let wasm = include_bytes!("wasm/float_memory_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_memory_15() {
    let wasm = include_bytes!("wasm/float_memory_15.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_memory_30() {
    let wasm = include_bytes!("wasm/float_memory_30.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_memory_45() {
    let wasm = include_bytes!("wasm/float_memory_45.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_memory_60() {
    let wasm = include_bytes!("wasm/float_memory_60.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn float_memory_75() {
    let wasm = include_bytes!("wasm/float_memory_75.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_size_0() {
    let wasm = include_bytes!("wasm/table_size_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_set_0() {
    let wasm = include_bytes!("wasm/table_set_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn f32_cmp_0() {
    let wasm = include_bytes!("wasm/f32_cmp_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn br_if_0() {
    let wasm = include_bytes!("wasm/br_if_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn ref_func_0() {
    let wasm = include_bytes!("wasm/ref_func_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn ref_func_2() {
    let wasm = include_bytes!("wasm/ref_func_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn ref_func_14() {
    let wasm = include_bytes!("wasm/ref_func_14.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn unreached_valid_0() {
    let wasm = include_bytes!("wasm/unreached-valid_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn unreached_valid_5() {
    let wasm = include_bytes!("wasm/unreached-valid_5.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_fill_0() {
    let wasm = include_bytes!("wasm/table_fill_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_0() {
    let wasm = include_bytes!("wasm/data_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_1() {
    let wasm = include_bytes!("wasm/data_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_2() {
    let wasm = include_bytes!("wasm/data_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_3() {
    let wasm = include_bytes!("wasm/data_3.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_4() {
    let wasm = include_bytes!("wasm/data_4.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_5() {
    let wasm = include_bytes!("wasm/data_5.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_6() {
    let wasm = include_bytes!("wasm/data_6.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_7() {
    let wasm = include_bytes!("wasm/data_7.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_8() {
    let wasm = include_bytes!("wasm/data_8.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_11() {
    let wasm = include_bytes!("wasm/data_11.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_12() {
    let wasm = include_bytes!("wasm/data_12.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_13() {
    let wasm = include_bytes!("wasm/data_13.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_14() {
    let wasm = include_bytes!("wasm/data_14.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_15() {
    let wasm = include_bytes!("wasm/data_15.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_16() {
    let wasm = include_bytes!("wasm/data_16.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_17() {
    let wasm = include_bytes!("wasm/data_17.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_18() {
    let wasm = include_bytes!("wasm/data_18.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_19() {
    let wasm = include_bytes!("wasm/data_19.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_20() {
    let wasm = include_bytes!("wasm/data_20.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_21() {
    let wasm = include_bytes!("wasm/data_21.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_22() {
    let wasm = include_bytes!("wasm/data_22.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_23() {
    let wasm = include_bytes!("wasm/data_23.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_24() {
    let wasm = include_bytes!("wasm/data_24.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_25() {
    let wasm = include_bytes!("wasm/data_25.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn data_26() {
    let wasm = include_bytes!("wasm/data_26.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_literals_0() {
    let wasm = include_bytes!("wasm/int_literals_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn address_0() {
    let wasm = include_bytes!("wasm/address_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn address_93() {
    let wasm = include_bytes!("wasm/address_93.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn address_220() {
    let wasm = include_bytes!("wasm/address_220.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn address_240() {
    let wasm = include_bytes!("wasm/address_240.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_grow_0() {
    let wasm = include_bytes!("wasm/table_grow_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_grow_22() {
    let wasm = include_bytes!("wasm/table_grow_22.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_grow_24() {
    let wasm = include_bytes!("wasm/table_grow_24.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_grow_30() {
    let wasm = include_bytes!("wasm/table_grow_30.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_grow_39() {
    let wasm = include_bytes!("wasm/table_grow_39.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn func_ptrs_0() {
    let wasm = include_bytes!("wasm/func_ptrs_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn func_ptrs_12() {
    let wasm = include_bytes!("wasm/func_ptrs_12.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn func_ptrs_33() {
    let wasm = include_bytes!("wasm/func_ptrs_33.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_0() {
    let wasm = include_bytes!("wasm/table_init_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_2() {
    let wasm = include_bytes!("wasm/table_init_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_34() {
    let wasm = include_bytes!("wasm/table_init_34.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_66() {
    let wasm = include_bytes!("wasm/table_init_66.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_98() {
    let wasm = include_bytes!("wasm/table_init_98.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_130() {
    let wasm = include_bytes!("wasm/table_init_130.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_162() {
    let wasm = include_bytes!("wasm/table_init_162.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_198() {
    let wasm = include_bytes!("wasm/table_init_198.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_200() {
    let wasm = include_bytes!("wasm/table_init_200.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_202() {
    let wasm = include_bytes!("wasm/table_init_202.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_204() {
    let wasm = include_bytes!("wasm/table_init_204.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_206() {
    let wasm = include_bytes!("wasm/table_init_206.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_208() {
    let wasm = include_bytes!("wasm/table_init_208.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_210() {
    let wasm = include_bytes!("wasm/table_init_210.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_212() {
    let wasm = include_bytes!("wasm/table_init_212.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_214() {
    let wasm = include_bytes!("wasm/table_init_214.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_216() {
    let wasm = include_bytes!("wasm/table_init_216.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_218() {
    let wasm = include_bytes!("wasm/table_init_218.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_220() {
    let wasm = include_bytes!("wasm/table_init_220.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_222() {
    let wasm = include_bytes!("wasm/table_init_222.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_224() {
    let wasm = include_bytes!("wasm/table_init_224.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_226() {
    let wasm = include_bytes!("wasm/table_init_226.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_228() {
    let wasm = include_bytes!("wasm/table_init_228.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_230() {
    let wasm = include_bytes!("wasm/table_init_230.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_232() {
    let wasm = include_bytes!("wasm/table_init_232.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_234() {
    let wasm = include_bytes!("wasm/table_init_234.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_236() {
    let wasm = include_bytes!("wasm/table_init_236.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_238() {
    let wasm = include_bytes!("wasm/table_init_238.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_303() {
    let wasm = include_bytes!("wasm/table_init_303.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_337() {
    let wasm = include_bytes!("wasm/table_init_337.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_371() {
    let wasm = include_bytes!("wasm/table_init_371.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_533() {
    let wasm = include_bytes!("wasm/table_init_533.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_695() {
    let wasm = include_bytes!("wasm/table_init_695.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_761() {
    let wasm = include_bytes!("wasm/table_init_761.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_init_779() {
    let wasm = include_bytes!("wasm/table_init_779.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn global_0() {
    let wasm = include_bytes!("wasm/global_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn global_61() {
    let wasm = include_bytes!("wasm/global_61.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn global_62() {
    let wasm = include_bytes!("wasm/global_62.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn global_81() {
    let wasm = include_bytes!("wasm/global_81.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn global_84() {
    let wasm = include_bytes!("wasm/global_84.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn custom_0() {
    let wasm = include_bytes!("wasm/custom_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn custom_1() {
    let wasm = include_bytes!("wasm/custom_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn custom_2() {
    let wasm = include_bytes!("wasm/custom_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_0() {
    let wasm = include_bytes!("wasm/int_exprs_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_5() {
    let wasm = include_bytes!("wasm/int_exprs_5.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_8() {
    let wasm = include_bytes!("wasm/int_exprs_8.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_10() {
    let wasm = include_bytes!("wasm/int_exprs_10.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_15() {
    let wasm = include_bytes!("wasm/int_exprs_15.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_20() {
    let wasm = include_bytes!("wasm/int_exprs_20.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_25() {
    let wasm = include_bytes!("wasm/int_exprs_25.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_30() {
    let wasm = include_bytes!("wasm/int_exprs_30.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_35() {
    let wasm = include_bytes!("wasm/int_exprs_35.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_40() {
    let wasm = include_bytes!("wasm/int_exprs_40.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_43() {
    let wasm = include_bytes!("wasm/int_exprs_43.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_46() {
    let wasm = include_bytes!("wasm/int_exprs_46.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_51() {
    let wasm = include_bytes!("wasm/int_exprs_51.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_60() {
    let wasm = include_bytes!("wasm/int_exprs_60.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_69() {
    let wasm = include_bytes!("wasm/int_exprs_69.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_78() {
    let wasm = include_bytes!("wasm/int_exprs_78.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_87() {
    let wasm = include_bytes!("wasm/int_exprs_87.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_96() {
    let wasm = include_bytes!("wasm/int_exprs_96.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn int_exprs_105() {
    let wasm = include_bytes!("wasm/int_exprs_105.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn f64_0() {
    let wasm = include_bytes!("wasm/f64_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn br_0() {
    let wasm = include_bytes!("wasm/br_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn nop_0() {
    let wasm = include_bytes!("wasm/nop_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_0() {
    let wasm = include_bytes!("wasm/table_0.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_1() {
    let wasm = include_bytes!("wasm/table_1.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_2() {
    let wasm = include_bytes!("wasm/table_2.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_3() {
    let wasm = include_bytes!("wasm/table_3.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_4() {
    let wasm = include_bytes!("wasm/table_4.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_5() {
    let wasm = include_bytes!("wasm/table_5.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_6() {
    let wasm = include_bytes!("wasm/table_6.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_7() {
    let wasm = include_bytes!("wasm/table_7.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}

#[test]
fn table_8() {
    let wasm = include_bytes!("wasm/table_8.wasm");
    Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
}
