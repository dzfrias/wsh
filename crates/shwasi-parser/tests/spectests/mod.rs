// This file was generated by xtask specgen

use shwasi_parser::{validate, Parser};
use test_log::test;

#[test]
fn forward_0() {
    let wasm = include_bytes!("wasm/forward_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_misc_0() {
    let wasm = include_bytes!("wasm/float_misc_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_0() {
    let wasm = include_bytes!("wasm/table_copy_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_2() {
    let wasm = include_bytes!("wasm/table_copy_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_64() {
    let wasm = include_bytes!("wasm/table_copy_64.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_126() {
    let wasm = include_bytes!("wasm/table_copy_126.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_188() {
    let wasm = include_bytes!("wasm/table_copy_188.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_250() {
    let wasm = include_bytes!("wasm/table_copy_250.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_312() {
    let wasm = include_bytes!("wasm/table_copy_312.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_374() {
    let wasm = include_bytes!("wasm/table_copy_374.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_436() {
    let wasm = include_bytes!("wasm/table_copy_436.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_498() {
    let wasm = include_bytes!("wasm/table_copy_498.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_560() {
    let wasm = include_bytes!("wasm/table_copy_560.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_622() {
    let wasm = include_bytes!("wasm/table_copy_622.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_684() {
    let wasm = include_bytes!("wasm/table_copy_684.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_746() {
    let wasm = include_bytes!("wasm/table_copy_746.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_808() {
    let wasm = include_bytes!("wasm/table_copy_808.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_870() {
    let wasm = include_bytes!("wasm/table_copy_870.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_932() {
    let wasm = include_bytes!("wasm/table_copy_932.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_994() {
    let wasm = include_bytes!("wasm/table_copy_994.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1056() {
    let wasm = include_bytes!("wasm/table_copy_1056.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1118() {
    let wasm = include_bytes!("wasm/table_copy_1118.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1120() {
    let wasm = include_bytes!("wasm/table_copy_1120.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1122() {
    let wasm = include_bytes!("wasm/table_copy_1122.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1124() {
    let wasm = include_bytes!("wasm/table_copy_1124.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1126() {
    let wasm = include_bytes!("wasm/table_copy_1126.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1128() {
    let wasm = include_bytes!("wasm/table_copy_1128.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1130() {
    let wasm = include_bytes!("wasm/table_copy_1130.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1132() {
    let wasm = include_bytes!("wasm/table_copy_1132.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1134() {
    let wasm = include_bytes!("wasm/table_copy_1134.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1136() {
    let wasm = include_bytes!("wasm/table_copy_1136.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1138() {
    let wasm = include_bytes!("wasm/table_copy_1138.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1140() {
    let wasm = include_bytes!("wasm/table_copy_1140.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1142() {
    let wasm = include_bytes!("wasm/table_copy_1142.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1144() {
    let wasm = include_bytes!("wasm/table_copy_1144.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1146() {
    let wasm = include_bytes!("wasm/table_copy_1146.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1148() {
    let wasm = include_bytes!("wasm/table_copy_1148.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1150() {
    let wasm = include_bytes!("wasm/table_copy_1150.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1152() {
    let wasm = include_bytes!("wasm/table_copy_1152.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1154() {
    let wasm = include_bytes!("wasm/table_copy_1154.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1156() {
    let wasm = include_bytes!("wasm/table_copy_1156.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1158() {
    let wasm = include_bytes!("wasm/table_copy_1158.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1160() {
    let wasm = include_bytes!("wasm/table_copy_1160.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1162() {
    let wasm = include_bytes!("wasm/table_copy_1162.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1196() {
    let wasm = include_bytes!("wasm/table_copy_1196.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1230() {
    let wasm = include_bytes!("wasm/table_copy_1230.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1264() {
    let wasm = include_bytes!("wasm/table_copy_1264.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1298() {
    let wasm = include_bytes!("wasm/table_copy_1298.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1332() {
    let wasm = include_bytes!("wasm/table_copy_1332.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1366() {
    let wasm = include_bytes!("wasm/table_copy_1366.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1400() {
    let wasm = include_bytes!("wasm/table_copy_1400.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1434() {
    let wasm = include_bytes!("wasm/table_copy_1434.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1468() {
    let wasm = include_bytes!("wasm/table_copy_1468.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_copy_1598() {
    let wasm = include_bytes!("wasm/table_copy_1598.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn ref_null_0() {
    let wasm = include_bytes!("wasm/ref_null_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_0() {
    let wasm = include_bytes!("wasm/memory_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_1() {
    let wasm = include_bytes!("wasm/memory_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_2() {
    let wasm = include_bytes!("wasm/memory_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_3() {
    let wasm = include_bytes!("wasm/memory_3.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_4() {
    let wasm = include_bytes!("wasm/memory_4.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_5() {
    let wasm = include_bytes!("wasm/memory_5.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_6() {
    let wasm = include_bytes!("wasm/memory_6.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_7() {
    let wasm = include_bytes!("wasm/memory_7.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_8() {
    let wasm = include_bytes!("wasm/memory_8.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_10() {
    let wasm = include_bytes!("wasm/memory_10.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_12() {
    let wasm = include_bytes!("wasm/memory_12.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_14() {
    let wasm = include_bytes!("wasm/memory_14.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_15() {
    let wasm = include_bytes!("wasm/memory_15.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_16() {
    let wasm = include_bytes!("wasm/memory_16.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_17() {
    let wasm = include_bytes!("wasm/memory_17.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_18() {
    let wasm = include_bytes!("wasm/memory_18.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_19() {
    let wasm = include_bytes!("wasm/memory_19.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_20() {
    let wasm = include_bytes!("wasm/memory_20.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_21() {
    let wasm = include_bytes!("wasm/memory_21.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_22() {
    let wasm = include_bytes!("wasm/memory_22.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_23() {
    let wasm = include_bytes!("wasm/memory_23.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_24() {
    let wasm = include_bytes!("wasm/memory_24.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_25() {
    let wasm = include_bytes!("wasm/memory_25.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_26() {
    let wasm = include_bytes!("wasm/memory_26.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_27() {
    let wasm = include_bytes!("wasm/memory_27.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_28() {
    let wasm = include_bytes!("wasm/memory_28.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_29() {
    let wasm = include_bytes!("wasm/memory_29.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_33() {
    let wasm = include_bytes!("wasm/memory_33.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn unwind_0() {
    let wasm = include_bytes!("wasm/unwind_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn call_0() {
    let wasm = include_bytes!("wasm/call_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn call_73() {
    let wasm = include_bytes!("wasm/call_73.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_74() {
    let wasm = include_bytes!("wasm/call_74.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_75() {
    let wasm = include_bytes!("wasm/call_75.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_76() {
    let wasm = include_bytes!("wasm/call_76.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_77() {
    let wasm = include_bytes!("wasm/call_77.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_78() {
    let wasm = include_bytes!("wasm/call_78.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_79() {
    let wasm = include_bytes!("wasm/call_79.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_80() {
    let wasm = include_bytes!("wasm/call_80.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_81() {
    let wasm = include_bytes!("wasm/call_81.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_82() {
    let wasm = include_bytes!("wasm/call_82.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_83() {
    let wasm = include_bytes!("wasm/call_83.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_84() {
    let wasm = include_bytes!("wasm/call_84.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_85() {
    let wasm = include_bytes!("wasm/call_85.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_86() {
    let wasm = include_bytes!("wasm/call_86.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_87() {
    let wasm = include_bytes!("wasm/call_87.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_88() {
    let wasm = include_bytes!("wasm/call_88.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_89() {
    let wasm = include_bytes!("wasm/call_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_90() {
    let wasm = include_bytes!("wasm/call_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_0() {
    let wasm = include_bytes!("wasm/local_get_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn local_get_20() {
    let wasm = include_bytes!("wasm/local_get_20.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_21() {
    let wasm = include_bytes!("wasm/local_get_21.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_22() {
    let wasm = include_bytes!("wasm/local_get_22.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_23() {
    let wasm = include_bytes!("wasm/local_get_23.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_24() {
    let wasm = include_bytes!("wasm/local_get_24.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_25() {
    let wasm = include_bytes!("wasm/local_get_25.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_26() {
    let wasm = include_bytes!("wasm/local_get_26.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_27() {
    let wasm = include_bytes!("wasm/local_get_27.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_28() {
    let wasm = include_bytes!("wasm/local_get_28.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_29() {
    let wasm = include_bytes!("wasm/local_get_29.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_30() {
    let wasm = include_bytes!("wasm/local_get_30.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_31() {
    let wasm = include_bytes!("wasm/local_get_31.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_32() {
    let wasm = include_bytes!("wasm/local_get_32.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_33() {
    let wasm = include_bytes!("wasm/local_get_33.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_34() {
    let wasm = include_bytes!("wasm/local_get_34.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_get_35() {
    let wasm = include_bytes!("wasm/local_get_35.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn fac_0() {
    let wasm = include_bytes!("wasm/fac_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_sub_0() {
    let wasm = include_bytes!("wasm/table-sub_0.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_sub_1() {
    let wasm = include_bytes!("wasm/table-sub_1.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_0() {
    let wasm = include_bytes!("wasm/func_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn func_90() {
    let wasm = include_bytes!("wasm/func_90.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn func_91() {
    let wasm = include_bytes!("wasm/func_91.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_93() {
    let wasm = include_bytes!("wasm/func_93.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn func_97() {
    let wasm = include_bytes!("wasm/func_97.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn func_112() {
    let wasm = include_bytes!("wasm/func_112.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_113() {
    let wasm = include_bytes!("wasm/func_113.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_114() {
    let wasm = include_bytes!("wasm/func_114.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_115() {
    let wasm = include_bytes!("wasm/func_115.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_116() {
    let wasm = include_bytes!("wasm/func_116.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_117() {
    let wasm = include_bytes!("wasm/func_117.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_118() {
    let wasm = include_bytes!("wasm/func_118.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_119() {
    let wasm = include_bytes!("wasm/func_119.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_120() {
    let wasm = include_bytes!("wasm/func_120.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_121() {
    let wasm = include_bytes!("wasm/func_121.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_122() {
    let wasm = include_bytes!("wasm/func_122.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_123() {
    let wasm = include_bytes!("wasm/func_123.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_124() {
    let wasm = include_bytes!("wasm/func_124.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_125() {
    let wasm = include_bytes!("wasm/func_125.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_126() {
    let wasm = include_bytes!("wasm/func_126.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_127() {
    let wasm = include_bytes!("wasm/func_127.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_128() {
    let wasm = include_bytes!("wasm/func_128.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_129() {
    let wasm = include_bytes!("wasm/func_129.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_130() {
    let wasm = include_bytes!("wasm/func_130.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_131() {
    let wasm = include_bytes!("wasm/func_131.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_132() {
    let wasm = include_bytes!("wasm/func_132.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_133() {
    let wasm = include_bytes!("wasm/func_133.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_134() {
    let wasm = include_bytes!("wasm/func_134.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_135() {
    let wasm = include_bytes!("wasm/func_135.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_136() {
    let wasm = include_bytes!("wasm/func_136.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_137() {
    let wasm = include_bytes!("wasm/func_137.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_138() {
    let wasm = include_bytes!("wasm/func_138.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_139() {
    let wasm = include_bytes!("wasm/func_139.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_140() {
    let wasm = include_bytes!("wasm/func_140.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_141() {
    let wasm = include_bytes!("wasm/func_141.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_142() {
    let wasm = include_bytes!("wasm/func_142.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_143() {
    let wasm = include_bytes!("wasm/func_143.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_144() {
    let wasm = include_bytes!("wasm/func_144.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_145() {
    let wasm = include_bytes!("wasm/func_145.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_146() {
    let wasm = include_bytes!("wasm/func_146.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_147() {
    let wasm = include_bytes!("wasm/func_147.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_148() {
    let wasm = include_bytes!("wasm/func_148.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_149() {
    let wasm = include_bytes!("wasm/func_149.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_150() {
    let wasm = include_bytes!("wasm/func_150.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_151() {
    let wasm = include_bytes!("wasm/func_151.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_152() {
    let wasm = include_bytes!("wasm/func_152.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_153() {
    let wasm = include_bytes!("wasm/func_153.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_154() {
    let wasm = include_bytes!("wasm/func_154.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_155() {
    let wasm = include_bytes!("wasm/func_155.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_156() {
    let wasm = include_bytes!("wasm/func_156.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_157() {
    let wasm = include_bytes!("wasm/func_157.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_158() {
    let wasm = include_bytes!("wasm/func_158.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_159() {
    let wasm = include_bytes!("wasm/func_159.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_0() {
    let wasm = include_bytes!("wasm/exports_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_1() {
    let wasm = include_bytes!("wasm/exports_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_2() {
    let wasm = include_bytes!("wasm/exports_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_3() {
    let wasm = include_bytes!("wasm/exports_3.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_4() {
    let wasm = include_bytes!("wasm/exports_4.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_5() {
    let wasm = include_bytes!("wasm/exports_5.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_6() {
    let wasm = include_bytes!("wasm/exports_6.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_7() {
    let wasm = include_bytes!("wasm/exports_7.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_8() {
    let wasm = include_bytes!("wasm/exports_8.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_9() {
    let wasm = include_bytes!("wasm/exports_9.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_10() {
    let wasm = include_bytes!("wasm/exports_10.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_11() {
    let wasm = include_bytes!("wasm/exports_11.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_14() {
    let wasm = include_bytes!("wasm/exports_14.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_15() {
    let wasm = include_bytes!("wasm/exports_15.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_17() {
    let wasm = include_bytes!("wasm/exports_17.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_21() {
    let wasm = include_bytes!("wasm/exports_21.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_22() {
    let wasm = include_bytes!("wasm/exports_22.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_23() {
    let wasm = include_bytes!("wasm/exports_23.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_24() {
    let wasm = include_bytes!("wasm/exports_24.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_25() {
    let wasm = include_bytes!("wasm/exports_25.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_26() {
    let wasm = include_bytes!("wasm/exports_26.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_27() {
    let wasm = include_bytes!("wasm/exports_27.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_28() {
    let wasm = include_bytes!("wasm/exports_28.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_29() {
    let wasm = include_bytes!("wasm/exports_29.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_30() {
    let wasm = include_bytes!("wasm/exports_30.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_31() {
    let wasm = include_bytes!("wasm/exports_31.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_32() {
    let wasm = include_bytes!("wasm/exports_32.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_33() {
    let wasm = include_bytes!("wasm/exports_33.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_34() {
    let wasm = include_bytes!("wasm/exports_34.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_35() {
    let wasm = include_bytes!("wasm/exports_35.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_36() {
    let wasm = include_bytes!("wasm/exports_36.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_37() {
    let wasm = include_bytes!("wasm/exports_37.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_38() {
    let wasm = include_bytes!("wasm/exports_38.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_41() {
    let wasm = include_bytes!("wasm/exports_41.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_42() {
    let wasm = include_bytes!("wasm/exports_42.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_44() {
    let wasm = include_bytes!("wasm/exports_44.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_45() {
    let wasm = include_bytes!("wasm/exports_45.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_46() {
    let wasm = include_bytes!("wasm/exports_46.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_47() {
    let wasm = include_bytes!("wasm/exports_47.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_48() {
    let wasm = include_bytes!("wasm/exports_48.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_49() {
    let wasm = include_bytes!("wasm/exports_49.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_50() {
    let wasm = include_bytes!("wasm/exports_50.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_51() {
    let wasm = include_bytes!("wasm/exports_51.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_52() {
    let wasm = include_bytes!("wasm/exports_52.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_53() {
    let wasm = include_bytes!("wasm/exports_53.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_54() {
    let wasm = include_bytes!("wasm/exports_54.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_55() {
    let wasm = include_bytes!("wasm/exports_55.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_56() {
    let wasm = include_bytes!("wasm/exports_56.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_57() {
    let wasm = include_bytes!("wasm/exports_57.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_58() {
    let wasm = include_bytes!("wasm/exports_58.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_59() {
    let wasm = include_bytes!("wasm/exports_59.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_60() {
    let wasm = include_bytes!("wasm/exports_60.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_61() {
    let wasm = include_bytes!("wasm/exports_61.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_62() {
    let wasm = include_bytes!("wasm/exports_62.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_63() {
    let wasm = include_bytes!("wasm/exports_63.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_64() {
    let wasm = include_bytes!("wasm/exports_64.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_65() {
    let wasm = include_bytes!("wasm/exports_65.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_66() {
    let wasm = include_bytes!("wasm/exports_66.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_67() {
    let wasm = include_bytes!("wasm/exports_67.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_68() {
    let wasm = include_bytes!("wasm/exports_68.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_69() {
    let wasm = include_bytes!("wasm/exports_69.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_70() {
    let wasm = include_bytes!("wasm/exports_70.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_71() {
    let wasm = include_bytes!("wasm/exports_71.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_72() {
    let wasm = include_bytes!("wasm/exports_72.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_73() {
    let wasm = include_bytes!("wasm/exports_73.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_74() {
    let wasm = include_bytes!("wasm/exports_74.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_75() {
    let wasm = include_bytes!("wasm/exports_75.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_76() {
    let wasm = include_bytes!("wasm/exports_76.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_77() {
    let wasm = include_bytes!("wasm/exports_77.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_78() {
    let wasm = include_bytes!("wasm/exports_78.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_79() {
    let wasm = include_bytes!("wasm/exports_79.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_80() {
    let wasm = include_bytes!("wasm/exports_80.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_81() {
    let wasm = include_bytes!("wasm/exports_81.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_82() {
    let wasm = include_bytes!("wasm/exports_82.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_83() {
    let wasm = include_bytes!("wasm/exports_83.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_84() {
    let wasm = include_bytes!("wasm/exports_84.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_85() {
    let wasm = include_bytes!("wasm/exports_85.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_86() {
    let wasm = include_bytes!("wasm/exports_86.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_87() {
    let wasm = include_bytes!("wasm/exports_87.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_88() {
    let wasm = include_bytes!("wasm/exports_88.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn exports_89() {
    let wasm = include_bytes!("wasm/exports_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_90() {
    let wasm = include_bytes!("wasm/exports_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_91() {
    let wasm = include_bytes!("wasm/exports_91.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_92() {
    let wasm = include_bytes!("wasm/exports_92.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_93() {
    let wasm = include_bytes!("wasm/exports_93.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_94() {
    let wasm = include_bytes!("wasm/exports_94.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn exports_95() {
    let wasm = include_bytes!("wasm/exports_95.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_0() {
    let wasm = include_bytes!("wasm/local_set_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn local_set_20() {
    let wasm = include_bytes!("wasm/local_set_20.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_21() {
    let wasm = include_bytes!("wasm/local_set_21.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_22() {
    let wasm = include_bytes!("wasm/local_set_22.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_23() {
    let wasm = include_bytes!("wasm/local_set_23.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_24() {
    let wasm = include_bytes!("wasm/local_set_24.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_25() {
    let wasm = include_bytes!("wasm/local_set_25.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_26() {
    let wasm = include_bytes!("wasm/local_set_26.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_27() {
    let wasm = include_bytes!("wasm/local_set_27.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_28() {
    let wasm = include_bytes!("wasm/local_set_28.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_29() {
    let wasm = include_bytes!("wasm/local_set_29.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_30() {
    let wasm = include_bytes!("wasm/local_set_30.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_31() {
    let wasm = include_bytes!("wasm/local_set_31.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_32() {
    let wasm = include_bytes!("wasm/local_set_32.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_33() {
    let wasm = include_bytes!("wasm/local_set_33.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_34() {
    let wasm = include_bytes!("wasm/local_set_34.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_35() {
    let wasm = include_bytes!("wasm/local_set_35.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_36() {
    let wasm = include_bytes!("wasm/local_set_36.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_37() {
    let wasm = include_bytes!("wasm/local_set_37.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_38() {
    let wasm = include_bytes!("wasm/local_set_38.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_39() {
    let wasm = include_bytes!("wasm/local_set_39.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_40() {
    let wasm = include_bytes!("wasm/local_set_40.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_41() {
    let wasm = include_bytes!("wasm/local_set_41.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_42() {
    let wasm = include_bytes!("wasm/local_set_42.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_43() {
    let wasm = include_bytes!("wasm/local_set_43.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_44() {
    let wasm = include_bytes!("wasm/local_set_44.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_45() {
    let wasm = include_bytes!("wasm/local_set_45.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_46() {
    let wasm = include_bytes!("wasm/local_set_46.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_47() {
    let wasm = include_bytes!("wasm/local_set_47.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_48() {
    let wasm = include_bytes!("wasm/local_set_48.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_49() {
    let wasm = include_bytes!("wasm/local_set_49.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_50() {
    let wasm = include_bytes!("wasm/local_set_50.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_51() {
    let wasm = include_bytes!("wasm/local_set_51.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_set_52() {
    let wasm = include_bytes!("wasm/local_set_52.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn inline_module_0() {
    let wasm = include_bytes!("wasm/inline-module_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_0() {
    let wasm = include_bytes!("wasm/linking_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_2() {
    let wasm = include_bytes!("wasm/linking_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_7() {
    let wasm = include_bytes!("wasm/linking_7.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_11() {
    let wasm = include_bytes!("wasm/linking_11.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_13() {
    let wasm = include_bytes!("wasm/linking_13.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_31() {
    let wasm = include_bytes!("wasm/linking_31.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_33() {
    let wasm = include_bytes!("wasm/linking_33.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_38() {
    let wasm = include_bytes!("wasm/linking_38.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_40() {
    let wasm = include_bytes!("wasm/linking_40.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_59() {
    let wasm = include_bytes!("wasm/linking_59.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_80() {
    let wasm = include_bytes!("wasm/linking_80.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_81() {
    let wasm = include_bytes!("wasm/linking_81.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_83() {
    let wasm = include_bytes!("wasm/linking_83.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_93() {
    let wasm = include_bytes!("wasm/linking_93.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_95() {
    let wasm = include_bytes!("wasm/linking_95.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_98() {
    let wasm = include_bytes!("wasm/linking_98.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_100() {
    let wasm = include_bytes!("wasm/linking_100.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_104() {
    let wasm = include_bytes!("wasm/linking_104.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_109() {
    let wasm = include_bytes!("wasm/linking_109.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_111() {
    let wasm = include_bytes!("wasm/linking_111.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn linking_127() {
    let wasm = include_bytes!("wasm/linking_127.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_literals_0() {
    let wasm = include_bytes!("wasm/float_literals_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_literals_83() {
    let wasm = include_bytes!("wasm/float_literals_83.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_0() {
    let wasm = include_bytes!("wasm/align_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_1() {
    let wasm = include_bytes!("wasm/align_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_2() {
    let wasm = include_bytes!("wasm/align_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_3() {
    let wasm = include_bytes!("wasm/align_3.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_4() {
    let wasm = include_bytes!("wasm/align_4.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_5() {
    let wasm = include_bytes!("wasm/align_5.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_6() {
    let wasm = include_bytes!("wasm/align_6.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_7() {
    let wasm = include_bytes!("wasm/align_7.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_8() {
    let wasm = include_bytes!("wasm/align_8.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_9() {
    let wasm = include_bytes!("wasm/align_9.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_10() {
    let wasm = include_bytes!("wasm/align_10.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_11() {
    let wasm = include_bytes!("wasm/align_11.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_12() {
    let wasm = include_bytes!("wasm/align_12.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_13() {
    let wasm = include_bytes!("wasm/align_13.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_14() {
    let wasm = include_bytes!("wasm/align_14.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_15() {
    let wasm = include_bytes!("wasm/align_15.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_16() {
    let wasm = include_bytes!("wasm/align_16.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_17() {
    let wasm = include_bytes!("wasm/align_17.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_18() {
    let wasm = include_bytes!("wasm/align_18.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_19() {
    let wasm = include_bytes!("wasm/align_19.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_20() {
    let wasm = include_bytes!("wasm/align_20.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_21() {
    let wasm = include_bytes!("wasm/align_21.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_22() {
    let wasm = include_bytes!("wasm/align_22.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_69() {
    let wasm = include_bytes!("wasm/align_69.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_70() {
    let wasm = include_bytes!("wasm/align_70.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_71() {
    let wasm = include_bytes!("wasm/align_71.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_72() {
    let wasm = include_bytes!("wasm/align_72.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_73() {
    let wasm = include_bytes!("wasm/align_73.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_74() {
    let wasm = include_bytes!("wasm/align_74.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_75() {
    let wasm = include_bytes!("wasm/align_75.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_76() {
    let wasm = include_bytes!("wasm/align_76.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_77() {
    let wasm = include_bytes!("wasm/align_77.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_78() {
    let wasm = include_bytes!("wasm/align_78.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_79() {
    let wasm = include_bytes!("wasm/align_79.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_80() {
    let wasm = include_bytes!("wasm/align_80.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_81() {
    let wasm = include_bytes!("wasm/align_81.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_82() {
    let wasm = include_bytes!("wasm/align_82.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_83() {
    let wasm = include_bytes!("wasm/align_83.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_84() {
    let wasm = include_bytes!("wasm/align_84.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_85() {
    let wasm = include_bytes!("wasm/align_85.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_86() {
    let wasm = include_bytes!("wasm/align_86.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_87() {
    let wasm = include_bytes!("wasm/align_87.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_88() {
    let wasm = include_bytes!("wasm/align_88.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_89() {
    let wasm = include_bytes!("wasm/align_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_90() {
    let wasm = include_bytes!("wasm/align_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_91() {
    let wasm = include_bytes!("wasm/align_91.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_92() {
    let wasm = include_bytes!("wasm/align_92.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_93() {
    let wasm = include_bytes!("wasm/align_93.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_94() {
    let wasm = include_bytes!("wasm/align_94.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_95() {
    let wasm = include_bytes!("wasm/align_95.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_96() {
    let wasm = include_bytes!("wasm/align_96.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_97() {
    let wasm = include_bytes!("wasm/align_97.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_98() {
    let wasm = include_bytes!("wasm/align_98.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_99() {
    let wasm = include_bytes!("wasm/align_99.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_100() {
    let wasm = include_bytes!("wasm/align_100.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_101() {
    let wasm = include_bytes!("wasm/align_101.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_102() {
    let wasm = include_bytes!("wasm/align_102.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_103() {
    let wasm = include_bytes!("wasm/align_103.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_104() {
    let wasm = include_bytes!("wasm/align_104.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_105() {
    let wasm = include_bytes!("wasm/align_105.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn align_106() {
    let wasm = include_bytes!("wasm/align_106.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn align_153() {
    let wasm = include_bytes!("wasm/align_153.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn if_0() {
    let wasm = include_bytes!("wasm/if_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn if_135() {
    let wasm = include_bytes!("wasm/if_135.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_136() {
    let wasm = include_bytes!("wasm/if_136.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_137() {
    let wasm = include_bytes!("wasm/if_137.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_138() {
    let wasm = include_bytes!("wasm/if_138.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_139() {
    let wasm = include_bytes!("wasm/if_139.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_140() {
    let wasm = include_bytes!("wasm/if_140.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_141() {
    let wasm = include_bytes!("wasm/if_141.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_142() {
    let wasm = include_bytes!("wasm/if_142.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_143() {
    let wasm = include_bytes!("wasm/if_143.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_144() {
    let wasm = include_bytes!("wasm/if_144.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_145() {
    let wasm = include_bytes!("wasm/if_145.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_146() {
    let wasm = include_bytes!("wasm/if_146.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_147() {
    let wasm = include_bytes!("wasm/if_147.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_148() {
    let wasm = include_bytes!("wasm/if_148.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_149() {
    let wasm = include_bytes!("wasm/if_149.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_150() {
    let wasm = include_bytes!("wasm/if_150.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_151() {
    let wasm = include_bytes!("wasm/if_151.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_152() {
    let wasm = include_bytes!("wasm/if_152.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_153() {
    let wasm = include_bytes!("wasm/if_153.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_154() {
    let wasm = include_bytes!("wasm/if_154.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_155() {
    let wasm = include_bytes!("wasm/if_155.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_156() {
    let wasm = include_bytes!("wasm/if_156.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_157() {
    let wasm = include_bytes!("wasm/if_157.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_158() {
    let wasm = include_bytes!("wasm/if_158.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_159() {
    let wasm = include_bytes!("wasm/if_159.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_160() {
    let wasm = include_bytes!("wasm/if_160.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_161() {
    let wasm = include_bytes!("wasm/if_161.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_162() {
    let wasm = include_bytes!("wasm/if_162.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_163() {
    let wasm = include_bytes!("wasm/if_163.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_164() {
    let wasm = include_bytes!("wasm/if_164.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_165() {
    let wasm = include_bytes!("wasm/if_165.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_166() {
    let wasm = include_bytes!("wasm/if_166.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_167() {
    let wasm = include_bytes!("wasm/if_167.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_168() {
    let wasm = include_bytes!("wasm/if_168.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_169() {
    let wasm = include_bytes!("wasm/if_169.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_170() {
    let wasm = include_bytes!("wasm/if_170.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_171() {
    let wasm = include_bytes!("wasm/if_171.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_172() {
    let wasm = include_bytes!("wasm/if_172.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_173() {
    let wasm = include_bytes!("wasm/if_173.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_174() {
    let wasm = include_bytes!("wasm/if_174.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_175() {
    let wasm = include_bytes!("wasm/if_175.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_176() {
    let wasm = include_bytes!("wasm/if_176.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_177() {
    let wasm = include_bytes!("wasm/if_177.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_178() {
    let wasm = include_bytes!("wasm/if_178.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_179() {
    let wasm = include_bytes!("wasm/if_179.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_180() {
    let wasm = include_bytes!("wasm/if_180.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_181() {
    let wasm = include_bytes!("wasm/if_181.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_182() {
    let wasm = include_bytes!("wasm/if_182.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_183() {
    let wasm = include_bytes!("wasm/if_183.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_184() {
    let wasm = include_bytes!("wasm/if_184.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_185() {
    let wasm = include_bytes!("wasm/if_185.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_186() {
    let wasm = include_bytes!("wasm/if_186.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_187() {
    let wasm = include_bytes!("wasm/if_187.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_188() {
    let wasm = include_bytes!("wasm/if_188.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_189() {
    let wasm = include_bytes!("wasm/if_189.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_190() {
    let wasm = include_bytes!("wasm/if_190.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_191() {
    let wasm = include_bytes!("wasm/if_191.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_192() {
    let wasm = include_bytes!("wasm/if_192.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_193() {
    let wasm = include_bytes!("wasm/if_193.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_194() {
    let wasm = include_bytes!("wasm/if_194.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_195() {
    let wasm = include_bytes!("wasm/if_195.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_196() {
    let wasm = include_bytes!("wasm/if_196.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_197() {
    let wasm = include_bytes!("wasm/if_197.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_198() {
    let wasm = include_bytes!("wasm/if_198.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_199() {
    let wasm = include_bytes!("wasm/if_199.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_200() {
    let wasm = include_bytes!("wasm/if_200.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_201() {
    let wasm = include_bytes!("wasm/if_201.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_202() {
    let wasm = include_bytes!("wasm/if_202.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_203() {
    let wasm = include_bytes!("wasm/if_203.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_204() {
    let wasm = include_bytes!("wasm/if_204.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_205() {
    let wasm = include_bytes!("wasm/if_205.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_206() {
    let wasm = include_bytes!("wasm/if_206.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_207() {
    let wasm = include_bytes!("wasm/if_207.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_208() {
    let wasm = include_bytes!("wasm/if_208.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_209() {
    let wasm = include_bytes!("wasm/if_209.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_210() {
    let wasm = include_bytes!("wasm/if_210.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_211() {
    let wasm = include_bytes!("wasm/if_211.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_212() {
    let wasm = include_bytes!("wasm/if_212.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_213() {
    let wasm = include_bytes!("wasm/if_213.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_214() {
    let wasm = include_bytes!("wasm/if_214.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_215() {
    let wasm = include_bytes!("wasm/if_215.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_216() {
    let wasm = include_bytes!("wasm/if_216.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_217() {
    let wasm = include_bytes!("wasm/if_217.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_218() {
    let wasm = include_bytes!("wasm/if_218.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_219() {
    let wasm = include_bytes!("wasm/if_219.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_220() {
    let wasm = include_bytes!("wasm/if_220.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_221() {
    let wasm = include_bytes!("wasm/if_221.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_222() {
    let wasm = include_bytes!("wasm/if_222.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_223() {
    let wasm = include_bytes!("wasm/if_223.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_224() {
    let wasm = include_bytes!("wasm/if_224.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_225() {
    let wasm = include_bytes!("wasm/if_225.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn if_226() {
    let wasm = include_bytes!("wasm/if_226.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn const_0() {
    let wasm = include_bytes!("wasm/const_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_1() {
    let wasm = include_bytes!("wasm/const_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_6() {
    let wasm = include_bytes!("wasm/const_6.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_7() {
    let wasm = include_bytes!("wasm/const_7.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_12() {
    let wasm = include_bytes!("wasm/const_12.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_13() {
    let wasm = include_bytes!("wasm/const_13.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_14() {
    let wasm = include_bytes!("wasm/const_14.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_15() {
    let wasm = include_bytes!("wasm/const_15.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_16() {
    let wasm = include_bytes!("wasm/const_16.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_17() {
    let wasm = include_bytes!("wasm/const_17.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_18() {
    let wasm = include_bytes!("wasm/const_18.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_19() {
    let wasm = include_bytes!("wasm/const_19.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_20() {
    let wasm = include_bytes!("wasm/const_20.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_21() {
    let wasm = include_bytes!("wasm/const_21.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_22() {
    let wasm = include_bytes!("wasm/const_22.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_23() {
    let wasm = include_bytes!("wasm/const_23.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_24() {
    let wasm = include_bytes!("wasm/const_24.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_25() {
    let wasm = include_bytes!("wasm/const_25.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_26() {
    let wasm = include_bytes!("wasm/const_26.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_27() {
    let wasm = include_bytes!("wasm/const_27.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_28() {
    let wasm = include_bytes!("wasm/const_28.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_29() {
    let wasm = include_bytes!("wasm/const_29.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_30() {
    let wasm = include_bytes!("wasm/const_30.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_31() {
    let wasm = include_bytes!("wasm/const_31.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_32() {
    let wasm = include_bytes!("wasm/const_32.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_33() {
    let wasm = include_bytes!("wasm/const_33.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_34() {
    let wasm = include_bytes!("wasm/const_34.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_35() {
    let wasm = include_bytes!("wasm/const_35.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_55() {
    let wasm = include_bytes!("wasm/const_55.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_56() {
    let wasm = include_bytes!("wasm/const_56.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_57() {
    let wasm = include_bytes!("wasm/const_57.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_58() {
    let wasm = include_bytes!("wasm/const_58.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_59() {
    let wasm = include_bytes!("wasm/const_59.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_60() {
    let wasm = include_bytes!("wasm/const_60.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_61() {
    let wasm = include_bytes!("wasm/const_61.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_62() {
    let wasm = include_bytes!("wasm/const_62.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_63() {
    let wasm = include_bytes!("wasm/const_63.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_64() {
    let wasm = include_bytes!("wasm/const_64.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_65() {
    let wasm = include_bytes!("wasm/const_65.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_66() {
    let wasm = include_bytes!("wasm/const_66.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_67() {
    let wasm = include_bytes!("wasm/const_67.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_68() {
    let wasm = include_bytes!("wasm/const_68.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_69() {
    let wasm = include_bytes!("wasm/const_69.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_70() {
    let wasm = include_bytes!("wasm/const_70.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_71() {
    let wasm = include_bytes!("wasm/const_71.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_72() {
    let wasm = include_bytes!("wasm/const_72.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_73() {
    let wasm = include_bytes!("wasm/const_73.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_74() {
    let wasm = include_bytes!("wasm/const_74.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_75() {
    let wasm = include_bytes!("wasm/const_75.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_76() {
    let wasm = include_bytes!("wasm/const_76.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_77() {
    let wasm = include_bytes!("wasm/const_77.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_78() {
    let wasm = include_bytes!("wasm/const_78.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_79() {
    let wasm = include_bytes!("wasm/const_79.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_80() {
    let wasm = include_bytes!("wasm/const_80.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_81() {
    let wasm = include_bytes!("wasm/const_81.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_82() {
    let wasm = include_bytes!("wasm/const_82.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_83() {
    let wasm = include_bytes!("wasm/const_83.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_84() {
    let wasm = include_bytes!("wasm/const_84.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_85() {
    let wasm = include_bytes!("wasm/const_85.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_86() {
    let wasm = include_bytes!("wasm/const_86.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_87() {
    let wasm = include_bytes!("wasm/const_87.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_88() {
    let wasm = include_bytes!("wasm/const_88.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_89() {
    let wasm = include_bytes!("wasm/const_89.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_90() {
    let wasm = include_bytes!("wasm/const_90.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_110() {
    let wasm = include_bytes!("wasm/const_110.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_111() {
    let wasm = include_bytes!("wasm/const_111.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_114() {
    let wasm = include_bytes!("wasm/const_114.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_115() {
    let wasm = include_bytes!("wasm/const_115.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_118() {
    let wasm = include_bytes!("wasm/const_118.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_119() {
    let wasm = include_bytes!("wasm/const_119.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_122() {
    let wasm = include_bytes!("wasm/const_122.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_123() {
    let wasm = include_bytes!("wasm/const_123.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_126() {
    let wasm = include_bytes!("wasm/const_126.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_127() {
    let wasm = include_bytes!("wasm/const_127.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_128() {
    let wasm = include_bytes!("wasm/const_128.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_129() {
    let wasm = include_bytes!("wasm/const_129.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_130() {
    let wasm = include_bytes!("wasm/const_130.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_131() {
    let wasm = include_bytes!("wasm/const_131.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_132() {
    let wasm = include_bytes!("wasm/const_132.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_133() {
    let wasm = include_bytes!("wasm/const_133.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_134() {
    let wasm = include_bytes!("wasm/const_134.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_135() {
    let wasm = include_bytes!("wasm/const_135.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_140() {
    let wasm = include_bytes!("wasm/const_140.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_141() {
    let wasm = include_bytes!("wasm/const_141.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_144() {
    let wasm = include_bytes!("wasm/const_144.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_145() {
    let wasm = include_bytes!("wasm/const_145.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_148() {
    let wasm = include_bytes!("wasm/const_148.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_149() {
    let wasm = include_bytes!("wasm/const_149.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_150() {
    let wasm = include_bytes!("wasm/const_150.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_151() {
    let wasm = include_bytes!("wasm/const_151.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_152() {
    let wasm = include_bytes!("wasm/const_152.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_153() {
    let wasm = include_bytes!("wasm/const_153.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_154() {
    let wasm = include_bytes!("wasm/const_154.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_155() {
    let wasm = include_bytes!("wasm/const_155.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_160() {
    let wasm = include_bytes!("wasm/const_160.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_161() {
    let wasm = include_bytes!("wasm/const_161.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_164() {
    let wasm = include_bytes!("wasm/const_164.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_165() {
    let wasm = include_bytes!("wasm/const_165.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_168() {
    let wasm = include_bytes!("wasm/const_168.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_169() {
    let wasm = include_bytes!("wasm/const_169.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_170() {
    let wasm = include_bytes!("wasm/const_170.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_171() {
    let wasm = include_bytes!("wasm/const_171.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_178() {
    let wasm = include_bytes!("wasm/const_178.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_180() {
    let wasm = include_bytes!("wasm/const_180.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_182() {
    let wasm = include_bytes!("wasm/const_182.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_184() {
    let wasm = include_bytes!("wasm/const_184.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_186() {
    let wasm = include_bytes!("wasm/const_186.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_188() {
    let wasm = include_bytes!("wasm/const_188.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_190() {
    let wasm = include_bytes!("wasm/const_190.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_192() {
    let wasm = include_bytes!("wasm/const_192.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_194() {
    let wasm = include_bytes!("wasm/const_194.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_196() {
    let wasm = include_bytes!("wasm/const_196.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_198() {
    let wasm = include_bytes!("wasm/const_198.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_200() {
    let wasm = include_bytes!("wasm/const_200.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_202() {
    let wasm = include_bytes!("wasm/const_202.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_204() {
    let wasm = include_bytes!("wasm/const_204.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_206() {
    let wasm = include_bytes!("wasm/const_206.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_208() {
    let wasm = include_bytes!("wasm/const_208.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_210() {
    let wasm = include_bytes!("wasm/const_210.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_212() {
    let wasm = include_bytes!("wasm/const_212.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_214() {
    let wasm = include_bytes!("wasm/const_214.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_216() {
    let wasm = include_bytes!("wasm/const_216.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_218() {
    let wasm = include_bytes!("wasm/const_218.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_220() {
    let wasm = include_bytes!("wasm/const_220.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_222() {
    let wasm = include_bytes!("wasm/const_222.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_224() {
    let wasm = include_bytes!("wasm/const_224.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_226() {
    let wasm = include_bytes!("wasm/const_226.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_228() {
    let wasm = include_bytes!("wasm/const_228.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_230() {
    let wasm = include_bytes!("wasm/const_230.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_232() {
    let wasm = include_bytes!("wasm/const_232.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_234() {
    let wasm = include_bytes!("wasm/const_234.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_236() {
    let wasm = include_bytes!("wasm/const_236.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_238() {
    let wasm = include_bytes!("wasm/const_238.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_240() {
    let wasm = include_bytes!("wasm/const_240.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_242() {
    let wasm = include_bytes!("wasm/const_242.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_244() {
    let wasm = include_bytes!("wasm/const_244.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_246() {
    let wasm = include_bytes!("wasm/const_246.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_248() {
    let wasm = include_bytes!("wasm/const_248.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_250() {
    let wasm = include_bytes!("wasm/const_250.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_252() {
    let wasm = include_bytes!("wasm/const_252.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_254() {
    let wasm = include_bytes!("wasm/const_254.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_256() {
    let wasm = include_bytes!("wasm/const_256.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_258() {
    let wasm = include_bytes!("wasm/const_258.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_260() {
    let wasm = include_bytes!("wasm/const_260.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_262() {
    let wasm = include_bytes!("wasm/const_262.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_264() {
    let wasm = include_bytes!("wasm/const_264.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_266() {
    let wasm = include_bytes!("wasm/const_266.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_268() {
    let wasm = include_bytes!("wasm/const_268.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_270() {
    let wasm = include_bytes!("wasm/const_270.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_272() {
    let wasm = include_bytes!("wasm/const_272.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_274() {
    let wasm = include_bytes!("wasm/const_274.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_276() {
    let wasm = include_bytes!("wasm/const_276.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_278() {
    let wasm = include_bytes!("wasm/const_278.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_280() {
    let wasm = include_bytes!("wasm/const_280.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_282() {
    let wasm = include_bytes!("wasm/const_282.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_284() {
    let wasm = include_bytes!("wasm/const_284.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_286() {
    let wasm = include_bytes!("wasm/const_286.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_288() {
    let wasm = include_bytes!("wasm/const_288.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_290() {
    let wasm = include_bytes!("wasm/const_290.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_292() {
    let wasm = include_bytes!("wasm/const_292.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_294() {
    let wasm = include_bytes!("wasm/const_294.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_296() {
    let wasm = include_bytes!("wasm/const_296.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_298() {
    let wasm = include_bytes!("wasm/const_298.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_300() {
    let wasm = include_bytes!("wasm/const_300.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_302() {
    let wasm = include_bytes!("wasm/const_302.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_304() {
    let wasm = include_bytes!("wasm/const_304.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_306() {
    let wasm = include_bytes!("wasm/const_306.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_308() {
    let wasm = include_bytes!("wasm/const_308.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_310() {
    let wasm = include_bytes!("wasm/const_310.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_312() {
    let wasm = include_bytes!("wasm/const_312.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_314() {
    let wasm = include_bytes!("wasm/const_314.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_316() {
    let wasm = include_bytes!("wasm/const_316.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_318() {
    let wasm = include_bytes!("wasm/const_318.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_320() {
    let wasm = include_bytes!("wasm/const_320.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_322() {
    let wasm = include_bytes!("wasm/const_322.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_324() {
    let wasm = include_bytes!("wasm/const_324.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_326() {
    let wasm = include_bytes!("wasm/const_326.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_328() {
    let wasm = include_bytes!("wasm/const_328.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_330() {
    let wasm = include_bytes!("wasm/const_330.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_332() {
    let wasm = include_bytes!("wasm/const_332.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_334() {
    let wasm = include_bytes!("wasm/const_334.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_336() {
    let wasm = include_bytes!("wasm/const_336.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_338() {
    let wasm = include_bytes!("wasm/const_338.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_340() {
    let wasm = include_bytes!("wasm/const_340.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_342() {
    let wasm = include_bytes!("wasm/const_342.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_344() {
    let wasm = include_bytes!("wasm/const_344.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_346() {
    let wasm = include_bytes!("wasm/const_346.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_348() {
    let wasm = include_bytes!("wasm/const_348.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_350() {
    let wasm = include_bytes!("wasm/const_350.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_352() {
    let wasm = include_bytes!("wasm/const_352.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_354() {
    let wasm = include_bytes!("wasm/const_354.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_356() {
    let wasm = include_bytes!("wasm/const_356.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_358() {
    let wasm = include_bytes!("wasm/const_358.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_360() {
    let wasm = include_bytes!("wasm/const_360.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_362() {
    let wasm = include_bytes!("wasm/const_362.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_364() {
    let wasm = include_bytes!("wasm/const_364.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_366() {
    let wasm = include_bytes!("wasm/const_366.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_368() {
    let wasm = include_bytes!("wasm/const_368.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_370() {
    let wasm = include_bytes!("wasm/const_370.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_372() {
    let wasm = include_bytes!("wasm/const_372.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_374() {
    let wasm = include_bytes!("wasm/const_374.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_376() {
    let wasm = include_bytes!("wasm/const_376.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_378() {
    let wasm = include_bytes!("wasm/const_378.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_380() {
    let wasm = include_bytes!("wasm/const_380.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_382() {
    let wasm = include_bytes!("wasm/const_382.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_384() {
    let wasm = include_bytes!("wasm/const_384.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_386() {
    let wasm = include_bytes!("wasm/const_386.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_388() {
    let wasm = include_bytes!("wasm/const_388.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_390() {
    let wasm = include_bytes!("wasm/const_390.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_392() {
    let wasm = include_bytes!("wasm/const_392.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_394() {
    let wasm = include_bytes!("wasm/const_394.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_396() {
    let wasm = include_bytes!("wasm/const_396.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_398() {
    let wasm = include_bytes!("wasm/const_398.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_400() {
    let wasm = include_bytes!("wasm/const_400.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_402() {
    let wasm = include_bytes!("wasm/const_402.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_404() {
    let wasm = include_bytes!("wasm/const_404.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_406() {
    let wasm = include_bytes!("wasm/const_406.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_408() {
    let wasm = include_bytes!("wasm/const_408.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_410() {
    let wasm = include_bytes!("wasm/const_410.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_412() {
    let wasm = include_bytes!("wasm/const_412.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_414() {
    let wasm = include_bytes!("wasm/const_414.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_416() {
    let wasm = include_bytes!("wasm/const_416.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_418() {
    let wasm = include_bytes!("wasm/const_418.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_420() {
    let wasm = include_bytes!("wasm/const_420.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_422() {
    let wasm = include_bytes!("wasm/const_422.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_424() {
    let wasm = include_bytes!("wasm/const_424.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_426() {
    let wasm = include_bytes!("wasm/const_426.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_428() {
    let wasm = include_bytes!("wasm/const_428.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_430() {
    let wasm = include_bytes!("wasm/const_430.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_432() {
    let wasm = include_bytes!("wasm/const_432.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_434() {
    let wasm = include_bytes!("wasm/const_434.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_436() {
    let wasm = include_bytes!("wasm/const_436.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_438() {
    let wasm = include_bytes!("wasm/const_438.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_440() {
    let wasm = include_bytes!("wasm/const_440.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_442() {
    let wasm = include_bytes!("wasm/const_442.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_444() {
    let wasm = include_bytes!("wasm/const_444.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_446() {
    let wasm = include_bytes!("wasm/const_446.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_448() {
    let wasm = include_bytes!("wasm/const_448.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_450() {
    let wasm = include_bytes!("wasm/const_450.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_452() {
    let wasm = include_bytes!("wasm/const_452.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_454() {
    let wasm = include_bytes!("wasm/const_454.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_456() {
    let wasm = include_bytes!("wasm/const_456.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_458() {
    let wasm = include_bytes!("wasm/const_458.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_460() {
    let wasm = include_bytes!("wasm/const_460.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_462() {
    let wasm = include_bytes!("wasm/const_462.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_464() {
    let wasm = include_bytes!("wasm/const_464.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_466() {
    let wasm = include_bytes!("wasm/const_466.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_468() {
    let wasm = include_bytes!("wasm/const_468.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_470() {
    let wasm = include_bytes!("wasm/const_470.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_472() {
    let wasm = include_bytes!("wasm/const_472.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_474() {
    let wasm = include_bytes!("wasm/const_474.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_476() {
    let wasm = include_bytes!("wasm/const_476.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_478() {
    let wasm = include_bytes!("wasm/const_478.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_480() {
    let wasm = include_bytes!("wasm/const_480.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_482() {
    let wasm = include_bytes!("wasm/const_482.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_484() {
    let wasm = include_bytes!("wasm/const_484.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_486() {
    let wasm = include_bytes!("wasm/const_486.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_488() {
    let wasm = include_bytes!("wasm/const_488.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_490() {
    let wasm = include_bytes!("wasm/const_490.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_492() {
    let wasm = include_bytes!("wasm/const_492.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_494() {
    let wasm = include_bytes!("wasm/const_494.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_496() {
    let wasm = include_bytes!("wasm/const_496.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_498() {
    let wasm = include_bytes!("wasm/const_498.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_500() {
    let wasm = include_bytes!("wasm/const_500.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_502() {
    let wasm = include_bytes!("wasm/const_502.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_504() {
    let wasm = include_bytes!("wasm/const_504.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_506() {
    let wasm = include_bytes!("wasm/const_506.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_508() {
    let wasm = include_bytes!("wasm/const_508.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_510() {
    let wasm = include_bytes!("wasm/const_510.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_512() {
    let wasm = include_bytes!("wasm/const_512.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_514() {
    let wasm = include_bytes!("wasm/const_514.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_516() {
    let wasm = include_bytes!("wasm/const_516.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_518() {
    let wasm = include_bytes!("wasm/const_518.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_520() {
    let wasm = include_bytes!("wasm/const_520.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_522() {
    let wasm = include_bytes!("wasm/const_522.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_524() {
    let wasm = include_bytes!("wasm/const_524.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_526() {
    let wasm = include_bytes!("wasm/const_526.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_528() {
    let wasm = include_bytes!("wasm/const_528.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_530() {
    let wasm = include_bytes!("wasm/const_530.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_532() {
    let wasm = include_bytes!("wasm/const_532.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_534() {
    let wasm = include_bytes!("wasm/const_534.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_536() {
    let wasm = include_bytes!("wasm/const_536.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_538() {
    let wasm = include_bytes!("wasm/const_538.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_540() {
    let wasm = include_bytes!("wasm/const_540.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_542() {
    let wasm = include_bytes!("wasm/const_542.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_544() {
    let wasm = include_bytes!("wasm/const_544.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_546() {
    let wasm = include_bytes!("wasm/const_546.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_548() {
    let wasm = include_bytes!("wasm/const_548.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_550() {
    let wasm = include_bytes!("wasm/const_550.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_552() {
    let wasm = include_bytes!("wasm/const_552.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_554() {
    let wasm = include_bytes!("wasm/const_554.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_556() {
    let wasm = include_bytes!("wasm/const_556.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_558() {
    let wasm = include_bytes!("wasm/const_558.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_560() {
    let wasm = include_bytes!("wasm/const_560.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_562() {
    let wasm = include_bytes!("wasm/const_562.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_564() {
    let wasm = include_bytes!("wasm/const_564.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_566() {
    let wasm = include_bytes!("wasm/const_566.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_568() {
    let wasm = include_bytes!("wasm/const_568.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_570() {
    let wasm = include_bytes!("wasm/const_570.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_572() {
    let wasm = include_bytes!("wasm/const_572.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_574() {
    let wasm = include_bytes!("wasm/const_574.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_576() {
    let wasm = include_bytes!("wasm/const_576.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_578() {
    let wasm = include_bytes!("wasm/const_578.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_580() {
    let wasm = include_bytes!("wasm/const_580.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_582() {
    let wasm = include_bytes!("wasm/const_582.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_584() {
    let wasm = include_bytes!("wasm/const_584.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_586() {
    let wasm = include_bytes!("wasm/const_586.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_588() {
    let wasm = include_bytes!("wasm/const_588.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_590() {
    let wasm = include_bytes!("wasm/const_590.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_592() {
    let wasm = include_bytes!("wasm/const_592.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_594() {
    let wasm = include_bytes!("wasm/const_594.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_596() {
    let wasm = include_bytes!("wasm/const_596.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_598() {
    let wasm = include_bytes!("wasm/const_598.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_600() {
    let wasm = include_bytes!("wasm/const_600.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_602() {
    let wasm = include_bytes!("wasm/const_602.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_604() {
    let wasm = include_bytes!("wasm/const_604.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_606() {
    let wasm = include_bytes!("wasm/const_606.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_608() {
    let wasm = include_bytes!("wasm/const_608.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_610() {
    let wasm = include_bytes!("wasm/const_610.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_612() {
    let wasm = include_bytes!("wasm/const_612.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_614() {
    let wasm = include_bytes!("wasm/const_614.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_616() {
    let wasm = include_bytes!("wasm/const_616.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_618() {
    let wasm = include_bytes!("wasm/const_618.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_620() {
    let wasm = include_bytes!("wasm/const_620.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_622() {
    let wasm = include_bytes!("wasm/const_622.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_624() {
    let wasm = include_bytes!("wasm/const_624.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_626() {
    let wasm = include_bytes!("wasm/const_626.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_628() {
    let wasm = include_bytes!("wasm/const_628.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_630() {
    let wasm = include_bytes!("wasm/const_630.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_632() {
    let wasm = include_bytes!("wasm/const_632.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_634() {
    let wasm = include_bytes!("wasm/const_634.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_636() {
    let wasm = include_bytes!("wasm/const_636.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_638() {
    let wasm = include_bytes!("wasm/const_638.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_640() {
    let wasm = include_bytes!("wasm/const_640.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_642() {
    let wasm = include_bytes!("wasm/const_642.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_644() {
    let wasm = include_bytes!("wasm/const_644.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_646() {
    let wasm = include_bytes!("wasm/const_646.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_648() {
    let wasm = include_bytes!("wasm/const_648.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_650() {
    let wasm = include_bytes!("wasm/const_650.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_652() {
    let wasm = include_bytes!("wasm/const_652.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_654() {
    let wasm = include_bytes!("wasm/const_654.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_656() {
    let wasm = include_bytes!("wasm/const_656.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_658() {
    let wasm = include_bytes!("wasm/const_658.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_660() {
    let wasm = include_bytes!("wasm/const_660.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_662() {
    let wasm = include_bytes!("wasm/const_662.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_664() {
    let wasm = include_bytes!("wasm/const_664.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_666() {
    let wasm = include_bytes!("wasm/const_666.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_668() {
    let wasm = include_bytes!("wasm/const_668.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_670() {
    let wasm = include_bytes!("wasm/const_670.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_672() {
    let wasm = include_bytes!("wasm/const_672.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_674() {
    let wasm = include_bytes!("wasm/const_674.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_676() {
    let wasm = include_bytes!("wasm/const_676.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_678() {
    let wasm = include_bytes!("wasm/const_678.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_680() {
    let wasm = include_bytes!("wasm/const_680.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_682() {
    let wasm = include_bytes!("wasm/const_682.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_684() {
    let wasm = include_bytes!("wasm/const_684.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_686() {
    let wasm = include_bytes!("wasm/const_686.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_688() {
    let wasm = include_bytes!("wasm/const_688.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_690() {
    let wasm = include_bytes!("wasm/const_690.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_692() {
    let wasm = include_bytes!("wasm/const_692.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_694() {
    let wasm = include_bytes!("wasm/const_694.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_696() {
    let wasm = include_bytes!("wasm/const_696.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_698() {
    let wasm = include_bytes!("wasm/const_698.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_700() {
    let wasm = include_bytes!("wasm/const_700.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_702() {
    let wasm = include_bytes!("wasm/const_702.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_704() {
    let wasm = include_bytes!("wasm/const_704.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_706() {
    let wasm = include_bytes!("wasm/const_706.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_708() {
    let wasm = include_bytes!("wasm/const_708.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_710() {
    let wasm = include_bytes!("wasm/const_710.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_712() {
    let wasm = include_bytes!("wasm/const_712.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_714() {
    let wasm = include_bytes!("wasm/const_714.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_716() {
    let wasm = include_bytes!("wasm/const_716.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_718() {
    let wasm = include_bytes!("wasm/const_718.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_720() {
    let wasm = include_bytes!("wasm/const_720.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_722() {
    let wasm = include_bytes!("wasm/const_722.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_724() {
    let wasm = include_bytes!("wasm/const_724.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_726() {
    let wasm = include_bytes!("wasm/const_726.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_728() {
    let wasm = include_bytes!("wasm/const_728.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_730() {
    let wasm = include_bytes!("wasm/const_730.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_732() {
    let wasm = include_bytes!("wasm/const_732.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_734() {
    let wasm = include_bytes!("wasm/const_734.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_736() {
    let wasm = include_bytes!("wasm/const_736.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_738() {
    let wasm = include_bytes!("wasm/const_738.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_740() {
    let wasm = include_bytes!("wasm/const_740.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_742() {
    let wasm = include_bytes!("wasm/const_742.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_744() {
    let wasm = include_bytes!("wasm/const_744.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_746() {
    let wasm = include_bytes!("wasm/const_746.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_748() {
    let wasm = include_bytes!("wasm/const_748.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_750() {
    let wasm = include_bytes!("wasm/const_750.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_752() {
    let wasm = include_bytes!("wasm/const_752.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_754() {
    let wasm = include_bytes!("wasm/const_754.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_756() {
    let wasm = include_bytes!("wasm/const_756.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_758() {
    let wasm = include_bytes!("wasm/const_758.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_760() {
    let wasm = include_bytes!("wasm/const_760.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_762() {
    let wasm = include_bytes!("wasm/const_762.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_764() {
    let wasm = include_bytes!("wasm/const_764.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_766() {
    let wasm = include_bytes!("wasm/const_766.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_768() {
    let wasm = include_bytes!("wasm/const_768.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_770() {
    let wasm = include_bytes!("wasm/const_770.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_772() {
    let wasm = include_bytes!("wasm/const_772.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_774() {
    let wasm = include_bytes!("wasm/const_774.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn const_776() {
    let wasm = include_bytes!("wasm/const_776.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn skip_stack_guard_page_0() {
    let wasm = include_bytes!("wasm/skip-stack-guard-page_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn f64_cmp_0() {
    let wasm = include_bytes!("wasm/f64_cmp_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn f64_cmp_2401() {
    let wasm = include_bytes!("wasm/f64_cmp_2401.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_cmp_2402() {
    let wasm = include_bytes!("wasm/f64_cmp_2402.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_cmp_2403() {
    let wasm = include_bytes!("wasm/f64_cmp_2403.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_cmp_2404() {
    let wasm = include_bytes!("wasm/f64_cmp_2404.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_cmp_2405() {
    let wasm = include_bytes!("wasm/f64_cmp_2405.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_cmp_2406() {
    let wasm = include_bytes!("wasm/f64_cmp_2406.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_0() {
    let wasm = include_bytes!("wasm/block_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn block_64() {
    let wasm = include_bytes!("wasm/block_64.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_65() {
    let wasm = include_bytes!("wasm/block_65.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_66() {
    let wasm = include_bytes!("wasm/block_66.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_67() {
    let wasm = include_bytes!("wasm/block_67.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_68() {
    let wasm = include_bytes!("wasm/block_68.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_69() {
    let wasm = include_bytes!("wasm/block_69.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_70() {
    let wasm = include_bytes!("wasm/block_70.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_71() {
    let wasm = include_bytes!("wasm/block_71.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_72() {
    let wasm = include_bytes!("wasm/block_72.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_73() {
    let wasm = include_bytes!("wasm/block_73.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_74() {
    let wasm = include_bytes!("wasm/block_74.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_75() {
    let wasm = include_bytes!("wasm/block_75.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_76() {
    let wasm = include_bytes!("wasm/block_76.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_77() {
    let wasm = include_bytes!("wasm/block_77.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_78() {
    let wasm = include_bytes!("wasm/block_78.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_79() {
    let wasm = include_bytes!("wasm/block_79.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_80() {
    let wasm = include_bytes!("wasm/block_80.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_81() {
    let wasm = include_bytes!("wasm/block_81.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_82() {
    let wasm = include_bytes!("wasm/block_82.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_83() {
    let wasm = include_bytes!("wasm/block_83.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_84() {
    let wasm = include_bytes!("wasm/block_84.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_85() {
    let wasm = include_bytes!("wasm/block_85.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_86() {
    let wasm = include_bytes!("wasm/block_86.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_87() {
    let wasm = include_bytes!("wasm/block_87.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_88() {
    let wasm = include_bytes!("wasm/block_88.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_89() {
    let wasm = include_bytes!("wasm/block_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_90() {
    let wasm = include_bytes!("wasm/block_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_91() {
    let wasm = include_bytes!("wasm/block_91.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_92() {
    let wasm = include_bytes!("wasm/block_92.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_93() {
    let wasm = include_bytes!("wasm/block_93.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_94() {
    let wasm = include_bytes!("wasm/block_94.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_95() {
    let wasm = include_bytes!("wasm/block_95.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_96() {
    let wasm = include_bytes!("wasm/block_96.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_97() {
    let wasm = include_bytes!("wasm/block_97.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_98() {
    let wasm = include_bytes!("wasm/block_98.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_99() {
    let wasm = include_bytes!("wasm/block_99.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_100() {
    let wasm = include_bytes!("wasm/block_100.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_101() {
    let wasm = include_bytes!("wasm/block_101.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_102() {
    let wasm = include_bytes!("wasm/block_102.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_103() {
    let wasm = include_bytes!("wasm/block_103.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_104() {
    let wasm = include_bytes!("wasm/block_104.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_105() {
    let wasm = include_bytes!("wasm/block_105.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_106() {
    let wasm = include_bytes!("wasm/block_106.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_107() {
    let wasm = include_bytes!("wasm/block_107.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_108() {
    let wasm = include_bytes!("wasm/block_108.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_109() {
    let wasm = include_bytes!("wasm/block_109.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_110() {
    let wasm = include_bytes!("wasm/block_110.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_111() {
    let wasm = include_bytes!("wasm/block_111.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_112() {
    let wasm = include_bytes!("wasm/block_112.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_113() {
    let wasm = include_bytes!("wasm/block_113.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_114() {
    let wasm = include_bytes!("wasm/block_114.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_115() {
    let wasm = include_bytes!("wasm/block_115.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_116() {
    let wasm = include_bytes!("wasm/block_116.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_117() {
    let wasm = include_bytes!("wasm/block_117.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_118() {
    let wasm = include_bytes!("wasm/block_118.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_119() {
    let wasm = include_bytes!("wasm/block_119.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_120() {
    let wasm = include_bytes!("wasm/block_120.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_121() {
    let wasm = include_bytes!("wasm/block_121.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_122() {
    let wasm = include_bytes!("wasm/block_122.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_123() {
    let wasm = include_bytes!("wasm/block_123.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_124() {
    let wasm = include_bytes!("wasm/block_124.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_125() {
    let wasm = include_bytes!("wasm/block_125.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_126() {
    let wasm = include_bytes!("wasm/block_126.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_127() {
    let wasm = include_bytes!("wasm/block_127.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_128() {
    let wasm = include_bytes!("wasm/block_128.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_129() {
    let wasm = include_bytes!("wasm/block_129.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_130() {
    let wasm = include_bytes!("wasm/block_130.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_131() {
    let wasm = include_bytes!("wasm/block_131.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_132() {
    let wasm = include_bytes!("wasm/block_132.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_133() {
    let wasm = include_bytes!("wasm/block_133.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_134() {
    let wasm = include_bytes!("wasm/block_134.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_135() {
    let wasm = include_bytes!("wasm/block_135.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_136() {
    let wasm = include_bytes!("wasm/block_136.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_137() {
    let wasm = include_bytes!("wasm/block_137.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_138() {
    let wasm = include_bytes!("wasm/block_138.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_139() {
    let wasm = include_bytes!("wasm/block_139.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_140() {
    let wasm = include_bytes!("wasm/block_140.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_141() {
    let wasm = include_bytes!("wasm/block_141.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_142() {
    let wasm = include_bytes!("wasm/block_142.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_143() {
    let wasm = include_bytes!("wasm/block_143.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_144() {
    let wasm = include_bytes!("wasm/block_144.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_145() {
    let wasm = include_bytes!("wasm/block_145.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_146() {
    let wasm = include_bytes!("wasm/block_146.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_147() {
    let wasm = include_bytes!("wasm/block_147.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_148() {
    let wasm = include_bytes!("wasm/block_148.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_149() {
    let wasm = include_bytes!("wasm/block_149.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_150() {
    let wasm = include_bytes!("wasm/block_150.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_151() {
    let wasm = include_bytes!("wasm/block_151.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_152() {
    let wasm = include_bytes!("wasm/block_152.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_153() {
    let wasm = include_bytes!("wasm/block_153.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_154() {
    let wasm = include_bytes!("wasm/block_154.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_155() {
    let wasm = include_bytes!("wasm/block_155.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_156() {
    let wasm = include_bytes!("wasm/block_156.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_157() {
    let wasm = include_bytes!("wasm/block_157.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_158() {
    let wasm = include_bytes!("wasm/block_158.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_159() {
    let wasm = include_bytes!("wasm/block_159.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_160() {
    let wasm = include_bytes!("wasm/block_160.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_161() {
    let wasm = include_bytes!("wasm/block_161.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_162() {
    let wasm = include_bytes!("wasm/block_162.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_163() {
    let wasm = include_bytes!("wasm/block_163.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_164() {
    let wasm = include_bytes!("wasm/block_164.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_165() {
    let wasm = include_bytes!("wasm/block_165.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_166() {
    let wasm = include_bytes!("wasm/block_166.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_167() {
    let wasm = include_bytes!("wasm/block_167.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_168() {
    let wasm = include_bytes!("wasm/block_168.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_169() {
    let wasm = include_bytes!("wasm/block_169.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_170() {
    let wasm = include_bytes!("wasm/block_170.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_171() {
    let wasm = include_bytes!("wasm/block_171.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_172() {
    let wasm = include_bytes!("wasm/block_172.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_173() {
    let wasm = include_bytes!("wasm/block_173.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_174() {
    let wasm = include_bytes!("wasm/block_174.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_175() {
    let wasm = include_bytes!("wasm/block_175.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_176() {
    let wasm = include_bytes!("wasm/block_176.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_177() {
    let wasm = include_bytes!("wasm/block_177.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_178() {
    let wasm = include_bytes!("wasm/block_178.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_179() {
    let wasm = include_bytes!("wasm/block_179.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_180() {
    let wasm = include_bytes!("wasm/block_180.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_181() {
    let wasm = include_bytes!("wasm/block_181.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_182() {
    let wasm = include_bytes!("wasm/block_182.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_183() {
    let wasm = include_bytes!("wasm/block_183.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_184() {
    let wasm = include_bytes!("wasm/block_184.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_185() {
    let wasm = include_bytes!("wasm/block_185.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_186() {
    let wasm = include_bytes!("wasm/block_186.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_187() {
    let wasm = include_bytes!("wasm/block_187.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_188() {
    let wasm = include_bytes!("wasm/block_188.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_189() {
    let wasm = include_bytes!("wasm/block_189.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_190() {
    let wasm = include_bytes!("wasm/block_190.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_191() {
    let wasm = include_bytes!("wasm/block_191.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_192() {
    let wasm = include_bytes!("wasm/block_192.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_193() {
    let wasm = include_bytes!("wasm/block_193.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_194() {
    let wasm = include_bytes!("wasm/block_194.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_195() {
    let wasm = include_bytes!("wasm/block_195.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_196() {
    let wasm = include_bytes!("wasm/block_196.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_197() {
    let wasm = include_bytes!("wasm/block_197.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_198() {
    let wasm = include_bytes!("wasm/block_198.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_199() {
    let wasm = include_bytes!("wasm/block_199.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_200() {
    let wasm = include_bytes!("wasm/block_200.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_201() {
    let wasm = include_bytes!("wasm/block_201.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_202() {
    let wasm = include_bytes!("wasm/block_202.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_203() {
    let wasm = include_bytes!("wasm/block_203.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_204() {
    let wasm = include_bytes!("wasm/block_204.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_205() {
    let wasm = include_bytes!("wasm/block_205.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_206() {
    let wasm = include_bytes!("wasm/block_206.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_207() {
    let wasm = include_bytes!("wasm/block_207.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_208() {
    let wasm = include_bytes!("wasm/block_208.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_209() {
    let wasm = include_bytes!("wasm/block_209.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_210() {
    let wasm = include_bytes!("wasm/block_210.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_211() {
    let wasm = include_bytes!("wasm/block_211.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_212() {
    let wasm = include_bytes!("wasm/block_212.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_213() {
    let wasm = include_bytes!("wasm/block_213.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_214() {
    let wasm = include_bytes!("wasm/block_214.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_215() {
    let wasm = include_bytes!("wasm/block_215.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_216() {
    let wasm = include_bytes!("wasm/block_216.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_217() {
    let wasm = include_bytes!("wasm/block_217.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn block_218() {
    let wasm = include_bytes!("wasm/block_218.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_0() {
    let wasm = include_bytes!("wasm/unreached-invalid_0.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_1() {
    let wasm = include_bytes!("wasm/unreached-invalid_1.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_2() {
    let wasm = include_bytes!("wasm/unreached-invalid_2.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_3() {
    let wasm = include_bytes!("wasm/unreached-invalid_3.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_4() {
    let wasm = include_bytes!("wasm/unreached-invalid_4.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_5() {
    let wasm = include_bytes!("wasm/unreached-invalid_5.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_6() {
    let wasm = include_bytes!("wasm/unreached-invalid_6.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_7() {
    let wasm = include_bytes!("wasm/unreached-invalid_7.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_8() {
    let wasm = include_bytes!("wasm/unreached-invalid_8.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_9() {
    let wasm = include_bytes!("wasm/unreached-invalid_9.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_10() {
    let wasm = include_bytes!("wasm/unreached-invalid_10.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_11() {
    let wasm = include_bytes!("wasm/unreached-invalid_11.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_12() {
    let wasm = include_bytes!("wasm/unreached-invalid_12.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_13() {
    let wasm = include_bytes!("wasm/unreached-invalid_13.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_14() {
    let wasm = include_bytes!("wasm/unreached-invalid_14.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_15() {
    let wasm = include_bytes!("wasm/unreached-invalid_15.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_16() {
    let wasm = include_bytes!("wasm/unreached-invalid_16.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_17() {
    let wasm = include_bytes!("wasm/unreached-invalid_17.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_18() {
    let wasm = include_bytes!("wasm/unreached-invalid_18.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_19() {
    let wasm = include_bytes!("wasm/unreached-invalid_19.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_20() {
    let wasm = include_bytes!("wasm/unreached-invalid_20.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_21() {
    let wasm = include_bytes!("wasm/unreached-invalid_21.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_22() {
    let wasm = include_bytes!("wasm/unreached-invalid_22.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_23() {
    let wasm = include_bytes!("wasm/unreached-invalid_23.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_24() {
    let wasm = include_bytes!("wasm/unreached-invalid_24.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_25() {
    let wasm = include_bytes!("wasm/unreached-invalid_25.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_26() {
    let wasm = include_bytes!("wasm/unreached-invalid_26.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_27() {
    let wasm = include_bytes!("wasm/unreached-invalid_27.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_28() {
    let wasm = include_bytes!("wasm/unreached-invalid_28.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_29() {
    let wasm = include_bytes!("wasm/unreached-invalid_29.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_30() {
    let wasm = include_bytes!("wasm/unreached-invalid_30.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_31() {
    let wasm = include_bytes!("wasm/unreached-invalid_31.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_32() {
    let wasm = include_bytes!("wasm/unreached-invalid_32.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_33() {
    let wasm = include_bytes!("wasm/unreached-invalid_33.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_34() {
    let wasm = include_bytes!("wasm/unreached-invalid_34.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_35() {
    let wasm = include_bytes!("wasm/unreached-invalid_35.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_36() {
    let wasm = include_bytes!("wasm/unreached-invalid_36.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_37() {
    let wasm = include_bytes!("wasm/unreached-invalid_37.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_38() {
    let wasm = include_bytes!("wasm/unreached-invalid_38.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_39() {
    let wasm = include_bytes!("wasm/unreached-invalid_39.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_40() {
    let wasm = include_bytes!("wasm/unreached-invalid_40.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_41() {
    let wasm = include_bytes!("wasm/unreached-invalid_41.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_42() {
    let wasm = include_bytes!("wasm/unreached-invalid_42.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_43() {
    let wasm = include_bytes!("wasm/unreached-invalid_43.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_44() {
    let wasm = include_bytes!("wasm/unreached-invalid_44.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_45() {
    let wasm = include_bytes!("wasm/unreached-invalid_45.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_46() {
    let wasm = include_bytes!("wasm/unreached-invalid_46.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_47() {
    let wasm = include_bytes!("wasm/unreached-invalid_47.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_48() {
    let wasm = include_bytes!("wasm/unreached-invalid_48.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_49() {
    let wasm = include_bytes!("wasm/unreached-invalid_49.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_50() {
    let wasm = include_bytes!("wasm/unreached-invalid_50.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_51() {
    let wasm = include_bytes!("wasm/unreached-invalid_51.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_52() {
    let wasm = include_bytes!("wasm/unreached-invalid_52.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_53() {
    let wasm = include_bytes!("wasm/unreached-invalid_53.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_54() {
    let wasm = include_bytes!("wasm/unreached-invalid_54.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_55() {
    let wasm = include_bytes!("wasm/unreached-invalid_55.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_56() {
    let wasm = include_bytes!("wasm/unreached-invalid_56.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_57() {
    let wasm = include_bytes!("wasm/unreached-invalid_57.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_58() {
    let wasm = include_bytes!("wasm/unreached-invalid_58.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_59() {
    let wasm = include_bytes!("wasm/unreached-invalid_59.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_60() {
    let wasm = include_bytes!("wasm/unreached-invalid_60.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_61() {
    let wasm = include_bytes!("wasm/unreached-invalid_61.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_62() {
    let wasm = include_bytes!("wasm/unreached-invalid_62.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_63() {
    let wasm = include_bytes!("wasm/unreached-invalid_63.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_64() {
    let wasm = include_bytes!("wasm/unreached-invalid_64.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_65() {
    let wasm = include_bytes!("wasm/unreached-invalid_65.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_66() {
    let wasm = include_bytes!("wasm/unreached-invalid_66.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_67() {
    let wasm = include_bytes!("wasm/unreached-invalid_67.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_68() {
    let wasm = include_bytes!("wasm/unreached-invalid_68.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_69() {
    let wasm = include_bytes!("wasm/unreached-invalid_69.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_70() {
    let wasm = include_bytes!("wasm/unreached-invalid_70.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_71() {
    let wasm = include_bytes!("wasm/unreached-invalid_71.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_72() {
    let wasm = include_bytes!("wasm/unreached-invalid_72.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_73() {
    let wasm = include_bytes!("wasm/unreached-invalid_73.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_74() {
    let wasm = include_bytes!("wasm/unreached-invalid_74.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_75() {
    let wasm = include_bytes!("wasm/unreached-invalid_75.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_76() {
    let wasm = include_bytes!("wasm/unreached-invalid_76.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_77() {
    let wasm = include_bytes!("wasm/unreached-invalid_77.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_78() {
    let wasm = include_bytes!("wasm/unreached-invalid_78.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_79() {
    let wasm = include_bytes!("wasm/unreached-invalid_79.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_80() {
    let wasm = include_bytes!("wasm/unreached-invalid_80.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_81() {
    let wasm = include_bytes!("wasm/unreached-invalid_81.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_82() {
    let wasm = include_bytes!("wasm/unreached-invalid_82.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_83() {
    let wasm = include_bytes!("wasm/unreached-invalid_83.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_84() {
    let wasm = include_bytes!("wasm/unreached-invalid_84.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_85() {
    let wasm = include_bytes!("wasm/unreached-invalid_85.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_86() {
    let wasm = include_bytes!("wasm/unreached-invalid_86.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_87() {
    let wasm = include_bytes!("wasm/unreached-invalid_87.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_88() {
    let wasm = include_bytes!("wasm/unreached-invalid_88.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_89() {
    let wasm = include_bytes!("wasm/unreached-invalid_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_90() {
    let wasm = include_bytes!("wasm/unreached-invalid_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_91() {
    let wasm = include_bytes!("wasm/unreached-invalid_91.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_92() {
    let wasm = include_bytes!("wasm/unreached-invalid_92.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_93() {
    let wasm = include_bytes!("wasm/unreached-invalid_93.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_94() {
    let wasm = include_bytes!("wasm/unreached-invalid_94.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_95() {
    let wasm = include_bytes!("wasm/unreached-invalid_95.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_96() {
    let wasm = include_bytes!("wasm/unreached-invalid_96.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_97() {
    let wasm = include_bytes!("wasm/unreached-invalid_97.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_98() {
    let wasm = include_bytes!("wasm/unreached-invalid_98.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_99() {
    let wasm = include_bytes!("wasm/unreached-invalid_99.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_100() {
    let wasm = include_bytes!("wasm/unreached-invalid_100.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_101() {
    let wasm = include_bytes!("wasm/unreached-invalid_101.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_102() {
    let wasm = include_bytes!("wasm/unreached-invalid_102.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_103() {
    let wasm = include_bytes!("wasm/unreached-invalid_103.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_104() {
    let wasm = include_bytes!("wasm/unreached-invalid_104.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_105() {
    let wasm = include_bytes!("wasm/unreached-invalid_105.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_106() {
    let wasm = include_bytes!("wasm/unreached-invalid_106.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_107() {
    let wasm = include_bytes!("wasm/unreached-invalid_107.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_108() {
    let wasm = include_bytes!("wasm/unreached-invalid_108.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_109() {
    let wasm = include_bytes!("wasm/unreached-invalid_109.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_110() {
    let wasm = include_bytes!("wasm/unreached-invalid_110.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_111() {
    let wasm = include_bytes!("wasm/unreached-invalid_111.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_112() {
    let wasm = include_bytes!("wasm/unreached-invalid_112.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_113() {
    let wasm = include_bytes!("wasm/unreached-invalid_113.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_114() {
    let wasm = include_bytes!("wasm/unreached-invalid_114.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_115() {
    let wasm = include_bytes!("wasm/unreached-invalid_115.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_116() {
    let wasm = include_bytes!("wasm/unreached-invalid_116.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_invalid_117() {
    let wasm = include_bytes!("wasm/unreached-invalid_117.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn labels_0() {
    let wasm = include_bytes!("wasm/labels_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn labels_26() {
    let wasm = include_bytes!("wasm/labels_26.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn labels_27() {
    let wasm = include_bytes!("wasm/labels_27.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn labels_28() {
    let wasm = include_bytes!("wasm/labels_28.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn switch_0() {
    let wasm = include_bytes!("wasm/switch_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn switch_27() {
    let wasm = include_bytes!("wasm/switch_27.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_0() {
    let wasm = include_bytes!("wasm/i64_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn i64_385() {
    let wasm = include_bytes!("wasm/i64_385.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_386() {
    let wasm = include_bytes!("wasm/i64_386.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_387() {
    let wasm = include_bytes!("wasm/i64_387.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_388() {
    let wasm = include_bytes!("wasm/i64_388.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_389() {
    let wasm = include_bytes!("wasm/i64_389.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_390() {
    let wasm = include_bytes!("wasm/i64_390.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_391() {
    let wasm = include_bytes!("wasm/i64_391.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_392() {
    let wasm = include_bytes!("wasm/i64_392.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_393() {
    let wasm = include_bytes!("wasm/i64_393.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_394() {
    let wasm = include_bytes!("wasm/i64_394.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_395() {
    let wasm = include_bytes!("wasm/i64_395.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_396() {
    let wasm = include_bytes!("wasm/i64_396.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_397() {
    let wasm = include_bytes!("wasm/i64_397.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_398() {
    let wasm = include_bytes!("wasm/i64_398.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_399() {
    let wasm = include_bytes!("wasm/i64_399.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_400() {
    let wasm = include_bytes!("wasm/i64_400.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_401() {
    let wasm = include_bytes!("wasm/i64_401.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_402() {
    let wasm = include_bytes!("wasm/i64_402.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_403() {
    let wasm = include_bytes!("wasm/i64_403.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_404() {
    let wasm = include_bytes!("wasm/i64_404.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_405() {
    let wasm = include_bytes!("wasm/i64_405.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_406() {
    let wasm = include_bytes!("wasm/i64_406.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_407() {
    let wasm = include_bytes!("wasm/i64_407.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_408() {
    let wasm = include_bytes!("wasm/i64_408.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_409() {
    let wasm = include_bytes!("wasm/i64_409.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_410() {
    let wasm = include_bytes!("wasm/i64_410.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_411() {
    let wasm = include_bytes!("wasm/i64_411.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_412() {
    let wasm = include_bytes!("wasm/i64_412.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i64_413() {
    let wasm = include_bytes!("wasm/i64_413.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_0() {
    let wasm = include_bytes!("wasm/memory_copy_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_32() {
    let wasm = include_bytes!("wasm/memory_copy_32.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_64() {
    let wasm = include_bytes!("wasm/memory_copy_64.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_96() {
    let wasm = include_bytes!("wasm/memory_copy_96.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_128() {
    let wasm = include_bytes!("wasm/memory_copy_128.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_160() {
    let wasm = include_bytes!("wasm/memory_copy_160.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_192() {
    let wasm = include_bytes!("wasm/memory_copy_192.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_224() {
    let wasm = include_bytes!("wasm/memory_copy_224.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_256() {
    let wasm = include_bytes!("wasm/memory_copy_256.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_607() {
    let wasm = include_bytes!("wasm/memory_copy_607.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_959() {
    let wasm = include_bytes!("wasm/memory_copy_959.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_1310() {
    let wasm = include_bytes!("wasm/memory_copy_1310.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_1662() {
    let wasm = include_bytes!("wasm/memory_copy_1662.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_2013() {
    let wasm = include_bytes!("wasm/memory_copy_2013.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_2364() {
    let wasm = include_bytes!("wasm/memory_copy_2364.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_2715() {
    let wasm = include_bytes!("wasm/memory_copy_2715.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_3066() {
    let wasm = include_bytes!("wasm/memory_copy_3066.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_3417() {
    let wasm = include_bytes!("wasm/memory_copy_3417.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_3768() {
    let wasm = include_bytes!("wasm/memory_copy_3768.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4119() {
    let wasm = include_bytes!("wasm/memory_copy_4119.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4120() {
    let wasm = include_bytes!("wasm/memory_copy_4120.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4121() {
    let wasm = include_bytes!("wasm/memory_copy_4121.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4122() {
    let wasm = include_bytes!("wasm/memory_copy_4122.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4123() {
    let wasm = include_bytes!("wasm/memory_copy_4123.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4124() {
    let wasm = include_bytes!("wasm/memory_copy_4124.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4125() {
    let wasm = include_bytes!("wasm/memory_copy_4125.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4126() {
    let wasm = include_bytes!("wasm/memory_copy_4126.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4127() {
    let wasm = include_bytes!("wasm/memory_copy_4127.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4128() {
    let wasm = include_bytes!("wasm/memory_copy_4128.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4129() {
    let wasm = include_bytes!("wasm/memory_copy_4129.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4130() {
    let wasm = include_bytes!("wasm/memory_copy_4130.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4131() {
    let wasm = include_bytes!("wasm/memory_copy_4131.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4132() {
    let wasm = include_bytes!("wasm/memory_copy_4132.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4133() {
    let wasm = include_bytes!("wasm/memory_copy_4133.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4134() {
    let wasm = include_bytes!("wasm/memory_copy_4134.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4135() {
    let wasm = include_bytes!("wasm/memory_copy_4135.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4136() {
    let wasm = include_bytes!("wasm/memory_copy_4136.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4137() {
    let wasm = include_bytes!("wasm/memory_copy_4137.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4138() {
    let wasm = include_bytes!("wasm/memory_copy_4138.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4139() {
    let wasm = include_bytes!("wasm/memory_copy_4139.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4140() {
    let wasm = include_bytes!("wasm/memory_copy_4140.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4141() {
    let wasm = include_bytes!("wasm/memory_copy_4141.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4142() {
    let wasm = include_bytes!("wasm/memory_copy_4142.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4143() {
    let wasm = include_bytes!("wasm/memory_copy_4143.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4144() {
    let wasm = include_bytes!("wasm/memory_copy_4144.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4145() {
    let wasm = include_bytes!("wasm/memory_copy_4145.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4146() {
    let wasm = include_bytes!("wasm/memory_copy_4146.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4147() {
    let wasm = include_bytes!("wasm/memory_copy_4147.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4148() {
    let wasm = include_bytes!("wasm/memory_copy_4148.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4149() {
    let wasm = include_bytes!("wasm/memory_copy_4149.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4150() {
    let wasm = include_bytes!("wasm/memory_copy_4150.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4151() {
    let wasm = include_bytes!("wasm/memory_copy_4151.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4152() {
    let wasm = include_bytes!("wasm/memory_copy_4152.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4153() {
    let wasm = include_bytes!("wasm/memory_copy_4153.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4154() {
    let wasm = include_bytes!("wasm/memory_copy_4154.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4155() {
    let wasm = include_bytes!("wasm/memory_copy_4155.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4156() {
    let wasm = include_bytes!("wasm/memory_copy_4156.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4157() {
    let wasm = include_bytes!("wasm/memory_copy_4157.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4158() {
    let wasm = include_bytes!("wasm/memory_copy_4158.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4159() {
    let wasm = include_bytes!("wasm/memory_copy_4159.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4160() {
    let wasm = include_bytes!("wasm/memory_copy_4160.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4161() {
    let wasm = include_bytes!("wasm/memory_copy_4161.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4162() {
    let wasm = include_bytes!("wasm/memory_copy_4162.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4163() {
    let wasm = include_bytes!("wasm/memory_copy_4163.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4164() {
    let wasm = include_bytes!("wasm/memory_copy_4164.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4165() {
    let wasm = include_bytes!("wasm/memory_copy_4165.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4166() {
    let wasm = include_bytes!("wasm/memory_copy_4166.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4167() {
    let wasm = include_bytes!("wasm/memory_copy_4167.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4168() {
    let wasm = include_bytes!("wasm/memory_copy_4168.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4169() {
    let wasm = include_bytes!("wasm/memory_copy_4169.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4170() {
    let wasm = include_bytes!("wasm/memory_copy_4170.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4171() {
    let wasm = include_bytes!("wasm/memory_copy_4171.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4172() {
    let wasm = include_bytes!("wasm/memory_copy_4172.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4173() {
    let wasm = include_bytes!("wasm/memory_copy_4173.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4174() {
    let wasm = include_bytes!("wasm/memory_copy_4174.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4175() {
    let wasm = include_bytes!("wasm/memory_copy_4175.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4176() {
    let wasm = include_bytes!("wasm/memory_copy_4176.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4177() {
    let wasm = include_bytes!("wasm/memory_copy_4177.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4178() {
    let wasm = include_bytes!("wasm/memory_copy_4178.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4179() {
    let wasm = include_bytes!("wasm/memory_copy_4179.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4180() {
    let wasm = include_bytes!("wasm/memory_copy_4180.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4181() {
    let wasm = include_bytes!("wasm/memory_copy_4181.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4182() {
    let wasm = include_bytes!("wasm/memory_copy_4182.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_copy_4183() {
    let wasm = include_bytes!("wasm/memory_copy_4183.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4188() {
    let wasm = include_bytes!("wasm/memory_copy_4188.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4193() {
    let wasm = include_bytes!("wasm/memory_copy_4193.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4195() {
    let wasm = include_bytes!("wasm/memory_copy_4195.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4197() {
    let wasm = include_bytes!("wasm/memory_copy_4197.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4199() {
    let wasm = include_bytes!("wasm/memory_copy_4199.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4201() {
    let wasm = include_bytes!("wasm/memory_copy_4201.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4205() {
    let wasm = include_bytes!("wasm/memory_copy_4205.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4207() {
    let wasm = include_bytes!("wasm/memory_copy_4207.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4209() {
    let wasm = include_bytes!("wasm/memory_copy_4209.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4211() {
    let wasm = include_bytes!("wasm/memory_copy_4211.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4213() {
    let wasm = include_bytes!("wasm/memory_copy_4213.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4215() {
    let wasm = include_bytes!("wasm/memory_copy_4215.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_copy_4217() {
    let wasm = include_bytes!("wasm/memory_copy_4217.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn stack_0() {
    let wasm = include_bytes!("wasm/stack_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn stack_6() {
    let wasm = include_bytes!("wasm/stack_6.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn loop_0() {
    let wasm = include_bytes!("wasm/loop_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn loop_89() {
    let wasm = include_bytes!("wasm/loop_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_90() {
    let wasm = include_bytes!("wasm/loop_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_91() {
    let wasm = include_bytes!("wasm/loop_91.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_92() {
    let wasm = include_bytes!("wasm/loop_92.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_93() {
    let wasm = include_bytes!("wasm/loop_93.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_94() {
    let wasm = include_bytes!("wasm/loop_94.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_95() {
    let wasm = include_bytes!("wasm/loop_95.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_96() {
    let wasm = include_bytes!("wasm/loop_96.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_97() {
    let wasm = include_bytes!("wasm/loop_97.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_98() {
    let wasm = include_bytes!("wasm/loop_98.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_99() {
    let wasm = include_bytes!("wasm/loop_99.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_100() {
    let wasm = include_bytes!("wasm/loop_100.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_101() {
    let wasm = include_bytes!("wasm/loop_101.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_102() {
    let wasm = include_bytes!("wasm/loop_102.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_103() {
    let wasm = include_bytes!("wasm/loop_103.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_104() {
    let wasm = include_bytes!("wasm/loop_104.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_105() {
    let wasm = include_bytes!("wasm/loop_105.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_106() {
    let wasm = include_bytes!("wasm/loop_106.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_107() {
    let wasm = include_bytes!("wasm/loop_107.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_108() {
    let wasm = include_bytes!("wasm/loop_108.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_109() {
    let wasm = include_bytes!("wasm/loop_109.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_110() {
    let wasm = include_bytes!("wasm/loop_110.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_111() {
    let wasm = include_bytes!("wasm/loop_111.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_112() {
    let wasm = include_bytes!("wasm/loop_112.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_113() {
    let wasm = include_bytes!("wasm/loop_113.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_114() {
    let wasm = include_bytes!("wasm/loop_114.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn loop_115() {
    let wasm = include_bytes!("wasm/loop_115.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_0() {
    let wasm = include_bytes!("wasm/conversions_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn conversions_594() {
    let wasm = include_bytes!("wasm/conversions_594.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_595() {
    let wasm = include_bytes!("wasm/conversions_595.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_596() {
    let wasm = include_bytes!("wasm/conversions_596.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_597() {
    let wasm = include_bytes!("wasm/conversions_597.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_598() {
    let wasm = include_bytes!("wasm/conversions_598.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_599() {
    let wasm = include_bytes!("wasm/conversions_599.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_600() {
    let wasm = include_bytes!("wasm/conversions_600.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_601() {
    let wasm = include_bytes!("wasm/conversions_601.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_602() {
    let wasm = include_bytes!("wasm/conversions_602.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_603() {
    let wasm = include_bytes!("wasm/conversions_603.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_604() {
    let wasm = include_bytes!("wasm/conversions_604.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_605() {
    let wasm = include_bytes!("wasm/conversions_605.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_606() {
    let wasm = include_bytes!("wasm/conversions_606.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_607() {
    let wasm = include_bytes!("wasm/conversions_607.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_608() {
    let wasm = include_bytes!("wasm/conversions_608.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_609() {
    let wasm = include_bytes!("wasm/conversions_609.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_610() {
    let wasm = include_bytes!("wasm/conversions_610.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_611() {
    let wasm = include_bytes!("wasm/conversions_611.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_612() {
    let wasm = include_bytes!("wasm/conversions_612.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_613() {
    let wasm = include_bytes!("wasm/conversions_613.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_614() {
    let wasm = include_bytes!("wasm/conversions_614.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_615() {
    let wasm = include_bytes!("wasm/conversions_615.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_616() {
    let wasm = include_bytes!("wasm/conversions_616.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_617() {
    let wasm = include_bytes!("wasm/conversions_617.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn conversions_618() {
    let wasm = include_bytes!("wasm/conversions_618.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn comments_0() {
    let wasm = include_bytes!("wasm/comments_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn comments_1() {
    let wasm = include_bytes!("wasm/comments_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn comments_2() {
    let wasm = include_bytes!("wasm/comments_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn comments_3() {
    let wasm = include_bytes!("wasm/comments_3.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn endianness_0() {
    let wasm = include_bytes!("wasm/endianness_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn return_0() {
    let wasm = include_bytes!("wasm/return_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn return_64() {
    let wasm = include_bytes!("wasm/return_64.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_65() {
    let wasm = include_bytes!("wasm/return_65.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_66() {
    let wasm = include_bytes!("wasm/return_66.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_67() {
    let wasm = include_bytes!("wasm/return_67.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_68() {
    let wasm = include_bytes!("wasm/return_68.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_69() {
    let wasm = include_bytes!("wasm/return_69.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_70() {
    let wasm = include_bytes!("wasm/return_70.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_71() {
    let wasm = include_bytes!("wasm/return_71.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_72() {
    let wasm = include_bytes!("wasm/return_72.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_73() {
    let wasm = include_bytes!("wasm/return_73.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_74() {
    let wasm = include_bytes!("wasm/return_74.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_75() {
    let wasm = include_bytes!("wasm/return_75.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_76() {
    let wasm = include_bytes!("wasm/return_76.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_77() {
    let wasm = include_bytes!("wasm/return_77.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_78() {
    let wasm = include_bytes!("wasm/return_78.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_79() {
    let wasm = include_bytes!("wasm/return_79.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_80() {
    let wasm = include_bytes!("wasm/return_80.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_81() {
    let wasm = include_bytes!("wasm/return_81.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_82() {
    let wasm = include_bytes!("wasm/return_82.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn return_83() {
    let wasm = include_bytes!("wasm/return_83.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_0() {
    let wasm = include_bytes!("wasm/store_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn store_17() {
    let wasm = include_bytes!("wasm/store_17.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_18() {
    let wasm = include_bytes!("wasm/store_18.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_19() {
    let wasm = include_bytes!("wasm/store_19.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_20() {
    let wasm = include_bytes!("wasm/store_20.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_21() {
    let wasm = include_bytes!("wasm/store_21.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_22() {
    let wasm = include_bytes!("wasm/store_22.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_23() {
    let wasm = include_bytes!("wasm/store_23.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_24() {
    let wasm = include_bytes!("wasm/store_24.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_25() {
    let wasm = include_bytes!("wasm/store_25.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_26() {
    let wasm = include_bytes!("wasm/store_26.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_27() {
    let wasm = include_bytes!("wasm/store_27.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_28() {
    let wasm = include_bytes!("wasm/store_28.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_29() {
    let wasm = include_bytes!("wasm/store_29.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_30() {
    let wasm = include_bytes!("wasm/store_30.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_31() {
    let wasm = include_bytes!("wasm/store_31.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_32() {
    let wasm = include_bytes!("wasm/store_32.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_33() {
    let wasm = include_bytes!("wasm/store_33.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_34() {
    let wasm = include_bytes!("wasm/store_34.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_35() {
    let wasm = include_bytes!("wasm/store_35.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_36() {
    let wasm = include_bytes!("wasm/store_36.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_37() {
    let wasm = include_bytes!("wasm/store_37.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_38() {
    let wasm = include_bytes!("wasm/store_38.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_39() {
    let wasm = include_bytes!("wasm/store_39.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_40() {
    let wasm = include_bytes!("wasm/store_40.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_41() {
    let wasm = include_bytes!("wasm/store_41.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_42() {
    let wasm = include_bytes!("wasm/store_42.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_43() {
    let wasm = include_bytes!("wasm/store_43.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_44() {
    let wasm = include_bytes!("wasm/store_44.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_45() {
    let wasm = include_bytes!("wasm/store_45.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_46() {
    let wasm = include_bytes!("wasm/store_46.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_47() {
    let wasm = include_bytes!("wasm/store_47.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_48() {
    let wasm = include_bytes!("wasm/store_48.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_49() {
    let wasm = include_bytes!("wasm/store_49.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_50() {
    let wasm = include_bytes!("wasm/store_50.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_51() {
    let wasm = include_bytes!("wasm/store_51.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_52() {
    let wasm = include_bytes!("wasm/store_52.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_53() {
    let wasm = include_bytes!("wasm/store_53.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_54() {
    let wasm = include_bytes!("wasm/store_54.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_55() {
    let wasm = include_bytes!("wasm/store_55.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_56() {
    let wasm = include_bytes!("wasm/store_56.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_57() {
    let wasm = include_bytes!("wasm/store_57.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_58() {
    let wasm = include_bytes!("wasm/store_58.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_59() {
    let wasm = include_bytes!("wasm/store_59.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_60() {
    let wasm = include_bytes!("wasm/store_60.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_61() {
    let wasm = include_bytes!("wasm/store_61.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_62() {
    let wasm = include_bytes!("wasm/store_62.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_63() {
    let wasm = include_bytes!("wasm/store_63.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_64() {
    let wasm = include_bytes!("wasm/store_64.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_65() {
    let wasm = include_bytes!("wasm/store_65.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_66() {
    let wasm = include_bytes!("wasm/store_66.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn store_67() {
    let wasm = include_bytes!("wasm/store_67.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_redundancy_0() {
    let wasm = include_bytes!("wasm/memory_redundancy_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn i32_0() {
    let wasm = include_bytes!("wasm/i32_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn i32_375() {
    let wasm = include_bytes!("wasm/i32_375.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_376() {
    let wasm = include_bytes!("wasm/i32_376.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_377() {
    let wasm = include_bytes!("wasm/i32_377.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_378() {
    let wasm = include_bytes!("wasm/i32_378.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_379() {
    let wasm = include_bytes!("wasm/i32_379.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_380() {
    let wasm = include_bytes!("wasm/i32_380.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_381() {
    let wasm = include_bytes!("wasm/i32_381.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_382() {
    let wasm = include_bytes!("wasm/i32_382.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_383() {
    let wasm = include_bytes!("wasm/i32_383.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_384() {
    let wasm = include_bytes!("wasm/i32_384.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_385() {
    let wasm = include_bytes!("wasm/i32_385.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_386() {
    let wasm = include_bytes!("wasm/i32_386.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_387() {
    let wasm = include_bytes!("wasm/i32_387.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_388() {
    let wasm = include_bytes!("wasm/i32_388.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_389() {
    let wasm = include_bytes!("wasm/i32_389.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_390() {
    let wasm = include_bytes!("wasm/i32_390.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_391() {
    let wasm = include_bytes!("wasm/i32_391.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_392() {
    let wasm = include_bytes!("wasm/i32_392.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_393() {
    let wasm = include_bytes!("wasm/i32_393.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_394() {
    let wasm = include_bytes!("wasm/i32_394.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_395() {
    let wasm = include_bytes!("wasm/i32_395.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_396() {
    let wasm = include_bytes!("wasm/i32_396.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_397() {
    let wasm = include_bytes!("wasm/i32_397.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_398() {
    let wasm = include_bytes!("wasm/i32_398.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_399() {
    let wasm = include_bytes!("wasm/i32_399.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_400() {
    let wasm = include_bytes!("wasm/i32_400.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_401() {
    let wasm = include_bytes!("wasm/i32_401.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_402() {
    let wasm = include_bytes!("wasm/i32_402.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_403() {
    let wasm = include_bytes!("wasm/i32_403.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_404() {
    let wasm = include_bytes!("wasm/i32_404.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_405() {
    let wasm = include_bytes!("wasm/i32_405.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_406() {
    let wasm = include_bytes!("wasm/i32_406.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_407() {
    let wasm = include_bytes!("wasm/i32_407.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_408() {
    let wasm = include_bytes!("wasm/i32_408.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_409() {
    let wasm = include_bytes!("wasm/i32_409.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_410() {
    let wasm = include_bytes!("wasm/i32_410.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_411() {
    let wasm = include_bytes!("wasm/i32_411.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_412() {
    let wasm = include_bytes!("wasm/i32_412.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_413() {
    let wasm = include_bytes!("wasm/i32_413.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_414() {
    let wasm = include_bytes!("wasm/i32_414.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_415() {
    let wasm = include_bytes!("wasm/i32_415.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_416() {
    let wasm = include_bytes!("wasm/i32_416.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_417() {
    let wasm = include_bytes!("wasm/i32_417.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_418() {
    let wasm = include_bytes!("wasm/i32_418.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_419() {
    let wasm = include_bytes!("wasm/i32_419.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_420() {
    let wasm = include_bytes!("wasm/i32_420.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_421() {
    let wasm = include_bytes!("wasm/i32_421.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_422() {
    let wasm = include_bytes!("wasm/i32_422.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_423() {
    let wasm = include_bytes!("wasm/i32_423.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_424() {
    let wasm = include_bytes!("wasm/i32_424.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_425() {
    let wasm = include_bytes!("wasm/i32_425.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_426() {
    let wasm = include_bytes!("wasm/i32_426.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_427() {
    let wasm = include_bytes!("wasm/i32_427.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_428() {
    let wasm = include_bytes!("wasm/i32_428.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_429() {
    let wasm = include_bytes!("wasm/i32_429.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_430() {
    let wasm = include_bytes!("wasm/i32_430.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_431() {
    let wasm = include_bytes!("wasm/i32_431.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_432() {
    let wasm = include_bytes!("wasm/i32_432.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_433() {
    let wasm = include_bytes!("wasm/i32_433.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_434() {
    let wasm = include_bytes!("wasm/i32_434.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_435() {
    let wasm = include_bytes!("wasm/i32_435.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_436() {
    let wasm = include_bytes!("wasm/i32_436.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_437() {
    let wasm = include_bytes!("wasm/i32_437.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_438() {
    let wasm = include_bytes!("wasm/i32_438.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_439() {
    let wasm = include_bytes!("wasm/i32_439.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_440() {
    let wasm = include_bytes!("wasm/i32_440.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_441() {
    let wasm = include_bytes!("wasm/i32_441.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_442() {
    let wasm = include_bytes!("wasm/i32_442.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_443() {
    let wasm = include_bytes!("wasm/i32_443.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_444() {
    let wasm = include_bytes!("wasm/i32_444.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_445() {
    let wasm = include_bytes!("wasm/i32_445.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_446() {
    let wasm = include_bytes!("wasm/i32_446.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_447() {
    let wasm = include_bytes!("wasm/i32_447.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_448() {
    let wasm = include_bytes!("wasm/i32_448.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_449() {
    let wasm = include_bytes!("wasm/i32_449.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_450() {
    let wasm = include_bytes!("wasm/i32_450.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_451() {
    let wasm = include_bytes!("wasm/i32_451.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_452() {
    let wasm = include_bytes!("wasm/i32_452.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_453() {
    let wasm = include_bytes!("wasm/i32_453.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_454() {
    let wasm = include_bytes!("wasm/i32_454.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_455() {
    let wasm = include_bytes!("wasm/i32_455.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_456() {
    let wasm = include_bytes!("wasm/i32_456.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn i32_457() {
    let wasm = include_bytes!("wasm/i32_457.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreachable_0() {
    let wasm = include_bytes!("wasm/unreachable_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_0() {
    let wasm = include_bytes!("wasm/bulk_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_1() {
    let wasm = include_bytes!("wasm/bulk_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_2() {
    let wasm = include_bytes!("wasm/bulk_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_18() {
    let wasm = include_bytes!("wasm/bulk_18.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_47() {
    let wasm = include_bytes!("wasm/bulk_47.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_60() {
    let wasm = include_bytes!("wasm/bulk_60.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_71() {
    let wasm = include_bytes!("wasm/bulk_71.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_72() {
    let wasm = include_bytes!("wasm/bulk_72.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_73() {
    let wasm = include_bytes!("wasm/bulk_73.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_85() {
    let wasm = include_bytes!("wasm/bulk_85.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_96() {
    let wasm = include_bytes!("wasm/bulk_96.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_97() {
    let wasm = include_bytes!("wasm/bulk_97.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn bulk_98() {
    let wasm = include_bytes!("wasm/bulk_98.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn traps_0() {
    let wasm = include_bytes!("wasm/traps_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn traps_7() {
    let wasm = include_bytes!("wasm/traps_7.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn traps_12() {
    let wasm = include_bytes!("wasm/traps_12.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn traps_21() {
    let wasm = include_bytes!("wasm/traps_21.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn local_tee_0() {
    let wasm = include_bytes!("wasm/local_tee_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn local_tee_56() {
    let wasm = include_bytes!("wasm/local_tee_56.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_57() {
    let wasm = include_bytes!("wasm/local_tee_57.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_58() {
    let wasm = include_bytes!("wasm/local_tee_58.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_59() {
    let wasm = include_bytes!("wasm/local_tee_59.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_60() {
    let wasm = include_bytes!("wasm/local_tee_60.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_61() {
    let wasm = include_bytes!("wasm/local_tee_61.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_62() {
    let wasm = include_bytes!("wasm/local_tee_62.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_63() {
    let wasm = include_bytes!("wasm/local_tee_63.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_64() {
    let wasm = include_bytes!("wasm/local_tee_64.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_65() {
    let wasm = include_bytes!("wasm/local_tee_65.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_66() {
    let wasm = include_bytes!("wasm/local_tee_66.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_67() {
    let wasm = include_bytes!("wasm/local_tee_67.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_68() {
    let wasm = include_bytes!("wasm/local_tee_68.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_69() {
    let wasm = include_bytes!("wasm/local_tee_69.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_70() {
    let wasm = include_bytes!("wasm/local_tee_70.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_71() {
    let wasm = include_bytes!("wasm/local_tee_71.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_72() {
    let wasm = include_bytes!("wasm/local_tee_72.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_73() {
    let wasm = include_bytes!("wasm/local_tee_73.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_74() {
    let wasm = include_bytes!("wasm/local_tee_74.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_75() {
    let wasm = include_bytes!("wasm/local_tee_75.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_76() {
    let wasm = include_bytes!("wasm/local_tee_76.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_77() {
    let wasm = include_bytes!("wasm/local_tee_77.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_78() {
    let wasm = include_bytes!("wasm/local_tee_78.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_79() {
    let wasm = include_bytes!("wasm/local_tee_79.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_80() {
    let wasm = include_bytes!("wasm/local_tee_80.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_81() {
    let wasm = include_bytes!("wasm/local_tee_81.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_82() {
    let wasm = include_bytes!("wasm/local_tee_82.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_83() {
    let wasm = include_bytes!("wasm/local_tee_83.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_84() {
    let wasm = include_bytes!("wasm/local_tee_84.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_85() {
    let wasm = include_bytes!("wasm/local_tee_85.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_86() {
    let wasm = include_bytes!("wasm/local_tee_86.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_87() {
    let wasm = include_bytes!("wasm/local_tee_87.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_88() {
    let wasm = include_bytes!("wasm/local_tee_88.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_89() {
    let wasm = include_bytes!("wasm/local_tee_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_90() {
    let wasm = include_bytes!("wasm/local_tee_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_91() {
    let wasm = include_bytes!("wasm/local_tee_91.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_92() {
    let wasm = include_bytes!("wasm/local_tee_92.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_93() {
    let wasm = include_bytes!("wasm/local_tee_93.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_94() {
    let wasm = include_bytes!("wasm/local_tee_94.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_95() {
    let wasm = include_bytes!("wasm/local_tee_95.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn local_tee_96() {
    let wasm = include_bytes!("wasm/local_tee_96.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_bitwise_0() {
    let wasm = include_bytes!("wasm/f64_bitwise_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn f64_bitwise_361() {
    let wasm = include_bytes!("wasm/f64_bitwise_361.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_bitwise_362() {
    let wasm = include_bytes!("wasm/f64_bitwise_362.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_bitwise_363() {
    let wasm = include_bytes!("wasm/f64_bitwise_363.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn binary_0() {
    let wasm = include_bytes!("wasm/binary_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_1() {
    let wasm = include_bytes!("wasm/binary_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_2() {
    let wasm = include_bytes!("wasm/binary_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_3() {
    let wasm = include_bytes!("wasm/binary_3.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_55() {
    let wasm = include_bytes!("wasm/binary_55.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_60() {
    let wasm = include_bytes!("wasm/binary_60.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_61() {
    let wasm = include_bytes!("wasm/binary_61.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_68() {
    let wasm = include_bytes!("wasm/binary_68.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_69() {
    let wasm = include_bytes!("wasm/binary_69.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_70() {
    let wasm = include_bytes!("wasm/binary_70.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_73() {
    let wasm = include_bytes!("wasm/binary_73.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_82() {
    let wasm = include_bytes!("wasm/binary_82.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_87() {
    let wasm = include_bytes!("wasm/binary_87.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_93() {
    let wasm = include_bytes!("wasm/binary_93.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_96() {
    let wasm = include_bytes!("wasm/binary_96.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_99() {
    let wasm = include_bytes!("wasm/binary_99.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_103() {
    let wasm = include_bytes!("wasm/binary_103.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_108() {
    let wasm = include_bytes!("wasm/binary_108.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_110() {
    let wasm = include_bytes!("wasm/binary_110.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_grow_0() {
    let wasm = include_bytes!("wasm/memory_grow_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_grow_21() {
    let wasm = include_bytes!("wasm/memory_grow_21.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_grow_30() {
    let wasm = include_bytes!("wasm/memory_grow_30.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_grow_39() {
    let wasm = include_bytes!("wasm/memory_grow_39.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_grow_51() {
    let wasm = include_bytes!("wasm/memory_grow_51.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_grow_89() {
    let wasm = include_bytes!("wasm/memory_grow_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_grow_90() {
    let wasm = include_bytes!("wasm/memory_grow_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_grow_91() {
    let wasm = include_bytes!("wasm/memory_grow_91.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_grow_92() {
    let wasm = include_bytes!("wasm/memory_grow_92.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_grow_93() {
    let wasm = include_bytes!("wasm/memory_grow_93.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_grow_94() {
    let wasm = include_bytes!("wasm/memory_grow_94.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_grow_95() {
    let wasm = include_bytes!("wasm/memory_grow_95.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn tokens_0() {
    let wasm = include_bytes!("wasm/tokens_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_1() {
    let wasm = include_bytes!("wasm/tokens_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_2() {
    let wasm = include_bytes!("wasm/tokens_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_3() {
    let wasm = include_bytes!("wasm/tokens_3.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_4() {
    let wasm = include_bytes!("wasm/tokens_4.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_5() {
    let wasm = include_bytes!("wasm/tokens_5.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_6() {
    let wasm = include_bytes!("wasm/tokens_6.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_7() {
    let wasm = include_bytes!("wasm/tokens_7.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_8() {
    let wasm = include_bytes!("wasm/tokens_8.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_9() {
    let wasm = include_bytes!("wasm/tokens_9.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_10() {
    let wasm = include_bytes!("wasm/tokens_10.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_11() {
    let wasm = include_bytes!("wasm/tokens_11.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_12() {
    let wasm = include_bytes!("wasm/tokens_12.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_13() {
    let wasm = include_bytes!("wasm/tokens_13.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_14() {
    let wasm = include_bytes!("wasm/tokens_14.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_15() {
    let wasm = include_bytes!("wasm/tokens_15.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_16() {
    let wasm = include_bytes!("wasm/tokens_16.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_18() {
    let wasm = include_bytes!("wasm/tokens_18.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_20() {
    let wasm = include_bytes!("wasm/tokens_20.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_22() {
    let wasm = include_bytes!("wasm/tokens_22.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_23() {
    let wasm = include_bytes!("wasm/tokens_23.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_24() {
    let wasm = include_bytes!("wasm/tokens_24.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_26() {
    let wasm = include_bytes!("wasm/tokens_26.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_28() {
    let wasm = include_bytes!("wasm/tokens_28.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_30() {
    let wasm = include_bytes!("wasm/tokens_30.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_32() {
    let wasm = include_bytes!("wasm/tokens_32.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_34() {
    let wasm = include_bytes!("wasm/tokens_34.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_36() {
    let wasm = include_bytes!("wasm/tokens_36.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_38() {
    let wasm = include_bytes!("wasm/tokens_38.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_40() {
    let wasm = include_bytes!("wasm/tokens_40.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_42() {
    let wasm = include_bytes!("wasm/tokens_42.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_44() {
    let wasm = include_bytes!("wasm/tokens_44.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_46() {
    let wasm = include_bytes!("wasm/tokens_46.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_48() {
    let wasm = include_bytes!("wasm/tokens_48.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn tokens_50() {
    let wasm = include_bytes!("wasm/tokens_50.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn call_indirect_0() {
    let wasm = include_bytes!("wasm/call_indirect_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn call_indirect_123() {
    let wasm = include_bytes!("wasm/call_indirect_123.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn call_indirect_147() {
    let wasm = include_bytes!("wasm/call_indirect_147.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_148() {
    let wasm = include_bytes!("wasm/call_indirect_148.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_149() {
    let wasm = include_bytes!("wasm/call_indirect_149.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_150() {
    let wasm = include_bytes!("wasm/call_indirect_150.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_151() {
    let wasm = include_bytes!("wasm/call_indirect_151.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_152() {
    let wasm = include_bytes!("wasm/call_indirect_152.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_153() {
    let wasm = include_bytes!("wasm/call_indirect_153.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_154() {
    let wasm = include_bytes!("wasm/call_indirect_154.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_155() {
    let wasm = include_bytes!("wasm/call_indirect_155.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_156() {
    let wasm = include_bytes!("wasm/call_indirect_156.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_157() {
    let wasm = include_bytes!("wasm/call_indirect_157.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_158() {
    let wasm = include_bytes!("wasm/call_indirect_158.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_159() {
    let wasm = include_bytes!("wasm/call_indirect_159.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_160() {
    let wasm = include_bytes!("wasm/call_indirect_160.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_161() {
    let wasm = include_bytes!("wasm/call_indirect_161.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_162() {
    let wasm = include_bytes!("wasm/call_indirect_162.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_163() {
    let wasm = include_bytes!("wasm/call_indirect_163.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_164() {
    let wasm = include_bytes!("wasm/call_indirect_164.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_165() {
    let wasm = include_bytes!("wasm/call_indirect_165.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_166() {
    let wasm = include_bytes!("wasm/call_indirect_166.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_167() {
    let wasm = include_bytes!("wasm/call_indirect_167.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_168() {
    let wasm = include_bytes!("wasm/call_indirect_168.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn call_indirect_169() {
    let wasm = include_bytes!("wasm/call_indirect_169.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn type_0() {
    let wasm = include_bytes!("wasm/type_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn load_0() {
    let wasm = include_bytes!("wasm/load_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn load_51() {
    let wasm = include_bytes!("wasm/load_51.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_52() {
    let wasm = include_bytes!("wasm/load_52.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_53() {
    let wasm = include_bytes!("wasm/load_53.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_54() {
    let wasm = include_bytes!("wasm/load_54.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_55() {
    let wasm = include_bytes!("wasm/load_55.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_56() {
    let wasm = include_bytes!("wasm/load_56.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_57() {
    let wasm = include_bytes!("wasm/load_57.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_58() {
    let wasm = include_bytes!("wasm/load_58.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_59() {
    let wasm = include_bytes!("wasm/load_59.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_60() {
    let wasm = include_bytes!("wasm/load_60.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_61() {
    let wasm = include_bytes!("wasm/load_61.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_62() {
    let wasm = include_bytes!("wasm/load_62.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_63() {
    let wasm = include_bytes!("wasm/load_63.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_64() {
    let wasm = include_bytes!("wasm/load_64.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_65() {
    let wasm = include_bytes!("wasm/load_65.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_66() {
    let wasm = include_bytes!("wasm/load_66.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_67() {
    let wasm = include_bytes!("wasm/load_67.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_68() {
    let wasm = include_bytes!("wasm/load_68.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_69() {
    let wasm = include_bytes!("wasm/load_69.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_70() {
    let wasm = include_bytes!("wasm/load_70.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_71() {
    let wasm = include_bytes!("wasm/load_71.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_72() {
    let wasm = include_bytes!("wasm/load_72.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_73() {
    let wasm = include_bytes!("wasm/load_73.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_74() {
    let wasm = include_bytes!("wasm/load_74.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_75() {
    let wasm = include_bytes!("wasm/load_75.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_76() {
    let wasm = include_bytes!("wasm/load_76.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_77() {
    let wasm = include_bytes!("wasm/load_77.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_78() {
    let wasm = include_bytes!("wasm/load_78.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_79() {
    let wasm = include_bytes!("wasm/load_79.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_80() {
    let wasm = include_bytes!("wasm/load_80.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_81() {
    let wasm = include_bytes!("wasm/load_81.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_82() {
    let wasm = include_bytes!("wasm/load_82.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_83() {
    let wasm = include_bytes!("wasm/load_83.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_84() {
    let wasm = include_bytes!("wasm/load_84.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_85() {
    let wasm = include_bytes!("wasm/load_85.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_86() {
    let wasm = include_bytes!("wasm/load_86.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_87() {
    let wasm = include_bytes!("wasm/load_87.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_88() {
    let wasm = include_bytes!("wasm/load_88.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_89() {
    let wasm = include_bytes!("wasm/load_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_90() {
    let wasm = include_bytes!("wasm/load_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_91() {
    let wasm = include_bytes!("wasm/load_91.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_92() {
    let wasm = include_bytes!("wasm/load_92.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_93() {
    let wasm = include_bytes!("wasm/load_93.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_94() {
    let wasm = include_bytes!("wasm/load_94.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_95() {
    let wasm = include_bytes!("wasm/load_95.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn load_96() {
    let wasm = include_bytes!("wasm/load_96.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_0() {
    let wasm = include_bytes!("wasm/memory_fill_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_4() {
    let wasm = include_bytes!("wasm/memory_fill_4.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_6() {
    let wasm = include_bytes!("wasm/memory_fill_6.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_8() {
    let wasm = include_bytes!("wasm/memory_fill_8.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_11() {
    let wasm = include_bytes!("wasm/memory_fill_11.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_13() {
    let wasm = include_bytes!("wasm/memory_fill_13.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_15() {
    let wasm = include_bytes!("wasm/memory_fill_15.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_20() {
    let wasm = include_bytes!("wasm/memory_fill_20.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_27() {
    let wasm = include_bytes!("wasm/memory_fill_27.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_28() {
    let wasm = include_bytes!("wasm/memory_fill_28.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_29() {
    let wasm = include_bytes!("wasm/memory_fill_29.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_30() {
    let wasm = include_bytes!("wasm/memory_fill_30.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_31() {
    let wasm = include_bytes!("wasm/memory_fill_31.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_32() {
    let wasm = include_bytes!("wasm/memory_fill_32.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_33() {
    let wasm = include_bytes!("wasm/memory_fill_33.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_34() {
    let wasm = include_bytes!("wasm/memory_fill_34.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_35() {
    let wasm = include_bytes!("wasm/memory_fill_35.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_36() {
    let wasm = include_bytes!("wasm/memory_fill_36.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_37() {
    let wasm = include_bytes!("wasm/memory_fill_37.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_38() {
    let wasm = include_bytes!("wasm/memory_fill_38.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_39() {
    let wasm = include_bytes!("wasm/memory_fill_39.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_40() {
    let wasm = include_bytes!("wasm/memory_fill_40.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_41() {
    let wasm = include_bytes!("wasm/memory_fill_41.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_42() {
    let wasm = include_bytes!("wasm/memory_fill_42.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_43() {
    let wasm = include_bytes!("wasm/memory_fill_43.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_44() {
    let wasm = include_bytes!("wasm/memory_fill_44.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_45() {
    let wasm = include_bytes!("wasm/memory_fill_45.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_46() {
    let wasm = include_bytes!("wasm/memory_fill_46.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_47() {
    let wasm = include_bytes!("wasm/memory_fill_47.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_48() {
    let wasm = include_bytes!("wasm/memory_fill_48.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_49() {
    let wasm = include_bytes!("wasm/memory_fill_49.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_50() {
    let wasm = include_bytes!("wasm/memory_fill_50.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_51() {
    let wasm = include_bytes!("wasm/memory_fill_51.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_52() {
    let wasm = include_bytes!("wasm/memory_fill_52.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_53() {
    let wasm = include_bytes!("wasm/memory_fill_53.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_54() {
    let wasm = include_bytes!("wasm/memory_fill_54.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_55() {
    let wasm = include_bytes!("wasm/memory_fill_55.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_56() {
    let wasm = include_bytes!("wasm/memory_fill_56.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_57() {
    let wasm = include_bytes!("wasm/memory_fill_57.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_58() {
    let wasm = include_bytes!("wasm/memory_fill_58.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_59() {
    let wasm = include_bytes!("wasm/memory_fill_59.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_60() {
    let wasm = include_bytes!("wasm/memory_fill_60.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_61() {
    let wasm = include_bytes!("wasm/memory_fill_61.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_62() {
    let wasm = include_bytes!("wasm/memory_fill_62.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_63() {
    let wasm = include_bytes!("wasm/memory_fill_63.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_64() {
    let wasm = include_bytes!("wasm/memory_fill_64.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_65() {
    let wasm = include_bytes!("wasm/memory_fill_65.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_66() {
    let wasm = include_bytes!("wasm/memory_fill_66.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_67() {
    let wasm = include_bytes!("wasm/memory_fill_67.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_68() {
    let wasm = include_bytes!("wasm/memory_fill_68.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_69() {
    let wasm = include_bytes!("wasm/memory_fill_69.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_70() {
    let wasm = include_bytes!("wasm/memory_fill_70.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_71() {
    let wasm = include_bytes!("wasm/memory_fill_71.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_72() {
    let wasm = include_bytes!("wasm/memory_fill_72.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_73() {
    let wasm = include_bytes!("wasm/memory_fill_73.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_74() {
    let wasm = include_bytes!("wasm/memory_fill_74.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_75() {
    let wasm = include_bytes!("wasm/memory_fill_75.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_76() {
    let wasm = include_bytes!("wasm/memory_fill_76.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_77() {
    let wasm = include_bytes!("wasm/memory_fill_77.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_78() {
    let wasm = include_bytes!("wasm/memory_fill_78.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_79() {
    let wasm = include_bytes!("wasm/memory_fill_79.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_80() {
    let wasm = include_bytes!("wasm/memory_fill_80.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_81() {
    let wasm = include_bytes!("wasm/memory_fill_81.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_82() {
    let wasm = include_bytes!("wasm/memory_fill_82.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_83() {
    let wasm = include_bytes!("wasm/memory_fill_83.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_84() {
    let wasm = include_bytes!("wasm/memory_fill_84.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_85() {
    let wasm = include_bytes!("wasm/memory_fill_85.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_86() {
    let wasm = include_bytes!("wasm/memory_fill_86.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_87() {
    let wasm = include_bytes!("wasm/memory_fill_87.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_88() {
    let wasm = include_bytes!("wasm/memory_fill_88.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_89() {
    let wasm = include_bytes!("wasm/memory_fill_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_90() {
    let wasm = include_bytes!("wasm/memory_fill_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_fill_91() {
    let wasm = include_bytes!("wasm/memory_fill_91.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_94() {
    let wasm = include_bytes!("wasm/memory_fill_94.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_fill_97() {
    let wasm = include_bytes!("wasm/memory_fill_97.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_size_0() {
    let wasm = include_bytes!("wasm/memory_size_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_size_8() {
    let wasm = include_bytes!("wasm/memory_size_8.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_size_16() {
    let wasm = include_bytes!("wasm/memory_size_16.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_size_28() {
    let wasm = include_bytes!("wasm/memory_size_28.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_size_40() {
    let wasm = include_bytes!("wasm/memory_size_40.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_size_41() {
    let wasm = include_bytes!("wasm/memory_size_41.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn imports_0() {
    let wasm = include_bytes!("wasm/imports_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_2() {
    let wasm = include_bytes!("wasm/imports_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_5() {
    let wasm = include_bytes!("wasm/imports_5.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn imports_6() {
    let wasm = include_bytes!("wasm/imports_6.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_8() {
    let wasm = include_bytes!("wasm/imports_8.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_10() {
    let wasm = include_bytes!("wasm/imports_10.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_11() {
    let wasm = include_bytes!("wasm/imports_11.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_12() {
    let wasm = include_bytes!("wasm/imports_12.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_13() {
    let wasm = include_bytes!("wasm/imports_13.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_14() {
    let wasm = include_bytes!("wasm/imports_14.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_15() {
    let wasm = include_bytes!("wasm/imports_15.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_16() {
    let wasm = include_bytes!("wasm/imports_16.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_41() {
    let wasm = include_bytes!("wasm/imports_41.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_46() {
    let wasm = include_bytes!("wasm/imports_46.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_47() {
    let wasm = include_bytes!("wasm/imports_47.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_48() {
    let wasm = include_bytes!("wasm/imports_48.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_69() {
    let wasm = include_bytes!("wasm/imports_69.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_75() {
    let wasm = include_bytes!("wasm/imports_75.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_81() {
    let wasm = include_bytes!("wasm/imports_81.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_82() {
    let wasm = include_bytes!("wasm/imports_82.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_83() {
    let wasm = include_bytes!("wasm/imports_83.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_84() {
    let wasm = include_bytes!("wasm/imports_84.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_85() {
    let wasm = include_bytes!("wasm/imports_85.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_86() {
    let wasm = include_bytes!("wasm/imports_86.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_87() {
    let wasm = include_bytes!("wasm/imports_87.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_88() {
    let wasm = include_bytes!("wasm/imports_88.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_89() {
    let wasm = include_bytes!("wasm/imports_89.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_90() {
    let wasm = include_bytes!("wasm/imports_90.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_91() {
    let wasm = include_bytes!("wasm/imports_91.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_92() {
    let wasm = include_bytes!("wasm/imports_92.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_93() {
    let wasm = include_bytes!("wasm/imports_93.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_94() {
    let wasm = include_bytes!("wasm/imports_94.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_95() {
    let wasm = include_bytes!("wasm/imports_95.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_96() {
    let wasm = include_bytes!("wasm/imports_96.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_97() {
    let wasm = include_bytes!("wasm/imports_97.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_98() {
    let wasm = include_bytes!("wasm/imports_98.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_99() {
    let wasm = include_bytes!("wasm/imports_99.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_100() {
    let wasm = include_bytes!("wasm/imports_100.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_101() {
    let wasm = include_bytes!("wasm/imports_101.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_114() {
    let wasm = include_bytes!("wasm/imports_114.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_119() {
    let wasm = include_bytes!("wasm/imports_119.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_124() {
    let wasm = include_bytes!("wasm/imports_124.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn imports_125() {
    let wasm = include_bytes!("wasm/imports_125.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn imports_126() {
    let wasm = include_bytes!("wasm/imports_126.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn imports_127() {
    let wasm = include_bytes!("wasm/imports_127.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_128() {
    let wasm = include_bytes!("wasm/imports_128.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_129() {
    let wasm = include_bytes!("wasm/imports_129.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_130() {
    let wasm = include_bytes!("wasm/imports_130.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_131() {
    let wasm = include_bytes!("wasm/imports_131.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_132() {
    let wasm = include_bytes!("wasm/imports_132.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_133() {
    let wasm = include_bytes!("wasm/imports_133.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_134() {
    let wasm = include_bytes!("wasm/imports_134.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_135() {
    let wasm = include_bytes!("wasm/imports_135.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_150() {
    let wasm = include_bytes!("wasm/imports_150.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_156() {
    let wasm = include_bytes!("wasm/imports_156.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_159() {
    let wasm = include_bytes!("wasm/imports_159.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_162() {
    let wasm = include_bytes!("wasm/imports_162.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn imports_180() {
    let wasm = include_bytes!("wasm/imports_180.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn left_to_right_0() {
    let wasm = include_bytes!("wasm/left-to-right_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn ref_is_null_0() {
    let wasm = include_bytes!("wasm/ref_is_null_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn ref_is_null_14() {
    let wasm = include_bytes!("wasm/ref_is_null_14.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn ref_is_null_15() {
    let wasm = include_bytes!("wasm/ref_is_null_15.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_trap_0() {
    let wasm = include_bytes!("wasm/memory_trap_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_trap_14() {
    let wasm = include_bytes!("wasm/memory_trap_14.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_0() {
    let wasm = include_bytes!("wasm/binary-leb128_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_1() {
    let wasm = include_bytes!("wasm/binary-leb128_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_2() {
    let wasm = include_bytes!("wasm/binary-leb128_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_3() {
    let wasm = include_bytes!("wasm/binary-leb128_3.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_4() {
    let wasm = include_bytes!("wasm/binary-leb128_4.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_5() {
    let wasm = include_bytes!("wasm/binary-leb128_5.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_6() {
    let wasm = include_bytes!("wasm/binary-leb128_6.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_7() {
    let wasm = include_bytes!("wasm/binary-leb128_7.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_8() {
    let wasm = include_bytes!("wasm/binary-leb128_8.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_9() {
    let wasm = include_bytes!("wasm/binary-leb128_9.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_10() {
    let wasm = include_bytes!("wasm/binary-leb128_10.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_11() {
    let wasm = include_bytes!("wasm/binary-leb128_11.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_12() {
    let wasm = include_bytes!("wasm/binary-leb128_12.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_13() {
    let wasm = include_bytes!("wasm/binary-leb128_13.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_14() {
    let wasm = include_bytes!("wasm/binary-leb128_14.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_15() {
    let wasm = include_bytes!("wasm/binary-leb128_15.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_16() {
    let wasm = include_bytes!("wasm/binary-leb128_16.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_17() {
    let wasm = include_bytes!("wasm/binary-leb128_17.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_18() {
    let wasm = include_bytes!("wasm/binary-leb128_18.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_19() {
    let wasm = include_bytes!("wasm/binary-leb128_19.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_20() {
    let wasm = include_bytes!("wasm/binary-leb128_20.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_21() {
    let wasm = include_bytes!("wasm/binary-leb128_21.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_22() {
    let wasm = include_bytes!("wasm/binary-leb128_22.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_23() {
    let wasm = include_bytes!("wasm/binary-leb128_23.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_24() {
    let wasm = include_bytes!("wasm/binary-leb128_24.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_81() {
    let wasm = include_bytes!("wasm/binary-leb128_81.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_83() {
    let wasm = include_bytes!("wasm/binary-leb128_83.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_84() {
    let wasm = include_bytes!("wasm/binary-leb128_84.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_85() {
    let wasm = include_bytes!("wasm/binary-leb128_85.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_86() {
    let wasm = include_bytes!("wasm/binary-leb128_86.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_87() {
    let wasm = include_bytes!("wasm/binary-leb128_87.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_88() {
    let wasm = include_bytes!("wasm/binary-leb128_88.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn binary_leb128_89() {
    let wasm = include_bytes!("wasm/binary-leb128_89.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn br_table_0() {
    let wasm = include_bytes!("wasm/br_table_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn br_table_150() {
    let wasm = include_bytes!("wasm/br_table_150.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_151() {
    let wasm = include_bytes!("wasm/br_table_151.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_152() {
    let wasm = include_bytes!("wasm/br_table_152.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_153() {
    let wasm = include_bytes!("wasm/br_table_153.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_154() {
    let wasm = include_bytes!("wasm/br_table_154.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_155() {
    let wasm = include_bytes!("wasm/br_table_155.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_156() {
    let wasm = include_bytes!("wasm/br_table_156.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_157() {
    let wasm = include_bytes!("wasm/br_table_157.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_158() {
    let wasm = include_bytes!("wasm/br_table_158.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_159() {
    let wasm = include_bytes!("wasm/br_table_159.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_160() {
    let wasm = include_bytes!("wasm/br_table_160.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_161() {
    let wasm = include_bytes!("wasm/br_table_161.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_162() {
    let wasm = include_bytes!("wasm/br_table_162.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_163() {
    let wasm = include_bytes!("wasm/br_table_163.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_164() {
    let wasm = include_bytes!("wasm/br_table_164.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_165() {
    let wasm = include_bytes!("wasm/br_table_165.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_166() {
    let wasm = include_bytes!("wasm/br_table_166.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_167() {
    let wasm = include_bytes!("wasm/br_table_167.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_168() {
    let wasm = include_bytes!("wasm/br_table_168.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_169() {
    let wasm = include_bytes!("wasm/br_table_169.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_170() {
    let wasm = include_bytes!("wasm/br_table_170.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_171() {
    let wasm = include_bytes!("wasm/br_table_171.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_172() {
    let wasm = include_bytes!("wasm/br_table_172.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_table_173() {
    let wasm = include_bytes!("wasm/br_table_173.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_0() {
    let wasm = include_bytes!("wasm/select_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn select_119() {
    let wasm = include_bytes!("wasm/select_119.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_120() {
    let wasm = include_bytes!("wasm/select_120.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_121() {
    let wasm = include_bytes!("wasm/select_121.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_122() {
    let wasm = include_bytes!("wasm/select_122.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_123() {
    let wasm = include_bytes!("wasm/select_123.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_124() {
    let wasm = include_bytes!("wasm/select_124.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_125() {
    let wasm = include_bytes!("wasm/select_125.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_126() {
    let wasm = include_bytes!("wasm/select_126.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_127() {
    let wasm = include_bytes!("wasm/select_127.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_128() {
    let wasm = include_bytes!("wasm/select_128.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_129() {
    let wasm = include_bytes!("wasm/select_129.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_130() {
    let wasm = include_bytes!("wasm/select_130.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_131() {
    let wasm = include_bytes!("wasm/select_131.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_132() {
    let wasm = include_bytes!("wasm/select_132.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_133() {
    let wasm = include_bytes!("wasm/select_133.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_134() {
    let wasm = include_bytes!("wasm/select_134.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_135() {
    let wasm = include_bytes!("wasm/select_135.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_136() {
    let wasm = include_bytes!("wasm/select_136.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_137() {
    let wasm = include_bytes!("wasm/select_137.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_138() {
    let wasm = include_bytes!("wasm/select_138.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_139() {
    let wasm = include_bytes!("wasm/select_139.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_140() {
    let wasm = include_bytes!("wasm/select_140.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_141() {
    let wasm = include_bytes!("wasm/select_141.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_142() {
    let wasm = include_bytes!("wasm/select_142.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_143() {
    let wasm = include_bytes!("wasm/select_143.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_144() {
    let wasm = include_bytes!("wasm/select_144.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_145() {
    let wasm = include_bytes!("wasm/select_145.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_146() {
    let wasm = include_bytes!("wasm/select_146.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn select_147() {
    let wasm = include_bytes!("wasm/select_147.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn f32_bitwise_0() {
    let wasm = include_bytes!("wasm/f32_bitwise_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn f32_bitwise_361() {
    let wasm = include_bytes!("wasm/f32_bitwise_361.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_bitwise_362() {
    let wasm = include_bytes!("wasm/f32_bitwise_362.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_bitwise_363() {
    let wasm = include_bytes!("wasm/f32_bitwise_363.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_0() {
    let wasm = include_bytes!("wasm/memory_init_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_32() {
    let wasm = include_bytes!("wasm/memory_init_32.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_64() {
    let wasm = include_bytes!("wasm/memory_init_64.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_96() {
    let wasm = include_bytes!("wasm/memory_init_96.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_128() {
    let wasm = include_bytes!("wasm/memory_init_128.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_129() {
    let wasm = include_bytes!("wasm/memory_init_129.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_130() {
    let wasm = include_bytes!("wasm/memory_init_130.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_132() {
    let wasm = include_bytes!("wasm/memory_init_132.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_134() {
    let wasm = include_bytes!("wasm/memory_init_134.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_136() {
    let wasm = include_bytes!("wasm/memory_init_136.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_137() {
    let wasm = include_bytes!("wasm/memory_init_137.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_138() {
    let wasm = include_bytes!("wasm/memory_init_138.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_140() {
    let wasm = include_bytes!("wasm/memory_init_140.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_142() {
    let wasm = include_bytes!("wasm/memory_init_142.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_144() {
    let wasm = include_bytes!("wasm/memory_init_144.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_146() {
    let wasm = include_bytes!("wasm/memory_init_146.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_148() {
    let wasm = include_bytes!("wasm/memory_init_148.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_150() {
    let wasm = include_bytes!("wasm/memory_init_150.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_152() {
    let wasm = include_bytes!("wasm/memory_init_152.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_154() {
    let wasm = include_bytes!("wasm/memory_init_154.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_156() {
    let wasm = include_bytes!("wasm/memory_init_156.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_158() {
    let wasm = include_bytes!("wasm/memory_init_158.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_159() {
    let wasm = include_bytes!("wasm/memory_init_159.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_160() {
    let wasm = include_bytes!("wasm/memory_init_160.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_161() {
    let wasm = include_bytes!("wasm/memory_init_161.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_162() {
    let wasm = include_bytes!("wasm/memory_init_162.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_163() {
    let wasm = include_bytes!("wasm/memory_init_163.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_164() {
    let wasm = include_bytes!("wasm/memory_init_164.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_165() {
    let wasm = include_bytes!("wasm/memory_init_165.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_166() {
    let wasm = include_bytes!("wasm/memory_init_166.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_167() {
    let wasm = include_bytes!("wasm/memory_init_167.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_168() {
    let wasm = include_bytes!("wasm/memory_init_168.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_169() {
    let wasm = include_bytes!("wasm/memory_init_169.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_170() {
    let wasm = include_bytes!("wasm/memory_init_170.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_171() {
    let wasm = include_bytes!("wasm/memory_init_171.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_172() {
    let wasm = include_bytes!("wasm/memory_init_172.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_173() {
    let wasm = include_bytes!("wasm/memory_init_173.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_174() {
    let wasm = include_bytes!("wasm/memory_init_174.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_175() {
    let wasm = include_bytes!("wasm/memory_init_175.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_176() {
    let wasm = include_bytes!("wasm/memory_init_176.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_177() {
    let wasm = include_bytes!("wasm/memory_init_177.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_178() {
    let wasm = include_bytes!("wasm/memory_init_178.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_179() {
    let wasm = include_bytes!("wasm/memory_init_179.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_180() {
    let wasm = include_bytes!("wasm/memory_init_180.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_181() {
    let wasm = include_bytes!("wasm/memory_init_181.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_182() {
    let wasm = include_bytes!("wasm/memory_init_182.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_183() {
    let wasm = include_bytes!("wasm/memory_init_183.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_184() {
    let wasm = include_bytes!("wasm/memory_init_184.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_185() {
    let wasm = include_bytes!("wasm/memory_init_185.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_186() {
    let wasm = include_bytes!("wasm/memory_init_186.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_187() {
    let wasm = include_bytes!("wasm/memory_init_187.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_188() {
    let wasm = include_bytes!("wasm/memory_init_188.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_189() {
    let wasm = include_bytes!("wasm/memory_init_189.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_190() {
    let wasm = include_bytes!("wasm/memory_init_190.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_191() {
    let wasm = include_bytes!("wasm/memory_init_191.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_192() {
    let wasm = include_bytes!("wasm/memory_init_192.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_193() {
    let wasm = include_bytes!("wasm/memory_init_193.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_194() {
    let wasm = include_bytes!("wasm/memory_init_194.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_195() {
    let wasm = include_bytes!("wasm/memory_init_195.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_196() {
    let wasm = include_bytes!("wasm/memory_init_196.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_197() {
    let wasm = include_bytes!("wasm/memory_init_197.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_198() {
    let wasm = include_bytes!("wasm/memory_init_198.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_199() {
    let wasm = include_bytes!("wasm/memory_init_199.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_200() {
    let wasm = include_bytes!("wasm/memory_init_200.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_201() {
    let wasm = include_bytes!("wasm/memory_init_201.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_202() {
    let wasm = include_bytes!("wasm/memory_init_202.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_203() {
    let wasm = include_bytes!("wasm/memory_init_203.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_204() {
    let wasm = include_bytes!("wasm/memory_init_204.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_205() {
    let wasm = include_bytes!("wasm/memory_init_205.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_206() {
    let wasm = include_bytes!("wasm/memory_init_206.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_207() {
    let wasm = include_bytes!("wasm/memory_init_207.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_208() {
    let wasm = include_bytes!("wasm/memory_init_208.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_209() {
    let wasm = include_bytes!("wasm/memory_init_209.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_210() {
    let wasm = include_bytes!("wasm/memory_init_210.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_211() {
    let wasm = include_bytes!("wasm/memory_init_211.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_212() {
    let wasm = include_bytes!("wasm/memory_init_212.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_213() {
    let wasm = include_bytes!("wasm/memory_init_213.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_214() {
    let wasm = include_bytes!("wasm/memory_init_214.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_215() {
    let wasm = include_bytes!("wasm/memory_init_215.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_216() {
    let wasm = include_bytes!("wasm/memory_init_216.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_217() {
    let wasm = include_bytes!("wasm/memory_init_217.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_218() {
    let wasm = include_bytes!("wasm/memory_init_218.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_219() {
    let wasm = include_bytes!("wasm/memory_init_219.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_220() {
    let wasm = include_bytes!("wasm/memory_init_220.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn memory_init_221() {
    let wasm = include_bytes!("wasm/memory_init_221.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_224() {
    let wasm = include_bytes!("wasm/memory_init_224.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_227() {
    let wasm = include_bytes!("wasm/memory_init_227.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_230() {
    let wasm = include_bytes!("wasm/memory_init_230.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_233() {
    let wasm = include_bytes!("wasm/memory_init_233.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_236() {
    let wasm = include_bytes!("wasm/memory_init_236.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn memory_init_239() {
    let wasm = include_bytes!("wasm/memory_init_239.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_0() {
    let wasm = include_bytes!("wasm/elem_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_1() {
    let wasm = include_bytes!("wasm/elem_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_2() {
    let wasm = include_bytes!("wasm/elem_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_3() {
    let wasm = include_bytes!("wasm/elem_3.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_4() {
    let wasm = include_bytes!("wasm/elem_4.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_5() {
    let wasm = include_bytes!("wasm/elem_5.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_6() {
    let wasm = include_bytes!("wasm/elem_6.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_7() {
    let wasm = include_bytes!("wasm/elem_7.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_8() {
    let wasm = include_bytes!("wasm/elem_8.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_11() {
    let wasm = include_bytes!("wasm/elem_11.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_14() {
    let wasm = include_bytes!("wasm/elem_14.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_15() {
    let wasm = include_bytes!("wasm/elem_15.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_16() {
    let wasm = include_bytes!("wasm/elem_16.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_17() {
    let wasm = include_bytes!("wasm/elem_17.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_18() {
    let wasm = include_bytes!("wasm/elem_18.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_19() {
    let wasm = include_bytes!("wasm/elem_19.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_20() {
    let wasm = include_bytes!("wasm/elem_20.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_21() {
    let wasm = include_bytes!("wasm/elem_21.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_22() {
    let wasm = include_bytes!("wasm/elem_22.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_23() {
    let wasm = include_bytes!("wasm/elem_23.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_24() {
    let wasm = include_bytes!("wasm/elem_24.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_25() {
    let wasm = include_bytes!("wasm/elem_25.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_38() {
    let wasm = include_bytes!("wasm/elem_38.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_40() {
    let wasm = include_bytes!("wasm/elem_40.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_42() {
    let wasm = include_bytes!("wasm/elem_42.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_43() {
    let wasm = include_bytes!("wasm/elem_43.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_44() {
    let wasm = include_bytes!("wasm/elem_44.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_45() {
    let wasm = include_bytes!("wasm/elem_45.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_46() {
    let wasm = include_bytes!("wasm/elem_46.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_47() {
    let wasm = include_bytes!("wasm/elem_47.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_48() {
    let wasm = include_bytes!("wasm/elem_48.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_49() {
    let wasm = include_bytes!("wasm/elem_49.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_50() {
    let wasm = include_bytes!("wasm/elem_50.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_51() {
    let wasm = include_bytes!("wasm/elem_51.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_52() {
    let wasm = include_bytes!("wasm/elem_52.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_53() {
    let wasm = include_bytes!("wasm/elem_53.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_54() {
    let wasm = include_bytes!("wasm/elem_54.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_55() {
    let wasm = include_bytes!("wasm/elem_55.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_56() {
    let wasm = include_bytes!("wasm/elem_56.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_57() {
    let wasm = include_bytes!("wasm/elem_57.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_58() {
    let wasm = include_bytes!("wasm/elem_58.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_59() {
    let wasm = include_bytes!("wasm/elem_59.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_60() {
    let wasm = include_bytes!("wasm/elem_60.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_61() {
    let wasm = include_bytes!("wasm/elem_61.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_62() {
    let wasm = include_bytes!("wasm/elem_62.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_63() {
    let wasm = include_bytes!("wasm/elem_63.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_65() {
    let wasm = include_bytes!("wasm/elem_65.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_67() {
    let wasm = include_bytes!("wasm/elem_67.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_72() {
    let wasm = include_bytes!("wasm/elem_72.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_76() {
    let wasm = include_bytes!("wasm/elem_76.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_80() {
    let wasm = include_bytes!("wasm/elem_80.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_81() {
    let wasm = include_bytes!("wasm/elem_81.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_82() {
    let wasm = include_bytes!("wasm/elem_82.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_83() {
    let wasm = include_bytes!("wasm/elem_83.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn elem_84() {
    let wasm = include_bytes!("wasm/elem_84.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_92() {
    let wasm = include_bytes!("wasm/elem_92.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_95() {
    let wasm = include_bytes!("wasm/elem_95.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn elem_97() {
    let wasm = include_bytes!("wasm/elem_97.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_get_0() {
    let wasm = include_bytes!("wasm/table_get_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_get_11() {
    let wasm = include_bytes!("wasm/table_get_11.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_get_12() {
    let wasm = include_bytes!("wasm/table_get_12.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_get_13() {
    let wasm = include_bytes!("wasm/table_get_13.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_get_14() {
    let wasm = include_bytes!("wasm/table_get_14.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_get_15() {
    let wasm = include_bytes!("wasm/table_get_15.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_0() {
    let wasm = include_bytes!("wasm/f32_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn f32_2501() {
    let wasm = include_bytes!("wasm/f32_2501.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_2502() {
    let wasm = include_bytes!("wasm/f32_2502.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_2503() {
    let wasm = include_bytes!("wasm/f32_2503.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_2504() {
    let wasm = include_bytes!("wasm/f32_2504.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_2505() {
    let wasm = include_bytes!("wasm/f32_2505.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_2506() {
    let wasm = include_bytes!("wasm/f32_2506.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_2507() {
    let wasm = include_bytes!("wasm/f32_2507.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_2508() {
    let wasm = include_bytes!("wasm/f32_2508.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_2509() {
    let wasm = include_bytes!("wasm/f32_2509.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_2510() {
    let wasm = include_bytes!("wasm/f32_2510.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_2511() {
    let wasm = include_bytes!("wasm/f32_2511.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn start_0() {
    let wasm = include_bytes!("wasm/start_0.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn start_1() {
    let wasm = include_bytes!("wasm/start_1.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn start_2() {
    let wasm = include_bytes!("wasm/start_2.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn start_3() {
    let wasm = include_bytes!("wasm/start_3.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn start_9() {
    let wasm = include_bytes!("wasm/start_9.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn start_15() {
    let wasm = include_bytes!("wasm/start_15.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn start_16() {
    let wasm = include_bytes!("wasm/start_16.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn start_17() {
    let wasm = include_bytes!("wasm/start_17.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_0() {
    let wasm = include_bytes!("wasm/float_exprs_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_6() {
    let wasm = include_bytes!("wasm/float_exprs_6.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_17() {
    let wasm = include_bytes!("wasm/float_exprs_17.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_22() {
    let wasm = include_bytes!("wasm/float_exprs_22.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_27() {
    let wasm = include_bytes!("wasm/float_exprs_27.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_30() {
    let wasm = include_bytes!("wasm/float_exprs_30.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_39() {
    let wasm = include_bytes!("wasm/float_exprs_39.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_42() {
    let wasm = include_bytes!("wasm/float_exprs_42.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_51() {
    let wasm = include_bytes!("wasm/float_exprs_51.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_54() {
    let wasm = include_bytes!("wasm/float_exprs_54.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_57() {
    let wasm = include_bytes!("wasm/float_exprs_57.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_60() {
    let wasm = include_bytes!("wasm/float_exprs_60.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_63() {
    let wasm = include_bytes!("wasm/float_exprs_63.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_66() {
    let wasm = include_bytes!("wasm/float_exprs_66.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_69() {
    let wasm = include_bytes!("wasm/float_exprs_69.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_74() {
    let wasm = include_bytes!("wasm/float_exprs_74.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_83() {
    let wasm = include_bytes!("wasm/float_exprs_83.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_94() {
    let wasm = include_bytes!("wasm/float_exprs_94.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_105() {
    let wasm = include_bytes!("wasm/float_exprs_105.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_116() {
    let wasm = include_bytes!("wasm/float_exprs_116.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_127() {
    let wasm = include_bytes!("wasm/float_exprs_127.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_138() {
    let wasm = include_bytes!("wasm/float_exprs_138.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_149() {
    let wasm = include_bytes!("wasm/float_exprs_149.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_160() {
    let wasm = include_bytes!("wasm/float_exprs_160.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_177() {
    let wasm = include_bytes!("wasm/float_exprs_177.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_194() {
    let wasm = include_bytes!("wasm/float_exprs_194.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_205() {
    let wasm = include_bytes!("wasm/float_exprs_205.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_211() {
    let wasm = include_bytes!("wasm/float_exprs_211.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_222() {
    let wasm = include_bytes!("wasm/float_exprs_222.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_228() {
    let wasm = include_bytes!("wasm/float_exprs_228.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_241() {
    let wasm = include_bytes!("wasm/float_exprs_241.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_252() {
    let wasm = include_bytes!("wasm/float_exprs_252.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_263() {
    let wasm = include_bytes!("wasm/float_exprs_263.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_274() {
    let wasm = include_bytes!("wasm/float_exprs_274.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_285() {
    let wasm = include_bytes!("wasm/float_exprs_285.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_288() {
    let wasm = include_bytes!("wasm/float_exprs_288.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_294() {
    let wasm = include_bytes!("wasm/float_exprs_294.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_308() {
    let wasm = include_bytes!("wasm/float_exprs_308.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_319() {
    let wasm = include_bytes!("wasm/float_exprs_319.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_325() {
    let wasm = include_bytes!("wasm/float_exprs_325.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_358() {
    let wasm = include_bytes!("wasm/float_exprs_358.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_372() {
    let wasm = include_bytes!("wasm/float_exprs_372.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_386() {
    let wasm = include_bytes!("wasm/float_exprs_386.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_419() {
    let wasm = include_bytes!("wasm/float_exprs_419.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_452() {
    let wasm = include_bytes!("wasm/float_exprs_452.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_485() {
    let wasm = include_bytes!("wasm/float_exprs_485.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_518() {
    let wasm = include_bytes!("wasm/float_exprs_518.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_551() {
    let wasm = include_bytes!("wasm/float_exprs_551.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_554() {
    let wasm = include_bytes!("wasm/float_exprs_554.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_556() {
    let wasm = include_bytes!("wasm/float_exprs_556.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_558() {
    let wasm = include_bytes!("wasm/float_exprs_558.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_560() {
    let wasm = include_bytes!("wasm/float_exprs_560.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_562() {
    let wasm = include_bytes!("wasm/float_exprs_562.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_564() {
    let wasm = include_bytes!("wasm/float_exprs_564.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_568() {
    let wasm = include_bytes!("wasm/float_exprs_568.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_570() {
    let wasm = include_bytes!("wasm/float_exprs_570.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_573() {
    let wasm = include_bytes!("wasm/float_exprs_573.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_592() {
    let wasm = include_bytes!("wasm/float_exprs_592.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_603() {
    let wasm = include_bytes!("wasm/float_exprs_603.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_614() {
    let wasm = include_bytes!("wasm/float_exprs_614.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_620() {
    let wasm = include_bytes!("wasm/float_exprs_620.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_626() {
    let wasm = include_bytes!("wasm/float_exprs_626.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_629() {
    let wasm = include_bytes!("wasm/float_exprs_629.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_632() {
    let wasm = include_bytes!("wasm/float_exprs_632.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_641() {
    let wasm = include_bytes!("wasm/float_exprs_641.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_650() {
    let wasm = include_bytes!("wasm/float_exprs_650.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_659() {
    let wasm = include_bytes!("wasm/float_exprs_659.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_668() {
    let wasm = include_bytes!("wasm/float_exprs_668.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_679() {
    let wasm = include_bytes!("wasm/float_exprs_679.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_690() {
    let wasm = include_bytes!("wasm/float_exprs_690.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_701() {
    let wasm = include_bytes!("wasm/float_exprs_701.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_712() {
    let wasm = include_bytes!("wasm/float_exprs_712.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_723() {
    let wasm = include_bytes!("wasm/float_exprs_723.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_734() {
    let wasm = include_bytes!("wasm/float_exprs_734.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_745() {
    let wasm = include_bytes!("wasm/float_exprs_745.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_756() {
    let wasm = include_bytes!("wasm/float_exprs_756.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_759() {
    let wasm = include_bytes!("wasm/float_exprs_759.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_773() {
    let wasm = include_bytes!("wasm/float_exprs_773.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_776() {
    let wasm = include_bytes!("wasm/float_exprs_776.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_779() {
    let wasm = include_bytes!("wasm/float_exprs_779.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_794() {
    let wasm = include_bytes!("wasm/float_exprs_794.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_797() {
    let wasm = include_bytes!("wasm/float_exprs_797.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_800() {
    let wasm = include_bytes!("wasm/float_exprs_800.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_805() {
    let wasm = include_bytes!("wasm/float_exprs_805.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_814() {
    let wasm = include_bytes!("wasm/float_exprs_814.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_817() {
    let wasm = include_bytes!("wasm/float_exprs_817.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_820() {
    let wasm = include_bytes!("wasm/float_exprs_820.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_829() {
    let wasm = include_bytes!("wasm/float_exprs_829.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_863() {
    let wasm = include_bytes!("wasm/float_exprs_863.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_866() {
    let wasm = include_bytes!("wasm/float_exprs_866.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_873() {
    let wasm = include_bytes!("wasm/float_exprs_873.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_876() {
    let wasm = include_bytes!("wasm/float_exprs_876.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_879() {
    let wasm = include_bytes!("wasm/float_exprs_879.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_892() {
    let wasm = include_bytes!("wasm/float_exprs_892.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_894() {
    let wasm = include_bytes!("wasm/float_exprs_894.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_exprs_897() {
    let wasm = include_bytes!("wasm/float_exprs_897.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_memory_0() {
    let wasm = include_bytes!("wasm/float_memory_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_memory_15() {
    let wasm = include_bytes!("wasm/float_memory_15.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_memory_30() {
    let wasm = include_bytes!("wasm/float_memory_30.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_memory_45() {
    let wasm = include_bytes!("wasm/float_memory_45.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_memory_60() {
    let wasm = include_bytes!("wasm/float_memory_60.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn float_memory_75() {
    let wasm = include_bytes!("wasm/float_memory_75.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_size_0() {
    let wasm = include_bytes!("wasm/table_size_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_size_37() {
    let wasm = include_bytes!("wasm/table_size_37.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_size_38() {
    let wasm = include_bytes!("wasm/table_size_38.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_set_0() {
    let wasm = include_bytes!("wasm/table_set_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_set_19() {
    let wasm = include_bytes!("wasm/table_set_19.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_set_20() {
    let wasm = include_bytes!("wasm/table_set_20.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_set_21() {
    let wasm = include_bytes!("wasm/table_set_21.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_set_22() {
    let wasm = include_bytes!("wasm/table_set_22.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_set_23() {
    let wasm = include_bytes!("wasm/table_set_23.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_set_24() {
    let wasm = include_bytes!("wasm/table_set_24.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_set_25() {
    let wasm = include_bytes!("wasm/table_set_25.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_cmp_0() {
    let wasm = include_bytes!("wasm/f32_cmp_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn f32_cmp_2401() {
    let wasm = include_bytes!("wasm/f32_cmp_2401.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_cmp_2402() {
    let wasm = include_bytes!("wasm/f32_cmp_2402.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_cmp_2403() {
    let wasm = include_bytes!("wasm/f32_cmp_2403.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_cmp_2404() {
    let wasm = include_bytes!("wasm/f32_cmp_2404.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_cmp_2405() {
    let wasm = include_bytes!("wasm/f32_cmp_2405.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f32_cmp_2406() {
    let wasm = include_bytes!("wasm/f32_cmp_2406.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_0() {
    let wasm = include_bytes!("wasm/br_if_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn br_if_89() {
    let wasm = include_bytes!("wasm/br_if_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_90() {
    let wasm = include_bytes!("wasm/br_if_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_91() {
    let wasm = include_bytes!("wasm/br_if_91.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_92() {
    let wasm = include_bytes!("wasm/br_if_92.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_93() {
    let wasm = include_bytes!("wasm/br_if_93.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_94() {
    let wasm = include_bytes!("wasm/br_if_94.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_95() {
    let wasm = include_bytes!("wasm/br_if_95.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_96() {
    let wasm = include_bytes!("wasm/br_if_96.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_97() {
    let wasm = include_bytes!("wasm/br_if_97.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_98() {
    let wasm = include_bytes!("wasm/br_if_98.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_99() {
    let wasm = include_bytes!("wasm/br_if_99.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_100() {
    let wasm = include_bytes!("wasm/br_if_100.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_101() {
    let wasm = include_bytes!("wasm/br_if_101.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_102() {
    let wasm = include_bytes!("wasm/br_if_102.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_103() {
    let wasm = include_bytes!("wasm/br_if_103.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_104() {
    let wasm = include_bytes!("wasm/br_if_104.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_105() {
    let wasm = include_bytes!("wasm/br_if_105.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_106() {
    let wasm = include_bytes!("wasm/br_if_106.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_107() {
    let wasm = include_bytes!("wasm/br_if_107.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_108() {
    let wasm = include_bytes!("wasm/br_if_108.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_109() {
    let wasm = include_bytes!("wasm/br_if_109.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_110() {
    let wasm = include_bytes!("wasm/br_if_110.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_111() {
    let wasm = include_bytes!("wasm/br_if_111.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_112() {
    let wasm = include_bytes!("wasm/br_if_112.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_113() {
    let wasm = include_bytes!("wasm/br_if_113.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_114() {
    let wasm = include_bytes!("wasm/br_if_114.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_115() {
    let wasm = include_bytes!("wasm/br_if_115.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_116() {
    let wasm = include_bytes!("wasm/br_if_116.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_if_117() {
    let wasm = include_bytes!("wasm/br_if_117.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn ref_func_0() {
    let wasm = include_bytes!("wasm/ref_func_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn ref_func_2() {
    let wasm = include_bytes!("wasm/ref_func_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn ref_func_13() {
    let wasm = include_bytes!("wasm/ref_func_13.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn ref_func_14() {
    let wasm = include_bytes!("wasm/ref_func_14.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn ref_func_15() {
    let wasm = include_bytes!("wasm/ref_func_15.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn ref_func_16() {
    let wasm = include_bytes!("wasm/ref_func_16.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn unreached_valid_0() {
    let wasm = include_bytes!("wasm/unreached-valid_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn unreached_valid_5() {
    let wasm = include_bytes!("wasm/unreached-valid_5.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_fill_0() {
    let wasm = include_bytes!("wasm/table_fill_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_fill_36() {
    let wasm = include_bytes!("wasm/table_fill_36.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_fill_37() {
    let wasm = include_bytes!("wasm/table_fill_37.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_fill_38() {
    let wasm = include_bytes!("wasm/table_fill_38.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_fill_39() {
    let wasm = include_bytes!("wasm/table_fill_39.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_fill_40() {
    let wasm = include_bytes!("wasm/table_fill_40.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_fill_41() {
    let wasm = include_bytes!("wasm/table_fill_41.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_fill_42() {
    let wasm = include_bytes!("wasm/table_fill_42.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_fill_43() {
    let wasm = include_bytes!("wasm/table_fill_43.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_fill_44() {
    let wasm = include_bytes!("wasm/table_fill_44.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_0() {
    let wasm = include_bytes!("wasm/data_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_1() {
    let wasm = include_bytes!("wasm/data_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_2() {
    let wasm = include_bytes!("wasm/data_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_3() {
    let wasm = include_bytes!("wasm/data_3.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_4() {
    let wasm = include_bytes!("wasm/data_4.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_5() {
    let wasm = include_bytes!("wasm/data_5.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_6() {
    let wasm = include_bytes!("wasm/data_6.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_7() {
    let wasm = include_bytes!("wasm/data_7.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_8() {
    let wasm = include_bytes!("wasm/data_8.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_9() {
    let wasm = include_bytes!("wasm/data_9.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_10() {
    let wasm = include_bytes!("wasm/data_10.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_11() {
    let wasm = include_bytes!("wasm/data_11.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_12() {
    let wasm = include_bytes!("wasm/data_12.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_13() {
    let wasm = include_bytes!("wasm/data_13.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_14() {
    let wasm = include_bytes!("wasm/data_14.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_15() {
    let wasm = include_bytes!("wasm/data_15.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_16() {
    let wasm = include_bytes!("wasm/data_16.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_17() {
    let wasm = include_bytes!("wasm/data_17.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_18() {
    let wasm = include_bytes!("wasm/data_18.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_19() {
    let wasm = include_bytes!("wasm/data_19.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_20() {
    let wasm = include_bytes!("wasm/data_20.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_21() {
    let wasm = include_bytes!("wasm/data_21.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_22() {
    let wasm = include_bytes!("wasm/data_22.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_23() {
    let wasm = include_bytes!("wasm/data_23.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_24() {
    let wasm = include_bytes!("wasm/data_24.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_25() {
    let wasm = include_bytes!("wasm/data_25.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_26() {
    let wasm = include_bytes!("wasm/data_26.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn data_41() {
    let wasm = include_bytes!("wasm/data_41.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_42() {
    let wasm = include_bytes!("wasm/data_42.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_43() {
    let wasm = include_bytes!("wasm/data_43.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_44() {
    let wasm = include_bytes!("wasm/data_44.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_45() {
    let wasm = include_bytes!("wasm/data_45.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_46() {
    let wasm = include_bytes!("wasm/data_46.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_47() {
    let wasm = include_bytes!("wasm/data_47.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_48() {
    let wasm = include_bytes!("wasm/data_48.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_49() {
    let wasm = include_bytes!("wasm/data_49.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_50() {
    let wasm = include_bytes!("wasm/data_50.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_51() {
    let wasm = include_bytes!("wasm/data_51.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_52() {
    let wasm = include_bytes!("wasm/data_52.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_53() {
    let wasm = include_bytes!("wasm/data_53.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_54() {
    let wasm = include_bytes!("wasm/data_54.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_55() {
    let wasm = include_bytes!("wasm/data_55.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_56() {
    let wasm = include_bytes!("wasm/data_56.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_57() {
    let wasm = include_bytes!("wasm/data_57.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_58() {
    let wasm = include_bytes!("wasm/data_58.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_59() {
    let wasm = include_bytes!("wasm/data_59.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn data_60() {
    let wasm = include_bytes!("wasm/data_60.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn int_literals_0() {
    let wasm = include_bytes!("wasm/int_literals_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn address_0() {
    let wasm = include_bytes!("wasm/address_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn address_93() {
    let wasm = include_bytes!("wasm/address_93.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn address_220() {
    let wasm = include_bytes!("wasm/address_220.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn address_240() {
    let wasm = include_bytes!("wasm/address_240.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_grow_0() {
    let wasm = include_bytes!("wasm/table_grow_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_grow_22() {
    let wasm = include_bytes!("wasm/table_grow_22.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_grow_24() {
    let wasm = include_bytes!("wasm/table_grow_24.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_grow_30() {
    let wasm = include_bytes!("wasm/table_grow_30.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_grow_39() {
    let wasm = include_bytes!("wasm/table_grow_39.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_grow_43() {
    let wasm = include_bytes!("wasm/table_grow_43.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_grow_44() {
    let wasm = include_bytes!("wasm/table_grow_44.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_grow_45() {
    let wasm = include_bytes!("wasm/table_grow_45.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_grow_46() {
    let wasm = include_bytes!("wasm/table_grow_46.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_grow_47() {
    let wasm = include_bytes!("wasm/table_grow_47.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_grow_48() {
    let wasm = include_bytes!("wasm/table_grow_48.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_grow_49() {
    let wasm = include_bytes!("wasm/table_grow_49.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_ptrs_0() {
    let wasm = include_bytes!("wasm/func_ptrs_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn func_ptrs_5() {
    let wasm = include_bytes!("wasm/func_ptrs_5.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_ptrs_6() {
    let wasm = include_bytes!("wasm/func_ptrs_6.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_ptrs_7() {
    let wasm = include_bytes!("wasm/func_ptrs_7.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_ptrs_8() {
    let wasm = include_bytes!("wasm/func_ptrs_8.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_ptrs_9() {
    let wasm = include_bytes!("wasm/func_ptrs_9.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_ptrs_10() {
    let wasm = include_bytes!("wasm/func_ptrs_10.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_ptrs_11() {
    let wasm = include_bytes!("wasm/func_ptrs_11.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn func_ptrs_12() {
    let wasm = include_bytes!("wasm/func_ptrs_12.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn func_ptrs_33() {
    let wasm = include_bytes!("wasm/func_ptrs_33.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_0() {
    let wasm = include_bytes!("wasm/table_init_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_2() {
    let wasm = include_bytes!("wasm/table_init_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_34() {
    let wasm = include_bytes!("wasm/table_init_34.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_66() {
    let wasm = include_bytes!("wasm/table_init_66.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_98() {
    let wasm = include_bytes!("wasm/table_init_98.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_130() {
    let wasm = include_bytes!("wasm/table_init_130.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_162() {
    let wasm = include_bytes!("wasm/table_init_162.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_194() {
    let wasm = include_bytes!("wasm/table_init_194.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_195() {
    let wasm = include_bytes!("wasm/table_init_195.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_196() {
    let wasm = include_bytes!("wasm/table_init_196.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_197() {
    let wasm = include_bytes!("wasm/table_init_197.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_198() {
    let wasm = include_bytes!("wasm/table_init_198.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_200() {
    let wasm = include_bytes!("wasm/table_init_200.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_202() {
    let wasm = include_bytes!("wasm/table_init_202.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_204() {
    let wasm = include_bytes!("wasm/table_init_204.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_206() {
    let wasm = include_bytes!("wasm/table_init_206.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_208() {
    let wasm = include_bytes!("wasm/table_init_208.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_210() {
    let wasm = include_bytes!("wasm/table_init_210.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_212() {
    let wasm = include_bytes!("wasm/table_init_212.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_214() {
    let wasm = include_bytes!("wasm/table_init_214.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_216() {
    let wasm = include_bytes!("wasm/table_init_216.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_218() {
    let wasm = include_bytes!("wasm/table_init_218.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_220() {
    let wasm = include_bytes!("wasm/table_init_220.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_222() {
    let wasm = include_bytes!("wasm/table_init_222.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_224() {
    let wasm = include_bytes!("wasm/table_init_224.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_226() {
    let wasm = include_bytes!("wasm/table_init_226.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_228() {
    let wasm = include_bytes!("wasm/table_init_228.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_230() {
    let wasm = include_bytes!("wasm/table_init_230.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_232() {
    let wasm = include_bytes!("wasm/table_init_232.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_234() {
    let wasm = include_bytes!("wasm/table_init_234.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_236() {
    let wasm = include_bytes!("wasm/table_init_236.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_238() {
    let wasm = include_bytes!("wasm/table_init_238.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_240() {
    let wasm = include_bytes!("wasm/table_init_240.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_241() {
    let wasm = include_bytes!("wasm/table_init_241.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_242() {
    let wasm = include_bytes!("wasm/table_init_242.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_243() {
    let wasm = include_bytes!("wasm/table_init_243.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_244() {
    let wasm = include_bytes!("wasm/table_init_244.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_245() {
    let wasm = include_bytes!("wasm/table_init_245.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_246() {
    let wasm = include_bytes!("wasm/table_init_246.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_247() {
    let wasm = include_bytes!("wasm/table_init_247.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_248() {
    let wasm = include_bytes!("wasm/table_init_248.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_249() {
    let wasm = include_bytes!("wasm/table_init_249.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_250() {
    let wasm = include_bytes!("wasm/table_init_250.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_251() {
    let wasm = include_bytes!("wasm/table_init_251.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_252() {
    let wasm = include_bytes!("wasm/table_init_252.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_253() {
    let wasm = include_bytes!("wasm/table_init_253.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_254() {
    let wasm = include_bytes!("wasm/table_init_254.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_255() {
    let wasm = include_bytes!("wasm/table_init_255.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_256() {
    let wasm = include_bytes!("wasm/table_init_256.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_257() {
    let wasm = include_bytes!("wasm/table_init_257.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_258() {
    let wasm = include_bytes!("wasm/table_init_258.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_259() {
    let wasm = include_bytes!("wasm/table_init_259.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_260() {
    let wasm = include_bytes!("wasm/table_init_260.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_261() {
    let wasm = include_bytes!("wasm/table_init_261.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_262() {
    let wasm = include_bytes!("wasm/table_init_262.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_263() {
    let wasm = include_bytes!("wasm/table_init_263.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_264() {
    let wasm = include_bytes!("wasm/table_init_264.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_265() {
    let wasm = include_bytes!("wasm/table_init_265.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_266() {
    let wasm = include_bytes!("wasm/table_init_266.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_267() {
    let wasm = include_bytes!("wasm/table_init_267.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_268() {
    let wasm = include_bytes!("wasm/table_init_268.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_269() {
    let wasm = include_bytes!("wasm/table_init_269.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_270() {
    let wasm = include_bytes!("wasm/table_init_270.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_271() {
    let wasm = include_bytes!("wasm/table_init_271.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_272() {
    let wasm = include_bytes!("wasm/table_init_272.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_273() {
    let wasm = include_bytes!("wasm/table_init_273.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_274() {
    let wasm = include_bytes!("wasm/table_init_274.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_275() {
    let wasm = include_bytes!("wasm/table_init_275.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_276() {
    let wasm = include_bytes!("wasm/table_init_276.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_277() {
    let wasm = include_bytes!("wasm/table_init_277.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_278() {
    let wasm = include_bytes!("wasm/table_init_278.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_279() {
    let wasm = include_bytes!("wasm/table_init_279.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_280() {
    let wasm = include_bytes!("wasm/table_init_280.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_281() {
    let wasm = include_bytes!("wasm/table_init_281.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_282() {
    let wasm = include_bytes!("wasm/table_init_282.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_283() {
    let wasm = include_bytes!("wasm/table_init_283.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_284() {
    let wasm = include_bytes!("wasm/table_init_284.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_285() {
    let wasm = include_bytes!("wasm/table_init_285.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_286() {
    let wasm = include_bytes!("wasm/table_init_286.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_287() {
    let wasm = include_bytes!("wasm/table_init_287.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_288() {
    let wasm = include_bytes!("wasm/table_init_288.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_289() {
    let wasm = include_bytes!("wasm/table_init_289.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_290() {
    let wasm = include_bytes!("wasm/table_init_290.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_291() {
    let wasm = include_bytes!("wasm/table_init_291.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_292() {
    let wasm = include_bytes!("wasm/table_init_292.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_293() {
    let wasm = include_bytes!("wasm/table_init_293.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_294() {
    let wasm = include_bytes!("wasm/table_init_294.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_295() {
    let wasm = include_bytes!("wasm/table_init_295.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_296() {
    let wasm = include_bytes!("wasm/table_init_296.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_297() {
    let wasm = include_bytes!("wasm/table_init_297.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_298() {
    let wasm = include_bytes!("wasm/table_init_298.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_299() {
    let wasm = include_bytes!("wasm/table_init_299.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_300() {
    let wasm = include_bytes!("wasm/table_init_300.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_301() {
    let wasm = include_bytes!("wasm/table_init_301.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_302() {
    let wasm = include_bytes!("wasm/table_init_302.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_init_303() {
    let wasm = include_bytes!("wasm/table_init_303.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_337() {
    let wasm = include_bytes!("wasm/table_init_337.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_371() {
    let wasm = include_bytes!("wasm/table_init_371.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_533() {
    let wasm = include_bytes!("wasm/table_init_533.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_695() {
    let wasm = include_bytes!("wasm/table_init_695.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_761() {
    let wasm = include_bytes!("wasm/table_init_761.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_init_779() {
    let wasm = include_bytes!("wasm/table_init_779.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn global_0() {
    let wasm = include_bytes!("wasm/global_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn global_59() {
    let wasm = include_bytes!("wasm/global_59.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_60() {
    let wasm = include_bytes!("wasm/global_60.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_61() {
    let wasm = include_bytes!("wasm/global_61.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn global_62() {
    let wasm = include_bytes!("wasm/global_62.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn global_63() {
    let wasm = include_bytes!("wasm/global_63.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_64() {
    let wasm = include_bytes!("wasm/global_64.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_65() {
    let wasm = include_bytes!("wasm/global_65.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_66() {
    let wasm = include_bytes!("wasm/global_66.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_67() {
    let wasm = include_bytes!("wasm/global_67.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_68() {
    let wasm = include_bytes!("wasm/global_68.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_69() {
    let wasm = include_bytes!("wasm/global_69.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_70() {
    let wasm = include_bytes!("wasm/global_70.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_71() {
    let wasm = include_bytes!("wasm/global_71.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_72() {
    let wasm = include_bytes!("wasm/global_72.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_73() {
    let wasm = include_bytes!("wasm/global_73.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_74() {
    let wasm = include_bytes!("wasm/global_74.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_75() {
    let wasm = include_bytes!("wasm/global_75.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_76() {
    let wasm = include_bytes!("wasm/global_76.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_77() {
    let wasm = include_bytes!("wasm/global_77.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_78() {
    let wasm = include_bytes!("wasm/global_78.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_79() {
    let wasm = include_bytes!("wasm/global_79.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_80() {
    let wasm = include_bytes!("wasm/global_80.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_81() {
    let wasm = include_bytes!("wasm/global_81.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn global_84() {
    let wasm = include_bytes!("wasm/global_84.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn global_87() {
    let wasm = include_bytes!("wasm/global_87.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_88() {
    let wasm = include_bytes!("wasm/global_88.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_89() {
    let wasm = include_bytes!("wasm/global_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_90() {
    let wasm = include_bytes!("wasm/global_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_91() {
    let wasm = include_bytes!("wasm/global_91.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_92() {
    let wasm = include_bytes!("wasm/global_92.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_93() {
    let wasm = include_bytes!("wasm/global_93.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_94() {
    let wasm = include_bytes!("wasm/global_94.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_95() {
    let wasm = include_bytes!("wasm/global_95.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_96() {
    let wasm = include_bytes!("wasm/global_96.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_97() {
    let wasm = include_bytes!("wasm/global_97.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_98() {
    let wasm = include_bytes!("wasm/global_98.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_99() {
    let wasm = include_bytes!("wasm/global_99.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_100() {
    let wasm = include_bytes!("wasm/global_100.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_101() {
    let wasm = include_bytes!("wasm/global_101.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_102() {
    let wasm = include_bytes!("wasm/global_102.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_103() {
    let wasm = include_bytes!("wasm/global_103.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_104() {
    let wasm = include_bytes!("wasm/global_104.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_105() {
    let wasm = include_bytes!("wasm/global_105.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn global_106() {
    let wasm = include_bytes!("wasm/global_106.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn custom_0() {
    let wasm = include_bytes!("wasm/custom_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn custom_1() {
    let wasm = include_bytes!("wasm/custom_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn custom_2() {
    let wasm = include_bytes!("wasm/custom_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_0() {
    let wasm = include_bytes!("wasm/int_exprs_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_5() {
    let wasm = include_bytes!("wasm/int_exprs_5.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_8() {
    let wasm = include_bytes!("wasm/int_exprs_8.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_10() {
    let wasm = include_bytes!("wasm/int_exprs_10.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_15() {
    let wasm = include_bytes!("wasm/int_exprs_15.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_20() {
    let wasm = include_bytes!("wasm/int_exprs_20.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_25() {
    let wasm = include_bytes!("wasm/int_exprs_25.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_30() {
    let wasm = include_bytes!("wasm/int_exprs_30.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_35() {
    let wasm = include_bytes!("wasm/int_exprs_35.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_40() {
    let wasm = include_bytes!("wasm/int_exprs_40.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_43() {
    let wasm = include_bytes!("wasm/int_exprs_43.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_46() {
    let wasm = include_bytes!("wasm/int_exprs_46.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_51() {
    let wasm = include_bytes!("wasm/int_exprs_51.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_60() {
    let wasm = include_bytes!("wasm/int_exprs_60.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_69() {
    let wasm = include_bytes!("wasm/int_exprs_69.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_78() {
    let wasm = include_bytes!("wasm/int_exprs_78.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_87() {
    let wasm = include_bytes!("wasm/int_exprs_87.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_96() {
    let wasm = include_bytes!("wasm/int_exprs_96.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn int_exprs_105() {
    let wasm = include_bytes!("wasm/int_exprs_105.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn f64_0() {
    let wasm = include_bytes!("wasm/f64_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn f64_2501() {
    let wasm = include_bytes!("wasm/f64_2501.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_2502() {
    let wasm = include_bytes!("wasm/f64_2502.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_2503() {
    let wasm = include_bytes!("wasm/f64_2503.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_2504() {
    let wasm = include_bytes!("wasm/f64_2504.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_2505() {
    let wasm = include_bytes!("wasm/f64_2505.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_2506() {
    let wasm = include_bytes!("wasm/f64_2506.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_2507() {
    let wasm = include_bytes!("wasm/f64_2507.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_2508() {
    let wasm = include_bytes!("wasm/f64_2508.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_2509() {
    let wasm = include_bytes!("wasm/f64_2509.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_2510() {
    let wasm = include_bytes!("wasm/f64_2510.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn f64_2511() {
    let wasm = include_bytes!("wasm/f64_2511.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_0() {
    let wasm = include_bytes!("wasm/br_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn br_77() {
    let wasm = include_bytes!("wasm/br_77.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_78() {
    let wasm = include_bytes!("wasm/br_78.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_79() {
    let wasm = include_bytes!("wasm/br_79.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_80() {
    let wasm = include_bytes!("wasm/br_80.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_81() {
    let wasm = include_bytes!("wasm/br_81.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_82() {
    let wasm = include_bytes!("wasm/br_82.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_83() {
    let wasm = include_bytes!("wasm/br_83.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_84() {
    let wasm = include_bytes!("wasm/br_84.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_85() {
    let wasm = include_bytes!("wasm/br_85.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_86() {
    let wasm = include_bytes!("wasm/br_86.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_87() {
    let wasm = include_bytes!("wasm/br_87.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_88() {
    let wasm = include_bytes!("wasm/br_88.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_89() {
    let wasm = include_bytes!("wasm/br_89.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_90() {
    let wasm = include_bytes!("wasm/br_90.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_91() {
    let wasm = include_bytes!("wasm/br_91.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_92() {
    let wasm = include_bytes!("wasm/br_92.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_93() {
    let wasm = include_bytes!("wasm/br_93.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_94() {
    let wasm = include_bytes!("wasm/br_94.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_95() {
    let wasm = include_bytes!("wasm/br_95.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn br_96() {
    let wasm = include_bytes!("wasm/br_96.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn nop_0() {
    let wasm = include_bytes!("wasm/nop_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn nop_84() {
    let wasm = include_bytes!("wasm/nop_84.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn nop_85() {
    let wasm = include_bytes!("wasm/nop_85.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn nop_86() {
    let wasm = include_bytes!("wasm/nop_86.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn nop_87() {
    let wasm = include_bytes!("wasm/nop_87.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_0() {
    let wasm = include_bytes!("wasm/table_0.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_1() {
    let wasm = include_bytes!("wasm/table_1.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_2() {
    let wasm = include_bytes!("wasm/table_2.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_3() {
    let wasm = include_bytes!("wasm/table_3.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_4() {
    let wasm = include_bytes!("wasm/table_4.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_5() {
    let wasm = include_bytes!("wasm/table_5.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_6() {
    let wasm = include_bytes!("wasm/table_6.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_7() {
    let wasm = include_bytes!("wasm/table_7.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_8() {
    let wasm = include_bytes!("wasm/table_8.wasm");
    let module = Parser::new(wasm)
        .read_module()
        .expect("module should parse with no errors");
    validate(&module).expect("module should validate with no errors");
}

#[test]
fn table_9() {
    let wasm = include_bytes!("wasm/table_9.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_10() {
    let wasm = include_bytes!("wasm/table_10.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_11() {
    let wasm = include_bytes!("wasm/table_11.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}

#[test]
fn table_12() {
    let wasm = include_bytes!("wasm/table_12.wasm");
    let Ok(module) = Parser::new(wasm).read_module() else {
        // parse errors are accepted
        return;
    };
    validate(&module).expect_err("module should have a validation error");
}
