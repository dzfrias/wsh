#![allow(non_upper_case_globals)]

use std::fmt;

use num_enum::TryFromPrimitive;

/// An opcode for a WebAssembly instruction. Corresponds to an [`Instruction`](crate::Instruction).
///
/// An Opcode's [`u8`] discriminant is **not** the same as it's WebAssembly encoding. See
/// [`Opcode::try_from_byte`] in order to convert a byte to an Opcode. Instead, the [`u8`]
/// representation matches up with that of the [`Instruction`](crate::Instruction) enum. This is an
/// optimization detail.
#[derive(Debug, PartialEq, Eq, Clone, Copy, TryFromPrimitive)]
#[repr(u8)]
pub enum Opcode {
    Unreachable = 0,
    Nop = 1,
    Else = 2,
    End = 3,
    Return = 4,
    Drop = 5,
    Select = 6,
    I32Eqz = 7,
    I32Eq = 8,
    I32Ne = 9,
    I32LtS = 10,
    I32LtU = 11,
    I32GtS = 12,
    I32GtU = 13,
    I32LeS = 14,
    I32LeU = 15,
    I32GeS = 16,
    I32GeU = 17,
    I64Eqz = 18,
    I64Eq = 19,
    I64Ne = 20,
    I64LtS = 21,
    I64LtU = 22,
    I64GtS = 23,
    I64GtU = 24,
    I64LeS = 25,
    I64LeU = 26,
    I64GeS = 27,
    I64GeU = 28,
    F32Eq = 29,
    F32Ne = 30,
    F32Lt = 31,
    F32Gt = 32,
    F32Le = 33,
    F32Ge = 34,
    F64Eq = 35,
    F64Ne = 36,
    F64Lt = 37,
    F64Gt = 38,
    F64Le = 39,
    F64Ge = 40,
    I32Clz = 41,
    I32Ctz = 42,
    I32Popcnt = 43,
    I32Add = 44,
    I32Sub = 45,
    I32Mul = 46,
    I32DivS = 47,
    I32DivU = 48,
    I32RemS = 49,
    I32RemU = 50,
    I32And = 51,
    I32Or = 52,
    I32Xor = 53,
    I32Shl = 54,
    I32ShrS = 55,
    I32ShrU = 56,
    I32Rotl = 57,
    I32Rotr = 58,
    I64Clz = 59,
    I64Ctz = 60,
    I64Popcnt = 61,
    I64Add = 62,
    I64Sub = 63,
    I64Mul = 64,
    I64DivS = 65,
    I64DivU = 66,
    I64RemS = 67,
    I64RemU = 68,
    I64And = 69,
    I64Or = 70,
    I64Xor = 71,
    I64Shl = 72,
    I64ShrS = 73,
    I64ShrU = 74,
    I64Rotl = 75,
    I64Rotr = 76,
    F32Abs = 77,
    F32Neg = 78,
    F32Ceil = 79,
    F32Floor = 80,
    F32Trunc = 81,
    F32Nearest = 82,
    F32Sqrt = 83,
    F32Add = 84,
    F32Sub = 85,
    F32Mul = 86,
    F32Div = 87,
    F32Min = 88,
    F32Max = 89,
    F32Copysign = 90,
    F64Abs = 91,
    F64Neg = 92,
    F64Ceil = 93,
    F64Floor = 94,
    F64Trunc = 95,
    F64Nearest = 96,
    F64Sqrt = 97,
    F64Add = 98,
    F64Sub = 99,
    F64Mul = 100,
    F64Div = 101,
    F64Min = 102,
    F64Max = 103,
    F64Copysign = 104,
    I32WrapI64 = 105,
    I32TruncF32S = 106,
    I32TruncF32U = 107,
    I32TruncF64S = 108,
    I32TruncF64U = 109,
    I64ExtendI32S = 110,
    I64ExtendI32U = 111,
    I64TruncF32S = 112,
    I64TruncF32U = 113,
    I64TruncF64S = 114,
    I64TruncF64U = 115,
    F32ConvertI32S = 116,
    F32ConvertI32U = 117,
    F32ConvertI64S = 118,
    F32ConvertI64U = 119,
    F32DemoteF64 = 120,
    F64ConvertI32S = 121,
    F64ConvertI32U = 122,
    F64ConvertI64S = 123,
    F64ConvertI64U = 124,
    F64PromoteF32 = 125,
    I32ReinterpretF32 = 126,
    I64ReinterpretF64 = 127,
    F32ReinterpretI32 = 128,
    F64ReinterpretI64 = 129,
    MemorySize = 130,
    MemoryGrow = 131,
    MemoryCopy = 132,
    RefIsNull = 133,
    MemoryFill = 134,
    I32TruncSatF32S = 135,
    I32TruncSatF32U = 136,
    I32TruncSatF64S = 137,
    I32TruncSatF64U = 138,
    I64TruncSatF32S = 139,
    I64TruncSatF32U = 140,
    I64TruncSatF64S = 141,
    I64TruncSatF64U = 142,
    I32Extend8S = 143,
    I32Extend16S = 144,
    I64Extend8S = 145,
    I64Extend16S = 146,
    I64Extend32S = 147,
    SelectT = 148,
    I32Load = 149,
    I64Load = 150,
    F32Load = 151,
    F64Load = 152,
    I32Load8S = 153,
    I32Load8U = 154,
    I32Load16S = 155,
    I32Load16U = 156,
    I64Load8S = 157,
    I64Load8U = 158,
    I64Load16S = 159,
    I64Load16U = 160,
    I64Load32S = 161,
    I64Load32U = 162,
    I32Store = 163,
    I64Store = 164,
    F32Store = 165,
    F64Store = 166,
    I32Store8 = 167,
    I32Store16 = 168,
    I64Store8 = 169,
    I64Store16 = 170,
    I64Store32 = 171,
    Block = 172,
    Loop = 173,
    If = 174,
    Br = 175,
    BrIf = 176,
    Call = 177,
    LocalGet = 178,
    LocalSet = 179,
    LocalTee = 180,
    GlobalGet = 181,
    GlobalSet = 182,
    DataDrop = 183,
    ElemDrop = 184,
    I32Const = 185,
    F32Const = 186,
    MemoryInit = 187,
    RefFunc = 188,
    TableGet = 189,
    TableSet = 190,
    TableGrow = 191,
    TableSize = 192,
    TableFill = 193,
    RefNull = 194,
    I64Const = 195,
    F64Const = 196,
    CallIndirect = 197,
    TableCopy = 198,
    TableInit = 199,
    BrTable = 200,
}

impl Opcode {
    /// Convert from a [`u8`] to the corresponding [`Opcode`].
    ///
    /// This is **not** for decoding WebAssembly binaries (see [`Opcode::try_from_bytes`] for that).
    /// Instead, it is for translating from the [`Instruction`](crate::Instruction) enum to an
    /// [`Opcode`].
    ///
    /// # Safety
    ///
    /// In order to call safely, the caller must verify that the discriminant corresponds to an
    /// [`Opcode`]. Otherwise, this function has undefined behavior.
    pub unsafe fn from_instr_discriminant(discrim: u8) -> Self {
        std::mem::transmute(discrim)
    }

    #[inline]
    pub fn try_from_byte(byte: u8) -> Option<Opcode> {
        Self::try_from_bytes(byte, 0)
    }

    #[inline]
    pub fn try_from_bytes(prefix: u8, value: u32) -> Option<Opcode> {
        use Opcode as O;

        if is_prefix_byte(prefix) {
            let op = match value {
                0 => O::I32TruncSatF32S,
                1 => O::I32TruncSatF32U,
                2 => O::I32TruncSatF64S,
                3 => O::I32TruncSatF64U,
                4 => O::I64TruncSatF32S,
                5 => O::I64TruncSatF32U,
                6 => O::I64TruncSatF64S,
                7 => O::I64TruncSatF64U,
                8 => O::MemoryInit,
                9 => O::DataDrop,
                10 => O::MemoryCopy,
                11 => O::MemoryFill,
                12 => O::TableInit,
                13 => O::ElemDrop,
                14 => O::TableCopy,
                15 => O::TableGrow,
                16 => O::TableSize,
                17 => O::TableFill,
                _ => return None,
            };
            return Some(op);
        }
        assert!(value == 0);

        let op = match prefix {
            0x00 => O::Unreachable,
            0x01 => O::Nop,
            0x02 => O::Block,
            0x03 => O::Loop,
            0x04 => O::If,
            0x05 => O::Else,
            0x0b => O::End,
            0x0c => O::Br,
            0x0d => O::BrIf,
            0x0e => O::BrTable,
            0x0f => O::Return,
            0x10 => O::Call,
            0x11 => O::CallIndirect,
            0x1a => O::Drop,
            0x1b => O::Select,
            0x1c => O::SelectT,
            0x20 => O::LocalGet,
            0x21 => O::LocalSet,
            0x22 => O::LocalTee,
            0x23 => O::GlobalGet,
            0x24 => O::GlobalSet,
            0x25 => O::TableGet,
            0x26 => O::TableSet,
            0x28 => O::I32Load,
            0x29 => O::I64Load,
            0x2a => O::F32Load,
            0x2b => O::F64Load,
            0x2c => O::I32Load8S,
            0x2d => O::I32Load8U,
            0x2e => O::I32Load16S,
            0x2f => O::I32Load16U,
            0x30 => O::I64Load8S,
            0x31 => O::I64Load8U,
            0x32 => O::I64Load16S,
            0x33 => O::I64Load16U,
            0x34 => O::I64Load32S,
            0x35 => O::I64Load32U,
            0x36 => O::I32Store,
            0x37 => O::I64Store,
            0x38 => O::F32Store,
            0x39 => O::F64Store,
            0x3a => O::I32Store8,
            0x3b => O::I32Store16,
            0x3c => O::I64Store8,
            0x3d => O::I64Store16,
            0x3e => O::I64Store32,
            0x41 => O::I32Const,
            0x42 => O::I64Const,
            0x43 => O::F32Const,
            0x44 => O::F64Const,
            0x45 => O::I32Eqz,
            0x46 => O::I32Eq,
            0x47 => O::I32Ne,
            0x48 => O::I32LtS,
            0x49 => O::I32LtU,
            0x4a => O::I32GtS,
            0x4b => O::I32GtU,
            0x4c => O::I32LeS,
            0x4d => O::I32LeU,
            0x4e => O::I32GeS,
            0x4f => O::I32GeU,
            0x50 => O::I64Eqz,
            0x51 => O::I64Eq,
            0x52 => O::I64Ne,
            0x53 => O::I64LtS,
            0x54 => O::I64LtU,
            0x55 => O::I64GtS,
            0x56 => O::I64GtU,
            0x57 => O::I64LeS,
            0x58 => O::I64LeU,
            0x59 => O::I64GeS,
            0x5a => O::I64GeU,
            0x5b => O::F32Eq,
            0x5c => O::F32Ne,
            0x5d => O::F32Lt,
            0x5e => O::F32Gt,
            0x5f => O::F32Le,
            0x60 => O::F32Ge,
            0x61 => O::F64Eq,
            0x62 => O::F64Ne,
            0x63 => O::F64Lt,
            0x64 => O::F64Gt,
            0x65 => O::F64Le,
            0x66 => O::F64Ge,
            0x67 => O::I32Clz,
            0x68 => O::I32Ctz,
            0x69 => O::I32Popcnt,
            0x6a => O::I32Add,
            0x6b => O::I32Sub,
            0x6c => O::I32Mul,
            0x6d => O::I32DivS,
            0x6e => O::I32DivU,
            0x6f => O::I32RemS,
            0x70 => O::I32RemU,
            0x71 => O::I32And,
            0x72 => O::I32Or,
            0x73 => O::I32Xor,
            0x74 => O::I32Shl,
            0x75 => O::I32ShrS,
            0x76 => O::I32ShrU,
            0x77 => O::I32Rotl,
            0x78 => O::I32Rotr,
            0x79 => O::I64Clz,
            0x7a => O::I64Ctz,
            0x7b => O::I64Popcnt,
            0x7c => O::I64Add,
            0x7d => O::I64Sub,
            0x7e => O::I64Mul,
            0x7f => O::I64DivS,
            0x80 => O::I64DivU,
            0x81 => O::I64RemS,
            0x82 => O::I64RemU,
            0x83 => O::I64And,
            0x84 => O::I64Or,
            0x85 => O::I64Xor,
            0x86 => O::I64Shl,
            0x87 => O::I64ShrS,
            0x88 => O::I64ShrU,
            0x89 => O::I64Rotl,
            0x8a => O::I64Rotr,
            0x8b => O::F32Abs,
            0x8c => O::F32Neg,
            0x8d => O::F32Ceil,
            0x8e => O::F32Floor,
            0x8f => O::F32Trunc,
            0x90 => O::F32Nearest,
            0x91 => O::F32Sqrt,
            0x92 => O::F32Add,
            0x93 => O::F32Sub,
            0x94 => O::F32Mul,
            0x95 => O::F32Div,
            0x96 => O::F32Min,
            0x97 => O::F32Max,
            0x98 => O::F32Copysign,
            0x99 => O::F64Abs,
            0x9a => O::F64Neg,
            0x9b => O::F64Ceil,
            0x9c => O::F64Floor,
            0x9d => O::F64Trunc,
            0x9e => O::F64Nearest,
            0x9f => O::F64Sqrt,
            0xa0 => O::F64Add,
            0xa1 => O::F64Sub,
            0xa2 => O::F64Mul,
            0xa3 => O::F64Div,
            0xa4 => O::F64Min,
            0xa5 => O::F64Max,
            0xa6 => O::F64Copysign,
            0xa7 => O::I32WrapI64,
            0xa8 => O::I32TruncF32S,
            0xa9 => O::I32TruncF32U,
            0xaa => O::I32TruncF64S,
            0xab => O::I32TruncF64U,
            0xac => O::I64ExtendI32S,
            0xad => O::I64ExtendI32U,
            0xae => O::I64TruncF32S,
            0xaf => O::I64TruncF32U,
            0xb0 => O::I64TruncF64S,
            0xb1 => O::I64TruncF64U,
            0xb2 => O::F32ConvertI32S,
            0xb3 => O::F32ConvertI32U,
            0xb4 => O::F32ConvertI64S,
            0xb5 => O::F32ConvertI64U,
            0xb6 => O::F32DemoteF64,
            0xb7 => O::F64ConvertI32S,
            0xb8 => O::F64ConvertI32U,
            0xb9 => O::F64ConvertI64S,
            0xba => O::F64ConvertI64U,
            0xbb => O::F64PromoteF32,
            0xbc => O::I32ReinterpretF32,
            0xbd => O::I64ReinterpretF64,
            0xbe => O::F32ReinterpretI32,
            0xbf => O::F64ReinterpretI64,
            0xd0 => O::RefNull,
            0xd1 => O::RefIsNull,
            0xd2 => O::RefFunc,
            0x3f => O::MemorySize,
            0x40 => O::MemoryGrow,
            0xc0 => O::I32Extend8S,
            0xc1 => O::I32Extend16S,
            0xc2 => O::I64Extend8S,
            0xc3 => O::I64Extend16S,
            0xc4 => O::I64Extend32S,
            _ => return None,
        };

        Some(op)
    }
}

#[inline]
pub fn is_prefix_byte(byte: u8) -> bool {
    byte == 0xfc
}

impl fmt::Display for Opcode {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let to_write = match self {
            Opcode::Unreachable => "unreachable",
            Opcode::Nop => "nop",
            Opcode::Block => "block",
            Opcode::Loop => "loop",
            Opcode::If => "if",
            Opcode::Else => "else",
            Opcode::End => "end",
            Opcode::Br => "br",
            Opcode::BrIf => "br_if",
            Opcode::BrTable => "br_table",
            Opcode::Return => "return",
            Opcode::Call => "call",
            Opcode::CallIndirect => "call_indirect",
            Opcode::Drop => "drop",
            Opcode::Select | Opcode::SelectT => "select",
            Opcode::LocalGet => "local.get",
            Opcode::LocalSet => "local.set",
            Opcode::LocalTee => "local_tee",
            Opcode::GlobalGet => "global.get",
            Opcode::GlobalSet => "global.set",
            Opcode::I32Load => "i32.load",
            Opcode::I64Load => "i64.load",
            Opcode::F32Load => "f32.load",
            Opcode::F64Load => "f64.load",
            Opcode::I32Load8S => "i32.load8_s",
            Opcode::I32Load8U => "i32.load8_u",
            Opcode::I32Load16S => "i32.load16_s",
            Opcode::I32Load16U => "i32.load16_u",
            Opcode::I64Load8S => "i64.load8_s",
            Opcode::I64Load8U => "i64.load8_u",
            Opcode::I64Load16S => "i64.load16_s",
            Opcode::I64Load16U => "i64.load16_u",
            Opcode::I64Load32S => "i64.load32_s",
            Opcode::I64Load32U => "i64.load32_u",
            Opcode::I32Store => "i32.store",
            Opcode::I64Store => "i64.store",
            Opcode::F32Store => "f32.store",
            Opcode::F64Store => "f64.store",
            Opcode::I32Store8 => "i32.store8",
            Opcode::I32Store16 => "i32.store16",
            Opcode::I64Store8 => "i64.store8",
            Opcode::I64Store16 => "i64.store16",
            Opcode::I64Store32 => "i64.store32",
            Opcode::MemorySize => "memory.size",
            Opcode::MemoryGrow => "memory.grow",
            Opcode::I32Const => "i32.const",
            Opcode::I64Const => "i64.const",
            Opcode::F32Const => "f32.const",
            Opcode::F64Const => "f64.const",
            Opcode::I32Eqz => "i32.eqz",
            Opcode::I32Eq => "i32.eq",
            Opcode::I32Ne => "i32.ne",
            Opcode::I32LtS => "i32.lt_s",
            Opcode::I32LtU => "i32.lt_u",
            Opcode::I32GtS => "i32.gt_s",
            Opcode::I32GtU => "i32.gt_u",
            Opcode::I32LeS => "i32.le_s",
            Opcode::I32LeU => "i32.le_u",
            Opcode::I32GeS => "i32.ge_s",
            Opcode::I32GeU => "i32.ge_u",
            Opcode::I64Eqz => "i64.eqz",
            Opcode::I64Eq => "i64.eq",
            Opcode::I64Ne => "i64.ne",
            Opcode::I64LtS => "i64.lt_s",
            Opcode::I64LtU => "i64.lt_u",
            Opcode::I64GtS => "i64.gt_s",
            Opcode::I64GtU => "i64.gt_u",
            Opcode::I64LeS => "i64.le_s",
            Opcode::I64LeU => "i64.le_u",
            Opcode::I64GeS => "i64.ge_s",
            Opcode::I64GeU => "i64.ge_u",
            Opcode::F32Eq => "f32.eq",
            Opcode::F32Ne => "f32.ne",
            Opcode::F32Lt => "f32.lt",
            Opcode::F32Gt => "f32.gt",
            Opcode::F32Le => "f32.le",
            Opcode::F32Ge => "f32.ge",
            Opcode::F64Eq => "f64.eq",
            Opcode::F64Ne => "f64.ne",
            Opcode::F64Lt => "f64.lt",
            Opcode::F64Gt => "f64.gt",
            Opcode::F64Le => "f64.le",
            Opcode::F64Ge => "f64.ge",
            Opcode::I32Clz => "i32.clz",
            Opcode::I32Ctz => "i32.ctz",
            Opcode::I32Popcnt => "i32.popcnt",
            Opcode::I32Add => "i32.add",
            Opcode::I32Sub => "i32.sub",
            Opcode::I32Mul => "i32.mul",
            Opcode::I32DivS => "i32.div_s",
            Opcode::I32DivU => "i32.div_u",
            Opcode::I32RemS => "i32.rem_s",
            Opcode::I32RemU => "i32.rem_u",
            Opcode::I32And => "i32.and",
            Opcode::I32Or => "i32.or",
            Opcode::I32Xor => "i32.xor",
            Opcode::I32Shl => "i32.shl",
            Opcode::I32ShrS => "i32.shr_s",
            Opcode::I32ShrU => "i32.shr_u",
            Opcode::I32Rotl => "i32.rotl",
            Opcode::I32Rotr => "i32.rotr",
            Opcode::I64Clz => "i64.clz",
            Opcode::I64Ctz => "i64.ctz",
            Opcode::I64Popcnt => "i64.popcnt",
            Opcode::I64Add => "i64.add",
            Opcode::I64Sub => "i64.sub",
            Opcode::I64Mul => "i64.mul",
            Opcode::I64DivS => "i64.div_s",
            Opcode::I64DivU => "i64.div_u",
            Opcode::I64RemS => "i64.rem_s",
            Opcode::I64RemU => "i64.rem.u",
            Opcode::I64And => "i64.and",
            Opcode::I64Or => "i64.or",
            Opcode::I64Xor => "i64.xor",
            Opcode::I64Shl => "i64.shl",
            Opcode::I64ShrS => "i64.shr_s",
            Opcode::I64ShrU => "i64.shr_u",
            Opcode::I64Rotl => "i64.rotl",
            Opcode::I64Rotr => "i64.rotr",
            Opcode::F32Abs => "f32.abs",
            Opcode::F32Neg => "f32.neg",
            Opcode::F32Ceil => "f32.ceil",
            Opcode::F32Floor => "f32.floor",
            Opcode::F32Trunc => "f32.trunc",
            Opcode::F32Nearest => "f32.nearest",
            Opcode::F32Sqrt => "f32.sqrt",
            Opcode::F32Add => "f32.add",
            Opcode::F32Sub => "f32.sub",
            Opcode::F32Mul => "f32.mul",
            Opcode::F32Div => "f32.div",
            Opcode::F32Min => "f32.min",
            Opcode::F32Max => "f32.max",
            Opcode::F32Copysign => "f32.copysign",
            Opcode::F64Abs => "f64.abs",
            Opcode::F64Neg => "f64.neg",
            Opcode::F64Ceil => "f64.ceil",
            Opcode::F64Floor => "f64.floor",
            Opcode::F64Trunc => "f64.trunc",
            Opcode::F64Nearest => "f64.nearest",
            Opcode::F64Sqrt => "f64.sqrt",
            Opcode::F64Add => "f64.add",
            Opcode::F64Sub => "f64.sub",
            Opcode::F64Mul => "f64.mul",
            Opcode::F64Div => "f64.div",
            Opcode::F64Min => "f64.min",
            Opcode::F64Max => "f64.max",
            Opcode::F64Copysign => "f64.copysign",
            Opcode::I32WrapI64 => "i32.wrap_i64",
            Opcode::I32TruncF32S => "i32.trunc_f32_s",
            Opcode::I32TruncF32U => "i32.trunc_f32_u",
            Opcode::I32TruncF64S => "i32.trunc_f64_s",
            Opcode::I32TruncF64U => "i32.trunc_f64_u",
            Opcode::I64ExtendI32S => "i64.extend_i32_s",
            Opcode::I64ExtendI32U => "i64.extend_i32_u",
            Opcode::I64TruncF32S => "i64.trunc_f32_s",
            Opcode::I64TruncF32U => "i64.trunc_f32_u",
            Opcode::I64TruncF64S => "i64.trunc_f64_s",
            Opcode::I64TruncF64U => "i64.trunc_f64_u",
            Opcode::F32ConvertI32S => "f32.convert_i32_s",
            Opcode::F32ConvertI32U => "f32.convert_i32_u",
            Opcode::F32ConvertI64S => "f32.convert_i64_s",
            Opcode::F32ConvertI64U => "f32.convert_i64_u",
            Opcode::F32DemoteF64 => "f32.demote_f64",
            Opcode::F64ConvertI32S => "f64.convert_i32_s",
            Opcode::F64ConvertI32U => "f64.convert_i32_u",
            Opcode::F64ConvertI64S => "f64.convert_i64_s",
            Opcode::F64ConvertI64U => "f64.convert_i64_u",
            Opcode::F64PromoteF32 => "f64.promote_f32",
            Opcode::I32ReinterpretF32 => "i32.reinterpret_f32",
            Opcode::I64ReinterpretF64 => "i64.reinterpret_f64",
            Opcode::F32ReinterpretI32 => "f32.reinterpret_i32",
            Opcode::F64ReinterpretI64 => "f64.reinterpret_i64",
            Opcode::MemoryInit => "memory.init",
            Opcode::DataDrop => "data.drop",
            Opcode::MemoryCopy => "memory.copy",
            Opcode::MemoryFill => "memory.fill",
            Opcode::TableInit => "table.init",
            Opcode::TableCopy => "table.copy",
            Opcode::TableGet => "table.get",
            Opcode::TableSet => "table.set",
            Opcode::TableGrow => "table.grow",
            Opcode::TableSize => "table.size",
            Opcode::TableFill => "table.fill",
            Opcode::ElemDrop => "elem.drop",
            Opcode::RefNull => "ref.null",
            Opcode::RefIsNull => "ref.is_null",
            Opcode::RefFunc => "ref.func",
            Opcode::I32TruncSatF32S => "i32.trunc_sat_f32_s",
            Opcode::I32TruncSatF32U => "i32.trunc_sat_f32_u",
            Opcode::I32TruncSatF64S => "i32.trunc_sat_f64_s",
            Opcode::I32TruncSatF64U => "i32.trunc_sat_f64_u",
            Opcode::I64TruncSatF32S => "i64.trunc_sat_f32_s",
            Opcode::I64TruncSatF32U => "i64.trunc_sat_f32_u",
            Opcode::I64TruncSatF64S => "i64.trunc_sat_f64_s",
            Opcode::I64TruncSatF64U => "i64.trunc_sat_f64_u",
            Opcode::I32Extend8S => "i32.extend8_s",
            Opcode::I32Extend16S => "i32.extend16_s",
            Opcode::I64Extend8S => "i64.extend8_s",
            Opcode::I64Extend16S => "i64.extend16_s",
            Opcode::I64Extend32S => "i64.extend32_s",
        };

        write!(f, "{to_write}")
    }
}
